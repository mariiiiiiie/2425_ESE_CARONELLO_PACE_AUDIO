
AutoRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008908  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08008a98  08008a98  00009a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de0  08008de0  0000a13c  2**0
                  CONTENTS
  4 .ARM          00000008  08008de0  08008de0  00009de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de8  08008de8  0000a13c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de8  08008de8  00009de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dec  08008dec  00009dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  08008df0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055f0  2000013c  08008f2c  0000a13c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000572c  08008f2c  0000a72c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a13c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e566  00000000  00000000  0000a16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004777  00000000  00000000  000286d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001331  00000000  00000000  0002e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7f4  00000000  00000000  0002fa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f264  00000000  00000000  0005b255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100763  00000000  00000000  0007a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ac1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007098  00000000  00000000  0017ac60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00181cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a80 	.word	0x08008a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000140 	.word	0x20000140
 80001cc:	08008a80 	.word	0x08008a80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MCP23S17_init>:
#include "shell.h"

#define MCP23S17_ADDR 0x40//A0=A1=A2=GND
#define MCP23S17_SPI hspi3

void MCP23S17_init(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0


	/* 0x12 - GPIOA | 0x13 - GPIOB
	 *
	 */
	MCP23S17_WriteRegister(0x12, 255) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 8000594:	21ff      	movs	r1, #255	@ 0xff
 8000596:	2012      	movs	r0, #18
 8000598:	f000 f84a 	bl	8000630 <MCP23S17_WriteRegister>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d104      	bne.n	80005ac <MCP23S17_init+0x1c>
 80005a2:	491d      	ldr	r1, [pc, #116]	@ (8000618 <MCP23S17_init+0x88>)
 80005a4:	481d      	ldr	r0, [pc, #116]	@ (800061c <MCP23S17_init+0x8c>)
 80005a6:	f007 f993 	bl	80078d0 <debug>
 80005aa:	e003      	b.n	80005b4 <MCP23S17_init+0x24>
 80005ac:	491a      	ldr	r1, [pc, #104]	@ (8000618 <MCP23S17_init+0x88>)
 80005ae:	481c      	ldr	r0, [pc, #112]	@ (8000620 <MCP23S17_init+0x90>)
 80005b0:	f007 f98e 	bl	80078d0 <debug>
	MCP23S17_WriteRegister(0x13, 0) == HAL_OK ? debug(START,"MCP23S17 - GPIOB") : debug(D_ERROR,"MCP23S17 - GPIOB");
 80005b4:	2100      	movs	r1, #0
 80005b6:	2013      	movs	r0, #19
 80005b8:	f000 f83a 	bl	8000630 <MCP23S17_WriteRegister>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d104      	bne.n	80005cc <MCP23S17_init+0x3c>
 80005c2:	4918      	ldr	r1, [pc, #96]	@ (8000624 <MCP23S17_init+0x94>)
 80005c4:	4815      	ldr	r0, [pc, #84]	@ (800061c <MCP23S17_init+0x8c>)
 80005c6:	f007 f983 	bl	80078d0 <debug>
 80005ca:	e003      	b.n	80005d4 <MCP23S17_init+0x44>
 80005cc:	4915      	ldr	r1, [pc, #84]	@ (8000624 <MCP23S17_init+0x94>)
 80005ce:	4814      	ldr	r0, [pc, #80]	@ (8000620 <MCP23S17_init+0x90>)
 80005d0:	f007 f97e 	bl	80078d0 <debug>

	/* 0x00 - IODIRA | 0x01 - IODIRB
	 * 0 : All Pins as Output
	 */
	MCP23S17_WriteRegister(0x00, 0) == HAL_OK ? debug(START,"MCP23S17 - IODIRA") : debug(D_ERROR,"MCP23S17 - IODIRA");
 80005d4:	2100      	movs	r1, #0
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f82a 	bl	8000630 <MCP23S17_WriteRegister>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d104      	bne.n	80005ec <MCP23S17_init+0x5c>
 80005e2:	4911      	ldr	r1, [pc, #68]	@ (8000628 <MCP23S17_init+0x98>)
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <MCP23S17_init+0x8c>)
 80005e6:	f007 f973 	bl	80078d0 <debug>
 80005ea:	e003      	b.n	80005f4 <MCP23S17_init+0x64>
 80005ec:	490e      	ldr	r1, [pc, #56]	@ (8000628 <MCP23S17_init+0x98>)
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <MCP23S17_init+0x90>)
 80005f0:	f007 f96e 	bl	80078d0 <debug>
	MCP23S17_WriteRegister(0x01, 0) == HAL_OK ? debug(START,"MCP23S17 - IODIRB") : debug(D_ERROR,"MCP23S17 - IODIRB");
 80005f4:	2100      	movs	r1, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 f81a 	bl	8000630 <MCP23S17_WriteRegister>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d104      	bne.n	800060c <MCP23S17_init+0x7c>
 8000602:	490a      	ldr	r1, [pc, #40]	@ (800062c <MCP23S17_init+0x9c>)
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <MCP23S17_init+0x8c>)
 8000606:	f007 f963 	bl	80078d0 <debug>


}
 800060a:	e003      	b.n	8000614 <MCP23S17_init+0x84>
	MCP23S17_WriteRegister(0x01, 0) == HAL_OK ? debug(START,"MCP23S17 - IODIRB") : debug(D_ERROR,"MCP23S17 - IODIRB");
 800060c:	4907      	ldr	r1, [pc, #28]	@ (800062c <MCP23S17_init+0x9c>)
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <MCP23S17_init+0x90>)
 8000610:	f007 f95e 	bl	80078d0 <debug>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	08008a98 	.word	0x08008a98
 800061c:	08008aac 	.word	0x08008aac
 8000620:	08008ab8 	.word	0x08008ab8
 8000624:	08008ac4 	.word	0x08008ac4
 8000628:	08008ad8 	.word	0x08008ad8
 800062c:	08008aec 	.word	0x08008aec

08000630 <MCP23S17_WriteRegister>:

HAL_StatusTypeDef MCP23S17_WriteRegister(uint8_t reg, uint8_t data){
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
	uint8_t pData[3];

	pData[0] = MCP23S17_ADDR ;
 8000640:	2340      	movs	r3, #64	@ 0x40
 8000642:	733b      	strb	r3, [r7, #12]
	pData[1] = reg;
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	737b      	strb	r3, [r7, #13]
	pData[2] = data;
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <MCP23S17_WriteRegister+0x50>)
 8000652:	f000 ffdb 	bl	800160c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&MCP23S17_SPI, pData, 3, HAL_MAX_DELAY);
 8000656:	f107 010c 	add.w	r1, r7, #12
 800065a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800065e:	2203      	movs	r2, #3
 8000660:	4808      	ldr	r0, [pc, #32]	@ (8000684 <MCP23S17_WriteRegister+0x54>)
 8000662:	f002 fbe0 	bl	8002e26 <HAL_SPI_Transmit>
 8000666:	4603      	mov	r3, r0
 8000668:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MCP23S17_WriteRegister+0x50>)
 8000670:	f000 ffcc 	bl	800160c <HAL_GPIO_WritePin>
	return ret;
 8000674:	7bfb      	ldrb	r3, [r7, #15]

}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	48000400 	.word	0x48000400
 8000684:	20000400 	.word	0x20000400

08000688 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4a07      	ldr	r2, [pc, #28]	@ (80006b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <vApplicationGetIdleTaskMemory+0x30>)
 800069e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	2000015c 	.word	0x2000015c
 80006b8:	200001fc 	.word	0x200001fc

080006bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_FREERTOS_Init+0x30>)
 80006c4:	1d3c      	adds	r4, r7, #4
 80006c6:	461d      	mov	r5, r3
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 ff5a 	bl	8005592 <osThreadCreate>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a03      	ldr	r2, [pc, #12]	@ (80006f0 <MX_FREERTOS_Init+0x34>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdb0      	pop	{r4, r5, r7, pc}
 80006ec:	08008b0c 	.word	0x08008b0c
 80006f0:	20000158 	.word	0x20000158

080006f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f004 ff94 	bl	800562a <osDelay>
 8000702:	e7fb      	b.n	80006fc <StartDefaultTask+0x8>

08000704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <MX_GPIO_Init+0xec>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a34      	ldr	r2, [pc, #208]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a2e      	ldr	r2, [pc, #184]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <MX_GPIO_Init+0xec>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_GPIO_Init+0xec>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_RESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2121      	movs	r1, #33	@ 0x21
 800077e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000782:	f000 ff43 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2180      	movs	r1, #128	@ 0x80
 800078a:	481a      	ldr	r0, [pc, #104]	@ (80007f4 <MX_GPIO_Init+0xf0>)
 800078c:	f000 ff3e 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000796:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <MX_GPIO_Init+0xf4>)
 80007a8:	f000 fd86 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VU_RESET_Pin|LD2_Pin;
 80007ac:	2321      	movs	r3, #33	@ 0x21
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c6:	f000 fd77 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_NSS_Pin;
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_GPIO_Init+0xf0>)
 80007e2:	f000 fd69 	bl	80012b8 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	@ 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000400 	.word	0x48000400
 80007f8:	48000800 	.word	0x48000800

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fbb7 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f82b 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f7ff ff7b 	bl	8000704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800080e:	f000 faf3 	bl	8000df8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000812:	f000 f88f 	bl	8000934 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	shell_init();
 8000816:	f006 febf 	bl	8007598 <shell_init>
	xTaskCreate(shell_run,	"Shell", TASK_STACK_DEPTH_SHELL, NULL, TASK_PRIORITY_SHELL, &h_task_shell) != pdPASS ? Error_Handler():(void)0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <main+0x58>)
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	2304      	movs	r3, #4
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2300      	movs	r3, #0
 8000824:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000828:	490b      	ldr	r1, [pc, #44]	@ (8000858 <main+0x5c>)
 800082a:	480c      	ldr	r0, [pc, #48]	@ (800085c <main+0x60>)
 800082c:	f005 fb0a 	bl	8005e44 <xTaskCreate>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d001      	beq.n	800083a <main+0x3e>
 8000836:	f000 f877 	bl	8000928 <Error_Handler>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000842:	f000 fee3 	bl	800160c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000846:	f7ff ff39 	bl	80006bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800084a:	f004 fe9b 	bl	8005584 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <main+0x52>
 8000852:	bf00      	nop
 8000854:	200003fc 	.word	0x200003fc
 8000858:	08008b28 	.word	0x08008b28
 800085c:	0800762d 	.word	0x0800762d

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b096      	sub	sp, #88	@ 0x58
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2244      	movs	r2, #68	@ 0x44
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f007 f9d0 	bl	8007c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000882:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000886:	f000 fee7 	bl	8001658 <HAL_PWREx_ControlVoltageScaling>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000890:	f000 f84a 	bl	8000928 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000894:	2302      	movs	r3, #2
 8000896:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800089c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2310      	movs	r3, #16
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a6:	2302      	movs	r3, #2
 80008a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ae:	230a      	movs	r3, #10
 80008b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008b2:	2307      	movs	r3, #7
 80008b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 ff1e 	bl	8001704 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ce:	f000 f82b 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2303      	movs	r3, #3
 80008d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	2104      	movs	r1, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fae6 	bl	8001ebc <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008f6:	f000 f817 	bl	8000928 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3758      	adds	r7, #88	@ 0x58
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d101      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000916:	f000 fb4d 	bl	8000fb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40014800 	.word	0x40014800

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <MX_SPI3_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000940:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000944:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800094e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000952:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000966:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800096a:	2228      	movs	r2, #40	@ 0x28
 800096c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000982:	2207      	movs	r2, #7
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800098e:	2208      	movs	r2, #8
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000994:	f002 f9a4 	bl	8002ce0 <HAL_SPI_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800099e:	f7ff ffc3 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000400 	.word	0x20000400
 80009ac:	40003c00 	.word	0x40003c00

080009b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a25      	ldr	r2, [pc, #148]	@ (8000a64 <HAL_SPI_MspInit+0xb4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d144      	bne.n	8000a5c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009d2:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d6:	4a24      	ldr	r2, [pc, #144]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 80009d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_SPI_MspInit+0xb8>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <HAL_SPI_MspInit+0xbc>)
 8000a38:	f000 fc3e 	bl	80012b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <HAL_SPI_MspInit+0xc0>)
 8000a58:	f000 fc2e 	bl	80012b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40003c00 	.word	0x40003c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	48000400 	.word	0x48000400

08000a74 <__io_putchar>:
/* USER CODE END Macro */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a7c:	1d39      	adds	r1, r7, #4
 8000a7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a82:	2201      	movs	r2, #1
 8000a84:	4803      	ldr	r0, [pc, #12]	@ (8000a94 <__io_putchar+0x20>)
 8000a86:	f003 f9c9 	bl	8003e1c <HAL_UART_Transmit>
	return ch;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000524 	.word	0x20000524

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa2:	4a10      	ldr	r2, [pc, #64]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	f06f 0001 	mvn.w	r0, #1
 8000ad6:	f000 fb45 	bl	8001164 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000af6:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <HAL_InitTick+0xd4>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000afa:	4a30      	ldr	r2, [pc, #192]	@ (8000bbc <HAL_InitTick+0xd4>)
 8000afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b02:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <HAL_InitTick+0xd4>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b0e:	f107 020c 	add.w	r2, r7, #12
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fb93 	bl	8002244 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b1e:	f001 fb7b 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8000b22:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b26:	4a26      	ldr	r2, [pc, #152]	@ (8000bc0 <HAL_InitTick+0xd8>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	0c9b      	lsrs	r3, r3, #18
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b34:	4a24      	ldr	r2, [pc, #144]	@ (8000bc8 <HAL_InitTick+0xe0>)
 8000b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b3e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000b40:	4a20      	ldr	r2, [pc, #128]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8000b58:	481a      	ldr	r0, [pc, #104]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b5a:	f002 fc3f 	bl	80033dc <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d11b      	bne.n	8000ba4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000b6c:	4815      	ldr	r0, [pc, #84]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000b6e:	f002 fca3 	bl	80034b8 <HAL_TIM_Base_Start_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d111      	bne.n	8000ba4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b80:	201a      	movs	r0, #26
 8000b82:	f000 fb0b 	bl	800119c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d808      	bhi.n	8000b9e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	201a      	movs	r0, #26
 8000b92:	f000 fae7 	bl	8001164 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b96:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_InitTick+0xe4>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e002      	b.n	8000ba4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim17, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000ba6:	210e      	movs	r1, #14
 8000ba8:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <HAL_InitTick+0xdc>)
 8000baa:	f002 fe79 	bl	80038a0 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3730      	adds	r7, #48	@ 0x30
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	431bde83 	.word	0x431bde83
 8000bc4:	20000464 	.word	0x20000464
 8000bc8:	40014800 	.word	0x40014800
 8000bcc:	20000004 	.word	0x20000004
 8000bd0:	08000bd5 	.word	0x08000bd5

08000bd4 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8000bdc:	f000 f9ea 	bl	8000fb4 <HAL_IncTick>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000c26:	f002 fcb7 	bl	8003598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000464 	.word	0x20000464

08000c34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <USART2_IRQHandler+0x10>)
 8000c3a:	f003 f9c5 	bl	8003fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000524 	.word	0x20000524

08000c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_kill>:

int _kill(int pid, int sig)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c62:	f007 f835 	bl	8007cd0 <__errno>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2216      	movs	r2, #22
 8000c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_exit>:

void _exit (int status)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ffe7 	bl	8000c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c8a:	bf00      	nop
 8000c8c:	e7fd      	b.n	8000c8a <_exit+0x12>

08000c8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e00a      	b.n	8000cb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca0:	f3af 8000 	nop.w
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	60ba      	str	r2, [r7, #8]
 8000cac:	b2ca      	uxtb	r2, r1
 8000cae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	dbf0      	blt.n	8000ca0 <_read+0x12>
  }

  return len;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e009      	b.n	8000cee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fec6 	bl	8000a74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dbf1      	blt.n	8000cda <_write+0x12>
  }
  return len;
 8000cf6:	687b      	ldr	r3, [r7, #4]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_close>:

int _close(int file)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d28:	605a      	str	r2, [r3, #4]
  return 0;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_isatty>:

int _isatty(int file)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f006 ff9a 	bl	8007cd0 <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20018000 	.word	0x20018000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	20000520 	.word	0x20000520
 8000dd0:	20005730 	.word	0x20005730

08000dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000dfe:	4a15      	ldr	r2, [pc, #84]	@ (8000e54 <MX_USART2_UART_Init+0x5c>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e02:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e3c:	f002 ffa0 	bl	8003d80 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e46:	f7ff fd6f 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000524 	.word	0x20000524
 8000e54:	40004400 	.word	0x40004400

08000e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2288      	movs	r2, #136	@ 0x88
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fecb 	bl	8007c14 <memset>
  if(uartHandle->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a25      	ldr	r2, [pc, #148]	@ (8000f18 <HAL_UART_MspInit+0xc0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d143      	bne.n	8000f10 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fa67 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff fd42 	bl	8000928 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <HAL_UART_MspInit+0xc4>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f1c <HAL_UART_MspInit+0xc4>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <HAL_UART_MspInit+0xc4>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_UART_MspInit+0xc4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <HAL_UART_MspInit+0xc4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_UART_MspInit+0xc4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f000 f9dc 	bl	80012b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2105      	movs	r1, #5
 8000f04:	2026      	movs	r0, #38	@ 0x26
 8000f06:	f000 f92d 	bl	8001164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0a:	2026      	movs	r0, #38	@ 0x26
 8000f0c:	f000 f946 	bl	800119c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f10:	bf00      	nop
 8000f12:	37b0      	adds	r7, #176	@ 0xb0
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ff56 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f006 fec5 	bl	8007cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fc53 	bl	80007fc <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000f64:	08008df0 	.word	0x08008df0
  ldr r2, =_sbss
 8000f68:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8000f6c:	2000572c 	.word	0x2000572c

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_Init+0x3c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <HAL_Init+0x3c>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f000 f8df 	bl	800114e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f90:	200f      	movs	r0, #15
 8000f92:	f7ff fda9 	bl	8000ae8 <HAL_InitTick>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	e001      	b.n	8000fa6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa2:	f7ff fd79 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	200005ac 	.word	0x200005ac

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200005ac 	.word	0x200005ac

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	@ (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	@ (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	@ (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	@ 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff4c 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001176:	f7ff ff61 	bl	800103c <__NVIC_GetPriorityGrouping>
 800117a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	6978      	ldr	r0, [r7, #20]
 8001182:	f7ff ffb1 	bl	80010e8 <NVIC_EncodePriority>
 8001186:	4602      	mov	r2, r0
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff80 	bl	8001094 <__NVIC_SetPriority>
}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff54 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d008      	beq.n	80011e2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2204      	movs	r2, #4
 80011d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e022      	b.n	8001228 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 020e 	bic.w	r2, r2, #14
 80011f0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f003 021c 	and.w	r2, r3, #28
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d005      	beq.n	8001258 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2204      	movs	r2, #4
 8001250:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e029      	b.n	80012ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 020e 	bic.w	r2, r2, #14
 8001266:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127c:	f003 021c 	and.w	r2, r3, #28
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	2101      	movs	r1, #1
 8001286:	fa01 f202 	lsl.w	r2, r1, r2
 800128a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	4798      	blx	r3
    }
  }
  return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	e17f      	b.n	80015c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8171 	beq.w	80015c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d005      	beq.n	80012f8 <HAL_GPIO_Init+0x40>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d130      	bne.n	800135a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800132e:	2201      	movs	r2, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	f003 0201 	and.w	r2, r3, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b03      	cmp	r3, #3
 8001364:	d118      	bne.n	8001398 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800136c:	2201      	movs	r2, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	f003 0201 	and.w	r2, r3, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d017      	beq.n	80013d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	6939      	ldr	r1, [r7, #16]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80ac 	beq.w	80015c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b5f      	ldr	r3, [pc, #380]	@ (80015e8 <HAL_GPIO_Init+0x330>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	4a5e      	ldr	r2, [pc, #376]	@ (80015e8 <HAL_GPIO_Init+0x330>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6613      	str	r3, [r2, #96]	@ 0x60
 8001476:	4b5c      	ldr	r3, [pc, #368]	@ (80015e8 <HAL_GPIO_Init+0x330>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001482:	4a5a      	ldr	r2, [pc, #360]	@ (80015ec <HAL_GPIO_Init+0x334>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014ac:	d025      	beq.n	80014fa <HAL_GPIO_Init+0x242>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	@ (80015f0 <HAL_GPIO_Init+0x338>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01f      	beq.n	80014f6 <HAL_GPIO_Init+0x23e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	@ (80015f4 <HAL_GPIO_Init+0x33c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x23a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4d      	ldr	r2, [pc, #308]	@ (80015f8 <HAL_GPIO_Init+0x340>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x236>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	@ (80015fc <HAL_GPIO_Init+0x344>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x232>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001600 <HAL_GPIO_Init+0x348>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x22e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001604 <HAL_GPIO_Init+0x34c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x22a>
 80014de:	2306      	movs	r3, #6
 80014e0:	e00c      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e00a      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014fa:	2300      	movs	r3, #0
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150c:	4937      	ldr	r1, [pc, #220]	@ (80015ec <HAL_GPIO_Init+0x334>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800151a:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <HAL_GPIO_Init+0x350>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800153e:	4a32      	ldr	r2, [pc, #200]	@ (8001608 <HAL_GPIO_Init+0x350>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001544:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <HAL_GPIO_Init+0x350>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001568:	4a27      	ldr	r2, [pc, #156]	@ (8001608 <HAL_GPIO_Init+0x350>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <HAL_GPIO_Init+0x350>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001592:	4a1d      	ldr	r2, [pc, #116]	@ (8001608 <HAL_GPIO_Init+0x350>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_GPIO_Init+0x350>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015bc:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <HAL_GPIO_Init+0x350>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f47f ae78 	bne.w	80012c8 <HAL_GPIO_Init+0x10>
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000800 	.word	0x48000800
 80015f8:	48000c00 	.word	0x48000c00
 80015fc:	48001000 	.word	0x48001000
 8001600:	48001400 	.word	0x48001400
 8001604:	48001800 	.word	0x48001800
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001628:	e002      	b.n	8001630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001640:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <HAL_PWREx_GetVoltageRange+0x18>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000

08001658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001666:	d130      	bne.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001668:	4b23      	ldr	r3, [pc, #140]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001674:	d038      	beq.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800167e:	4a1e      	ldr	r2, [pc, #120]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001680:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001684:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2232      	movs	r2, #50	@ 0x32
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	4a1b      	ldr	r2, [pc, #108]	@ (8001700 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0c9b      	lsrs	r3, r3, #18
 8001698:	3301      	adds	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169c:	e002      	b.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a4:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b0:	d102      	bne.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f2      	bne.n	800169e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016c4:	d110      	bne.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e00f      	b.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ca:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016d6:	d007      	beq.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016e0:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40007000 	.word	0x40007000
 80016fc:	20000000 	.word	0x20000000
 8001700:	431bde83 	.word	0x431bde83

08001704 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e3ca      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001716:	4b97      	ldr	r3, [pc, #604]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001720:	4b94      	ldr	r3, [pc, #592]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80e4 	beq.w	8001900 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_RCC_OscConfig+0x4a>
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	f040 808b 	bne.w	800185c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b01      	cmp	r3, #1
 800174a:	f040 8087 	bne.w	800185c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800174e:	4b89      	ldr	r3, [pc, #548]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x62>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e3a2      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1a      	ldr	r2, [r3, #32]
 800176a:	4b82      	ldr	r3, [pc, #520]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <HAL_RCC_OscConfig+0x7c>
 8001776:	4b7f      	ldr	r3, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800177e:	e005      	b.n	800178c <HAL_RCC_OscConfig+0x88>
 8001780:	4b7c      	ldr	r3, [pc, #496]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800178c:	4293      	cmp	r3, r2
 800178e:	d223      	bcs.n	80017d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fd87 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e383      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a4:	4b73      	ldr	r3, [pc, #460]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a72      	ldr	r2, [pc, #456]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b70      	ldr	r3, [pc, #448]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	496d      	ldr	r1, [pc, #436]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	4968      	ldr	r1, [pc, #416]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
 80017d6:	e025      	b.n	8001824 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d8:	4b66      	ldr	r3, [pc, #408]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a65      	ldr	r2, [pc, #404]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b63      	ldr	r3, [pc, #396]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4960      	ldr	r1, [pc, #384]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	495b      	ldr	r1, [pc, #364]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd47 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e343      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001824:	f000 fc4a 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b52      	ldr	r3, [pc, #328]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	4950      	ldr	r1, [pc, #320]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	4a4e      	ldr	r2, [pc, #312]	@ (800197c <HAL_RCC_OscConfig+0x278>)
 8001842:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001844:	4b4e      	ldr	r3, [pc, #312]	@ (8001980 <HAL_RCC_OscConfig+0x27c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff f94d 	bl	8000ae8 <HAL_InitTick>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d052      	beq.n	80018fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	e327      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d032      	beq.n	80018ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001864:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a42      	ldr	r2, [pc, #264]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001870:	f7ff fbb4 	bl	8000fdc <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001878:	f7ff fbb0 	bl	8000fdc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e310      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188a:	4b3a      	ldr	r3, [pc, #232]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001896:	4b37      	ldr	r3, [pc, #220]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a36      	ldr	r2, [pc, #216]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b34      	ldr	r3, [pc, #208]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4931      	ldr	r1, [pc, #196]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	492c      	ldr	r1, [pc, #176]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
 80018c8:	e01a      	b.n	8001900 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a29      	ldr	r2, [pc, #164]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb81 	bl	8000fdc <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018de:	f7ff fb7d 	bl	8000fdc <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e2dd      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x1da>
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d074      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b08      	cmp	r3, #8
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x21a>
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d10e      	bne.n	8001936 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d10b      	bne.n	8001936 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d064      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2f0>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d160      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e2ba      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x24a>
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	e026      	b.n	800199c <HAL_RCC_OscConfig+0x298>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001956:	d115      	bne.n	8001984 <HAL_RCC_OscConfig+0x280>
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800195e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a02      	ldr	r2, [pc, #8]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e014      	b.n	800199c <HAL_RCC_OscConfig+0x298>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	08008cb8 	.word	0x08008cb8
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004
 8001984:	4ba0      	ldr	r3, [pc, #640]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a9f      	ldr	r2, [pc, #636]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 800198a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b9d      	ldr	r3, [pc, #628]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a9c      	ldr	r2, [pc, #624]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff fb1a 	bl	8000fdc <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fb16 	bl	8000fdc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	@ 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e276      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019be:	4b92      	ldr	r3, [pc, #584]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x2a8>
 80019ca:	e014      	b.n	80019f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb06 	bl	8000fdc <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fb02 	bl	8000fdc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	@ 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e262      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e6:	4b88      	ldr	r3, [pc, #544]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2d0>
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d060      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_OscConfig+0x310>
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d119      	bne.n	8001a42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d116      	bne.n	8001a42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a14:	4b7c      	ldr	r3, [pc, #496]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_OscConfig+0x328>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e23f      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b76      	ldr	r3, [pc, #472]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	061b      	lsls	r3, r3, #24
 8001a3a:	4973      	ldr	r1, [pc, #460]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a40:	e040      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d023      	beq.n	8001a92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff fac1 	bl	8000fdc <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fabd 	bl	8000fdc <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e21d      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a70:	4b65      	ldr	r3, [pc, #404]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b62      	ldr	r3, [pc, #392]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	495f      	ldr	r1, [pc, #380]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
 8001a90:	e018      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a5c      	ldr	r2, [pc, #368]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fa9d 	bl	8000fdc <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fa99 	bl	8000fdc <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1f9      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab8:	4b53      	ldr	r3, [pc, #332]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ade:	4a4a      	ldr	r2, [pc, #296]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fa78 	bl	8000fdc <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af0:	f7ff fa74 	bl	8000fdc <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1d4      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b02:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ef      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3ec>
 8001b10:	e01b      	b.n	8001b4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b12:	4b3d      	ldr	r3, [pc, #244]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b18:	4a3b      	ldr	r2, [pc, #236]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff fa5b 	bl	8000fdc <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fa57 	bl	8000fdc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1b7      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b3c:	4b32      	ldr	r3, [pc, #200]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ef      	bne.n	8001b2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80a6 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10d      	bne.n	8001b84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	4a26      	ldr	r2, [pc, #152]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b74:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b80:	2301      	movs	r3, #1
 8001b82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_RCC_OscConfig+0x508>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d118      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b90:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <HAL_RCC_OscConfig+0x508>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	@ (8001c0c <HAL_RCC_OscConfig+0x508>)
 8001b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fa1e 	bl	8000fdc <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba4:	f7ff fa1a 	bl	8000fdc <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e17a      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_RCC_OscConfig+0x508>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d108      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4d8>
 8001bca:	4b0f      	ldr	r3, [pc, #60]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bda:	e029      	b.n	8001c30 <HAL_RCC_OscConfig+0x52c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d115      	bne.n	8001c10 <HAL_RCC_OscConfig+0x50c>
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bea:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bfa:	4a03      	ldr	r2, [pc, #12]	@ (8001c08 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c04:	e014      	b.n	8001c30 <HAL_RCC_OscConfig+0x52c>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	4b9c      	ldr	r3, [pc, #624]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c16:	4a9b      	ldr	r2, [pc, #620]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c20:	4b98      	ldr	r3, [pc, #608]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c26:	4a97      	ldr	r2, [pc, #604]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d016      	beq.n	8001c66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff f9d0 	bl	8000fdc <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7ff f9cc 	bl	8000fdc <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e12a      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c56:	4b8b      	ldr	r3, [pc, #556]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ed      	beq.n	8001c40 <HAL_RCC_OscConfig+0x53c>
 8001c64:	e015      	b.n	8001c92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff f9b9 	bl	8000fdc <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7ff f9b5 	bl	8000fdc <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e113      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c84:	4b7f      	ldr	r3, [pc, #508]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ed      	bne.n	8001c6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c98:	4b7a      	ldr	r3, [pc, #488]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9c:	4a79      	ldr	r2, [pc, #484]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80fe 	beq.w	8001eaa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	f040 80d0 	bne.w	8001e58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cb8:	4b72      	ldr	r3, [pc, #456]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d130      	bne.n	8001d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d127      	bne.n	8001d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d11f      	bne.n	8001d2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cf8:	2a07      	cmp	r2, #7
 8001cfa:	bf14      	ite	ne
 8001cfc:	2201      	movne	r2, #1
 8001cfe:	2200      	moveq	r2, #0
 8001d00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d113      	bne.n	8001d2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	3b01      	subs	r3, #1
 8001d28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d06e      	beq.n	8001e0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	d069      	beq.n	8001e08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d34:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d40:	4b50      	ldr	r3, [pc, #320]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0ad      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d50:	4b4c      	ldr	r3, [pc, #304]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a4b      	ldr	r2, [pc, #300]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001d56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d5c:	f7ff f93e 	bl	8000fdc <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff f93a 	bl	8000fdc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e09a      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d76:	4b43      	ldr	r3, [pc, #268]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d82:	4b40      	ldr	r3, [pc, #256]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	4b40      	ldr	r3, [pc, #256]	@ (8001e88 <HAL_RCC_OscConfig+0x784>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d92:	3a01      	subs	r2, #1
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d9c:	0212      	lsls	r2, r2, #8
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001da4:	0852      	lsrs	r2, r2, #1
 8001da6:	3a01      	subs	r2, #1
 8001da8:	0552      	lsls	r2, r2, #21
 8001daa:	4311      	orrs	r1, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001db0:	0852      	lsrs	r2, r2, #1
 8001db2:	3a01      	subs	r2, #1
 8001db4:	0652      	lsls	r2, r2, #25
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001dbc:	0912      	lsrs	r2, r2, #4
 8001dbe:	0452      	lsls	r2, r2, #17
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	4930      	ldr	r1, [pc, #192]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de0:	f7ff f8fc 	bl	8000fdc <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff f8f8 	bl	8000fdc <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e058      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e06:	e050      	b.n	8001eaa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e04f      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d148      	bne.n	8001eaa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e30:	f7ff f8d4 	bl	8000fdc <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f8d0 	bl	8000fdc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e030      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x734>
 8001e56:	e028      	b.n	8001eaa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d023      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <HAL_RCC_OscConfig+0x780>)
 8001e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f8b7 	bl	8000fdc <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	e00c      	b.n	8001e8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff f8b3 	bl	8000fdc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d905      	bls.n	8001e8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e013      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_RCC_OscConfig+0x7b0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ec      	bne.n	8001e72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_RCC_OscConfig+0x7b0>)
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4905      	ldr	r1, [pc, #20]	@ (8001eb4 <HAL_RCC_OscConfig+0x7b0>)
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_RCC_OscConfig+0x7b4>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
 8001ea4:	e001      	b.n	8001eaa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	feeefffc 	.word	0xfeeefffc

08001ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0e7      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b75      	ldr	r3, [pc, #468]	@ (80020a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d910      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b72      	ldr	r3, [pc, #456]	@ (80020a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 0207 	bic.w	r2, r3, #7
 8001ee6:	4970      	ldr	r1, [pc, #448]	@ (80020a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b6e      	ldr	r3, [pc, #440]	@ (80020a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0cf      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d010      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4b66      	ldr	r3, [pc, #408]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d908      	bls.n	8001f2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b63      	ldr	r3, [pc, #396]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4960      	ldr	r1, [pc, #384]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d04c      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	4b5a      	ldr	r3, [pc, #360]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d121      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0a6      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5a:	4b54      	ldr	r3, [pc, #336]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d115      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e09a      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f72:	4b4e      	ldr	r3, [pc, #312]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e08e      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f82:	4b4a      	ldr	r3, [pc, #296]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e086      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f92:	4b46      	ldr	r3, [pc, #280]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4943      	ldr	r1, [pc, #268]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa4:	f7ff f81a 	bl	8000fdc <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7ff f816 	bl	8000fdc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e06e      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 020c 	and.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1eb      	bne.n	8001fac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d010      	beq.n	8002002 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	4b31      	ldr	r3, [pc, #196]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d208      	bcs.n	8002002 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	492b      	ldr	r1, [pc, #172]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002002:	4b29      	ldr	r3, [pc, #164]	@ (80020a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d210      	bcs.n	8002032 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002010:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 0207 	bic.w	r2, r3, #7
 8002018:	4923      	ldr	r1, [pc, #140]	@ (80020a8 <HAL_RCC_ClockConfig+0x1ec>)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002020:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e036      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4918      	ldr	r1, [pc, #96]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4910      	ldr	r1, [pc, #64]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002070:	f000 f824 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	490b      	ldr	r1, [pc, #44]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	4a09      	ldr	r2, [pc, #36]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 800208e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fd27 	bl	8000ae8 <HAL_InitTick>
 800209a:	4603      	mov	r3, r0
 800209c:	72fb      	strb	r3, [r7, #11]

  return status;
 800209e:	7afb      	ldrb	r3, [r7, #11]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40022000 	.word	0x40022000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08008cb8 	.word	0x08008cb8
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d4:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x34>
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d121      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d11e      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f0:	4b34      	ldr	r3, [pc, #208]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020fc:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e005      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800210c:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002118:	4a2b      	ldr	r2, [pc, #172]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d102      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002134:	4b25      	ldr	r3, [pc, #148]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e004      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d101      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002140:	4b23      	ldr	r3, [pc, #140]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002142:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d134      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d003      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0xa6>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d003      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0xac>
 8002160:	e005      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002164:	617b      	str	r3, [r7, #20]
      break;
 8002166:	e005      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800216a:	617b      	str	r3, [r7, #20]
      break;
 800216c:	e002      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	617b      	str	r3, [r7, #20]
      break;
 8002172:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	3301      	adds	r3, #1
 8002180:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	fb03 f202 	mul.w	r2, r3, r2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	fbb2 f3f3 	udiv	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	0e5b      	lsrs	r3, r3, #25
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	3301      	adds	r3, #1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021b4:	69bb      	ldr	r3, [r7, #24]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08008cd0 	.word	0x08008cd0
 80021cc:	00f42400 	.word	0x00f42400
 80021d0:	007a1200 	.word	0x007a1200

080021d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021f0:	f7ff fff0 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4904      	ldr	r1, [pc, #16]	@ (8002214 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	08008cc8 	.word	0x08008cc8

08002218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800221c:	f7ff ffda 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0adb      	lsrs	r3, r3, #11
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4904      	ldr	r1, [pc, #16]	@ (8002240 <HAL_RCC_GetPCLK2Freq+0x28>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08008cc8 	.word	0x08008cc8

08002244 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	220f      	movs	r2, #15
 8002252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002260:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002286:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <HAL_RCC_GetClockConfig+0x60>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0207 	and.w	r2, r3, #7
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40022000 	.word	0x40022000

080022a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022c0:	f7ff f9bc 	bl	800163c <HAL_PWREx_GetVoltageRange>
 80022c4:	6178      	str	r0, [r7, #20]
 80022c6:	e014      	b.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	4a24      	ldr	r2, [pc, #144]	@ (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d4:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022e0:	f7ff f9ac 	bl	800163c <HAL_PWREx_GetVoltageRange>
 80022e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f8:	d10b      	bne.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	@ 0x80
 80022fe:	d919      	bls.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2ba0      	cmp	r3, #160	@ 0xa0
 8002304:	d902      	bls.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002306:	2302      	movs	r3, #2
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e013      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800230c:	2301      	movs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e010      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b80      	cmp	r3, #128	@ 0x80
 8002316:	d902      	bls.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002318:	2303      	movs	r3, #3
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e00a      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b80      	cmp	r3, #128	@ 0x80
 8002322:	d102      	bne.n	800232a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002324:	2302      	movs	r3, #2
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	e004      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b70      	cmp	r3, #112	@ 0x70
 800232e:	d101      	bne.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002330:	2301      	movs	r3, #1
 8002332:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 0207 	bic.w	r2, r3, #7
 800233c:	4909      	ldr	r1, [pc, #36]	@ (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002344:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002370:	2300      	movs	r3, #0
 8002372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002374:	2300      	movs	r3, #0
 8002376:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002380:	2b00      	cmp	r3, #0
 8002382:	d041      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002388:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800238c:	d02a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800238e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002392:	d824      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002394:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800239a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800239e:	d81e      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023a8:	d010      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023aa:	e018      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023ac:	4b86      	ldr	r3, [pc, #536]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a85      	ldr	r2, [pc, #532]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b8:	e015      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fabb 	bl	800293c <RCCEx_PLLSAI1_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ca:	e00c      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3320      	adds	r3, #32
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fba6 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023dc:	e003      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	74fb      	strb	r3, [r7, #19]
      break;
 80023e2:	e000      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ec:	4b76      	ldr	r3, [pc, #472]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023fa:	4973      	ldr	r1, [pc, #460]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002402:	e001      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d041      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002418:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800241c:	d02a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800241e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002422:	d824      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800242a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800242e:	d81e      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002438:	d010      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800243a:	e018      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800243c:	4b62      	ldr	r3, [pc, #392]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a61      	ldr	r2, [pc, #388]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002446:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002448:	e015      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa73 	bl	800293c <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245a:	e00c      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3320      	adds	r3, #32
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fb5e 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246c:	e003      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	74fb      	strb	r3, [r7, #19]
      break;
 8002472:	e000      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800247c:	4b52      	ldr	r3, [pc, #328]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800248a:	494f      	ldr	r1, [pc, #316]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002492:	e001      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a0 	beq.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024aa:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	4a40      	ldr	r2, [pc, #256]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80024cc:	4b3e      	ldr	r3, [pc, #248]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024dc:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3a      	ldr	r2, [pc, #232]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fd78 	bl	8000fdc <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ee:	e009      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fd74 	bl	8000fdc <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	74fb      	strb	r3, [r7, #19]
        break;
 8002502:	e005      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002504:	4b31      	ldr	r3, [pc, #196]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ef      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d15c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002516:	4b2c      	ldr	r3, [pc, #176]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	d019      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002534:	4b24      	ldr	r3, [pc, #144]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800253e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002540:	4b21      	ldr	r3, [pc, #132]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	4a20      	ldr	r2, [pc, #128]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	4a1c      	ldr	r2, [pc, #112]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002560:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fd33 	bl	8000fdc <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002578:	e00b      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fd2f 	bl	8000fdc <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d902      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	74fb      	strb	r3, [r7, #19]
            break;
 8002590:	e006      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ec      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b6:	4904      	ldr	r1, [pc, #16]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025be:	e009      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
 80025c4:	e006      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d4:	7c7b      	ldrb	r3, [r7, #17]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b9e      	ldr	r3, [pc, #632]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025de:	4a9d      	ldr	r2, [pc, #628]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f2:	4b98      	ldr	r3, [pc, #608]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f8:	f023 0203 	bic.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	4994      	ldr	r1, [pc, #592]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002614:	4b8f      	ldr	r3, [pc, #572]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261a:	f023 020c 	bic.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002622:	498c      	ldr	r1, [pc, #560]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002636:	4b87      	ldr	r3, [pc, #540]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	4983      	ldr	r1, [pc, #524]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002658:	4b7e      	ldr	r3, [pc, #504]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	497b      	ldr	r1, [pc, #492]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800267a:	4b76      	ldr	r3, [pc, #472]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002688:	4972      	ldr	r1, [pc, #456]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800269c:	4b6d      	ldr	r3, [pc, #436]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	496a      	ldr	r1, [pc, #424]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026be:	4b65      	ldr	r3, [pc, #404]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	4961      	ldr	r1, [pc, #388]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	4959      	ldr	r1, [pc, #356]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002702:	4b54      	ldr	r3, [pc, #336]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002710:	4950      	ldr	r1, [pc, #320]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002724:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002732:	4948      	ldr	r1, [pc, #288]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002746:	4b43      	ldr	r3, [pc, #268]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	493f      	ldr	r1, [pc, #252]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d028      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002768:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002776:	4937      	ldr	r1, [pc, #220]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002786:	d106      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b32      	ldr	r3, [pc, #200]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a31      	ldr	r2, [pc, #196]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
 8002794:	e011      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800279a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800279e:	d10c      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f8c8 	bl	800293c <RCCEx_PLLSAI1_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d028      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c6:	4b23      	ldr	r3, [pc, #140]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d4:	491f      	ldr	r1, [pc, #124]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027e4:	d106      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027f0:	60d3      	str	r3, [r2, #12]
 80027f2:	e011      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027fc:	d10c      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f899 	bl	800293c <RCCEx_PLLSAI1_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d02b      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002832:	4908      	ldr	r1, [pc, #32]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002842:	d109      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002844:	4b03      	ldr	r3, [pc, #12]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a02      	ldr	r2, [pc, #8]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800284e:	60d3      	str	r3, [r2, #12]
 8002850:	e014      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002860:	d10c      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f867 	bl	800293c <RCCEx_PLLSAI1_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02f      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002896:	4928      	ldr	r1, [pc, #160]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	2102      	movs	r1, #2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f844 	bl	800293c <RCCEx_PLLSAI1_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d014      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	74bb      	strb	r3, [r7, #18]
 80028c2:	e011      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3320      	adds	r3, #32
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f925 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028f4:	4b10      	ldr	r3, [pc, #64]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002902:	490d      	ldr	r1, [pc, #52]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002916:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002926:	4904      	ldr	r1, [pc, #16]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800292e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000

0800293c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800294a:	4b75      	ldr	r3, [pc, #468]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d018      	beq.n	8002988 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002956:	4b72      	ldr	r3, [pc, #456]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d10d      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
       ||
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800296e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
       ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d047      	beq.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e044      	b.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d018      	beq.n	80029c2 <RCCEx_PLLSAI1_Config+0x86>
 8002990:	2b03      	cmp	r3, #3
 8002992:	d825      	bhi.n	80029e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002994:	2b01      	cmp	r3, #1
 8002996:	d002      	beq.n	800299e <RCCEx_PLLSAI1_Config+0x62>
 8002998:	2b02      	cmp	r3, #2
 800299a:	d009      	beq.n	80029b0 <RCCEx_PLLSAI1_Config+0x74>
 800299c:	e020      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800299e:	4b60      	ldr	r3, [pc, #384]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11d      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ae:	e01a      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e013      	b.n	80029ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029c2:	4b57      	ldr	r3, [pc, #348]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ce:	4b54      	ldr	r3, [pc, #336]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029de:	e006      	b.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e004      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	4944      	ldr	r1, [pc, #272]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d17d      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a18:	4b41      	ldr	r3, [pc, #260]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a40      	ldr	r2, [pc, #256]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a24:	f7fe fada 	bl	8000fdc <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a2a:	e009      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a2c:	f7fe fad6 	bl	8000fdc <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a3e:	e005      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a40:	4b37      	ldr	r3, [pc, #220]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ef      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d160      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a58:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6892      	ldr	r2, [r2, #8]
 8002a68:	0211      	lsls	r1, r2, #8
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68d2      	ldr	r2, [r2, #12]
 8002a6e:	0912      	lsrs	r2, r2, #4
 8002a70:	0452      	lsls	r2, r2, #17
 8002a72:	430a      	orrs	r2, r1
 8002a74:	492a      	ldr	r1, [pc, #168]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]
 8002a7a:	e027      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d112      	bne.n	8002aa8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a82:	4b27      	ldr	r3, [pc, #156]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a8a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6892      	ldr	r2, [r2, #8]
 8002a92:	0211      	lsls	r1, r2, #8
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6912      	ldr	r2, [r2, #16]
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0552      	lsls	r2, r2, #21
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	491f      	ldr	r1, [pc, #124]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	610b      	str	r3, [r1, #16]
 8002aa6:	e011      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ab0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	0211      	lsls	r1, r2, #8
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6952      	ldr	r2, [r2, #20]
 8002abe:	0852      	lsrs	r2, r2, #1
 8002ac0:	3a01      	subs	r2, #1
 8002ac2:	0652      	lsls	r2, r2, #25
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	4916      	ldr	r1, [pc, #88]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a13      	ldr	r2, [pc, #76]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fa80 	bl	8000fdc <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ade:	e009      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae0:	f7fe fa7c 	bl	8000fdc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	73fb      	strb	r3, [r7, #15]
          break;
 8002af2:	e005      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	4904      	ldr	r1, [pc, #16]	@ (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d018      	beq.n	8002b70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b3e:	4b67      	ldr	r3, [pc, #412]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0203 	and.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d10d      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
       ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b56:	4b61      	ldr	r3, [pc, #388]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
       ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d047      	beq.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e044      	b.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d018      	beq.n	8002baa <RCCEx_PLLSAI2_Config+0x86>
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d825      	bhi.n	8002bc8 <RCCEx_PLLSAI2_Config+0xa4>
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d002      	beq.n	8002b86 <RCCEx_PLLSAI2_Config+0x62>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d009      	beq.n	8002b98 <RCCEx_PLLSAI2_Config+0x74>
 8002b84:	e020      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b86:	4b55      	ldr	r3, [pc, #340]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11d      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b96:	e01a      	b.n	8002bce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b98:	4b50      	ldr	r3, [pc, #320]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba8:	e013      	b.n	8002bd2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002baa:	4b4c      	ldr	r3, [pc, #304]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb6:	4b49      	ldr	r3, [pc, #292]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bc6:	e006      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      break;
 8002bcc:	e004      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bde:	4b3f      	ldr	r3, [pc, #252]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	4939      	ldr	r1, [pc, #228]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d167      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a35      	ldr	r2, [pc, #212]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe f9e6 	bl	8000fdc <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c12:	e009      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c14:	f7fe f9e2 	bl	8000fdc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	73fb      	strb	r3, [r7, #15]
        break;
 8002c26:	e005      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c28:	4b2c      	ldr	r3, [pc, #176]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ef      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d14a      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c40:	4b26      	ldr	r3, [pc, #152]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	0211      	lsls	r1, r2, #8
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	0912      	lsrs	r2, r2, #4
 8002c58:	0452      	lsls	r2, r2, #17
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	491f      	ldr	r1, [pc, #124]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	614b      	str	r3, [r1, #20]
 8002c62:	e011      	b.n	8002c88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c64:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	0211      	lsls	r1, r2, #8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6912      	ldr	r2, [r2, #16]
 8002c7a:	0852      	lsrs	r2, r2, #1
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	0652      	lsls	r2, r2, #25
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4916      	ldr	r1, [pc, #88]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c88:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a13      	ldr	r2, [pc, #76]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe f9a2 	bl	8000fdc <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c9a:	e009      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c9c:	f7fe f99e 	bl	8000fdc <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
          break;
 8002cae:	e005      	b.n	8002cbc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4904      	ldr	r1, [pc, #16]	@ (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e095      	b.n	8002e1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d02:	d009      	beq.n	8002d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
 8002d0a:	e005      	b.n	8002d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fe3c 	bl	80009b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d58:	d902      	bls.n	8002d60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e002      	b.n	8002d66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d6e:	d007      	beq.n	8002d80 <HAL_SPI_Init+0xa0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d78:	d002      	beq.n	8002d80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc2:	ea42 0103 	orr.w	r1, r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	f003 0204 	and.w	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002dfc:	ea42 0103 	orr.w	r1, r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b088      	sub	sp, #32
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e36:	f7fe f8d1 	bl	8000fdc <HAL_GetTick>
 8002e3a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d001      	beq.n	8002e50 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e15c      	b.n	800310a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Transmit+0x36>
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e154      	b.n	800310a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_SPI_Transmit+0x48>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e14d      	b.n	800310a <HAL_SPI_Transmit+0x2e4>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	88fa      	ldrh	r2, [r7, #6]
 8002e8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ee0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d007      	beq.n	8002f00 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f08:	d952      	bls.n	8002fb0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_SPI_Transmit+0xf2>
 8002f12:	8b7b      	ldrh	r3, [r7, #26]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d145      	bne.n	8002fa4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f3c:	e032      	b.n	8002fa4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d112      	bne.n	8002f72 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5c:	1c9a      	adds	r2, r3, #2
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f70:	e018      	b.n	8002fa4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f72:	f7fe f833 	bl	8000fdc <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d803      	bhi.n	8002f8a <HAL_SPI_Transmit+0x164>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Transmit+0x16a>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0b2      	b.n	800310a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1c7      	bne.n	8002f3e <HAL_SPI_Transmit+0x118>
 8002fae:	e083      	b.n	80030b8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Transmit+0x198>
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d177      	bne.n	80030ae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d912      	bls.n	8002fee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	881a      	ldrh	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd8:	1c9a      	adds	r2, r3, #2
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b02      	subs	r3, #2
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fec:	e05f      	b.n	80030ae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003014:	e04b      	b.n	80030ae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d12b      	bne.n	800307c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d912      	bls.n	8003054 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	881a      	ldrh	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303e:	1c9a      	adds	r2, r3, #2
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b02      	subs	r3, #2
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003052:	e02c      	b.n	80030ae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800307a:	e018      	b.n	80030ae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800307c:	f7fd ffae 	bl	8000fdc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d803      	bhi.n	8003094 <HAL_SPI_Transmit+0x26e>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003092:	d102      	bne.n	800309a <HAL_SPI_Transmit+0x274>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e02d      	b.n	800310a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ae      	bne.n	8003016 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	6839      	ldr	r1, [r7, #0]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f947 	bl	8003350 <SPI_EndRxTxTransaction>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003108:	2300      	movs	r3, #0
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003124:	f7fd ff5a 	bl	8000fdc <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	4413      	add	r3, r2
 8003132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003134:	f7fd ff52 	bl	8000fdc <HAL_GetTick>
 8003138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800313a:	4b39      	ldr	r3, [pc, #228]	@ (8003220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	0d1b      	lsrs	r3, r3, #20
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800314a:	e054      	b.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003152:	d050      	beq.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003154:	f7fd ff42 	bl	8000fdc <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	429a      	cmp	r2, r3
 8003162:	d902      	bls.n	800316a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d13d      	bne.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003182:	d111      	bne.n	80031a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800318c:	d004      	beq.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003196:	d107      	bne.n	80031a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b0:	d10f      	bne.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e017      	b.n	8003216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	429a      	cmp	r2, r3
 8003212:	d19b      	bne.n	800314c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000000 	.word	0x20000000

08003224 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	@ 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003236:	f7fd fed1 	bl	8000fdc <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	4413      	add	r3, r2
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003246:	f7fd fec9 	bl	8000fdc <HAL_GetTick>
 800324a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003254:	4b3d      	ldr	r3, [pc, #244]	@ (800334c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00da      	lsls	r2, r3, #3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	0d1b      	lsrs	r3, r3, #20
 8003264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800326c:	e060      	b.n	8003330 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003274:	d107      	bne.n	8003286 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003284:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800328c:	d050      	beq.n	8003330 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800328e:	f7fd fea5 	bl	8000fdc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329a:	429a      	cmp	r2, r3
 800329c:	d902      	bls.n	80032a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d13d      	bne.n	8003320 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032bc:	d111      	bne.n	80032e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032c6:	d004      	beq.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d0:	d107      	bne.n	80032e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032ea:	d10f      	bne.n	800330c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800330a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e010      	b.n	8003342 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	3b01      	subs	r3, #1
 800332e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d196      	bne.n	800326e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3728      	adds	r7, #40	@ 0x28
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000000 	.word	0x20000000

08003350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff ff5b 	bl	8003224 <SPI_WaitFifoStateUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e027      	b.n	80033d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2200      	movs	r2, #0
 800338c:	2180      	movs	r1, #128	@ 0x80
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7ff fec0 	bl	8003114 <SPI_WaitFlagStateUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e014      	b.n	80033d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff ff34 	bl	8003224 <SPI_WaitFifoStateUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e000      	b.n	80033d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e054      	b.n	8003498 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d111      	bne.n	800341e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fc36 	bl	8003c74 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a23      	ldr	r2, [pc, #140]	@ (80034a0 <HAL_TIM_Base_Init+0xc4>)
 8003414:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f000 fb79 	bl	8003b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	080034a5 	.word	0x080034a5

080034a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d001      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e04f      	b.n	8003570 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a23      	ldr	r2, [pc, #140]	@ (800357c <HAL_TIM_Base_Start_IT+0xc4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01d      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fa:	d018      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1f      	ldr	r2, [pc, #124]	@ (8003580 <HAL_TIM_Base_Start_IT+0xc8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1e      	ldr	r2, [pc, #120]	@ (8003584 <HAL_TIM_Base_Start_IT+0xcc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00e      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1c      	ldr	r2, [pc, #112]	@ (8003588 <HAL_TIM_Base_Start_IT+0xd0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <HAL_TIM_Base_Start_IT+0xd4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <HAL_TIM_Base_Start_IT+0xd8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d115      	bne.n	800355a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	4b17      	ldr	r3, [pc, #92]	@ (8003594 <HAL_TIM_Base_Start_IT+0xdc>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d015      	beq.n	800356c <HAL_TIM_Base_Start_IT+0xb4>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003546:	d011      	beq.n	800356c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	e008      	b.n	800356c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e000      	b.n	800356e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40013400 	.word	0x40013400
 8003590:	40014000 	.word	0x40014000
 8003594:	00010007 	.word	0x00010007

08003598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d026      	beq.n	8003608 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d021      	beq.n	8003608 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0202 	mvn.w	r2, #2
 80035cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
 80035ec:	e009      	b.n	8003602 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d026      	beq.n	8003660 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d021      	beq.n	8003660 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0204 	mvn.w	r2, #4
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
 8003644:	e009      	b.n	800365a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d026      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d021      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
 800369c:	e009      	b.n	80036b2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d026      	beq.n	8003710 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d021      	beq.n	8003710 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0210 	mvn.w	r2, #16
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2208      	movs	r2, #8
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
 80036f4:	e009      	b.n	800370a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00e      	beq.n	8003738 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0201 	mvn.w	r2, #1
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00e      	beq.n	800376a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800375e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00e      	beq.n	8003792 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f06f 0220 	mvn.w	r2, #32
 80037d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	460b      	mov	r3, r1
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e12e      	b.n	8003b1a <HAL_TIM_RegisterCallback+0x27a>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f040 80c1 	bne.w	8003a4c <HAL_TIM_RegisterCallback+0x1ac>
  {
    switch (CallbackID)
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	2b1b      	cmp	r3, #27
 80038ce:	f200 80ba 	bhi.w	8003a46 <HAL_TIM_RegisterCallback+0x1a6>
 80038d2:	a201      	add	r2, pc, #4	@ (adr r2, 80038d8 <HAL_TIM_RegisterCallback+0x38>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	08003949 	.word	0x08003949
 80038dc:	08003951 	.word	0x08003951
 80038e0:	08003959 	.word	0x08003959
 80038e4:	08003961 	.word	0x08003961
 80038e8:	08003969 	.word	0x08003969
 80038ec:	08003971 	.word	0x08003971
 80038f0:	08003979 	.word	0x08003979
 80038f4:	08003981 	.word	0x08003981
 80038f8:	08003989 	.word	0x08003989
 80038fc:	08003991 	.word	0x08003991
 8003900:	08003999 	.word	0x08003999
 8003904:	080039a1 	.word	0x080039a1
 8003908:	080039a9 	.word	0x080039a9
 800390c:	080039b1 	.word	0x080039b1
 8003910:	080039bb 	.word	0x080039bb
 8003914:	080039c5 	.word	0x080039c5
 8003918:	080039cf 	.word	0x080039cf
 800391c:	080039d9 	.word	0x080039d9
 8003920:	080039e3 	.word	0x080039e3
 8003924:	080039ed 	.word	0x080039ed
 8003928:	080039f7 	.word	0x080039f7
 800392c:	08003a01 	.word	0x08003a01
 8003930:	08003a0b 	.word	0x08003a0b
 8003934:	08003a15 	.word	0x08003a15
 8003938:	08003a1f 	.word	0x08003a1f
 800393c:	08003a29 	.word	0x08003a29
 8003940:	08003a33 	.word	0x08003a33
 8003944:	08003a3d 	.word	0x08003a3d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800394e:	e0e3      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003956:	e0df      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800395e:	e0db      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003966:	e0d7      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800396e:	e0d3      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003976:	e0cf      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800397e:	e0cb      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003986:	e0c7      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800398e:	e0c3      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003996:	e0bf      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800399e:	e0bb      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80039a6:	e0b7      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80039ae:	e0b3      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80039b8:	e0ae      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80039c2:	e0a9      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80039cc:	e0a4      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80039d6:	e09f      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80039e0:	e09a      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80039ea:	e095      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80039f4:	e090      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80039fe:	e08b      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003a08:	e086      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003a12:	e081      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003a1c:	e07c      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003a26:	e077      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003a30:	e072      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003a3a:	e06d      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003a44:	e068      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
        break;
 8003a4a:	e065      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d15d      	bne.n	8003b14 <HAL_TIM_RegisterCallback+0x274>
  {
    switch (CallbackID)
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	2b0d      	cmp	r3, #13
 8003a5c:	d857      	bhi.n	8003b0e <HAL_TIM_RegisterCallback+0x26e>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <HAL_TIM_RegisterCallback+0x1c4>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a9d 	.word	0x08003a9d
 8003a68:	08003aa5 	.word	0x08003aa5
 8003a6c:	08003aad 	.word	0x08003aad
 8003a70:	08003ab5 	.word	0x08003ab5
 8003a74:	08003abd 	.word	0x08003abd
 8003a78:	08003ac5 	.word	0x08003ac5
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003ad5 	.word	0x08003ad5
 8003a84:	08003add 	.word	0x08003add
 8003a88:	08003ae5 	.word	0x08003ae5
 8003a8c:	08003aed 	.word	0x08003aed
 8003a90:	08003af5 	.word	0x08003af5
 8003a94:	08003afd 	.word	0x08003afd
 8003a98:	08003b05 	.word	0x08003b05
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003aa2:	e039      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003aaa:	e035      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003ab2:	e031      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003aba:	e02d      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003ac2:	e029      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003aca:	e025      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003ad2:	e021      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003ada:	e01d      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003ae2:	e019      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003aea:	e015      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003af2:	e011      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003afa:	e00d      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003b02:	e009      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003b0c:	e004      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
        break;
 8003b12:	e001      	b.n	8003b18 <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop

08003b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a46      	ldr	r2, [pc, #280]	@ (8003c54 <TIM_Base_SetConfig+0x12c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b46:	d00f      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a43      	ldr	r2, [pc, #268]	@ (8003c58 <TIM_Base_SetConfig+0x130>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a42      	ldr	r2, [pc, #264]	@ (8003c5c <TIM_Base_SetConfig+0x134>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a41      	ldr	r2, [pc, #260]	@ (8003c60 <TIM_Base_SetConfig+0x138>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a40      	ldr	r2, [pc, #256]	@ (8003c64 <TIM_Base_SetConfig+0x13c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d108      	bne.n	8003b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a35      	ldr	r2, [pc, #212]	@ (8003c54 <TIM_Base_SetConfig+0x12c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b88:	d01b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a32      	ldr	r2, [pc, #200]	@ (8003c58 <TIM_Base_SetConfig+0x130>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d017      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a31      	ldr	r2, [pc, #196]	@ (8003c5c <TIM_Base_SetConfig+0x134>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a30      	ldr	r2, [pc, #192]	@ (8003c60 <TIM_Base_SetConfig+0x138>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00f      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8003c64 <TIM_Base_SetConfig+0x13c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2e      	ldr	r2, [pc, #184]	@ (8003c68 <TIM_Base_SetConfig+0x140>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c6c <TIM_Base_SetConfig+0x144>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8003c70 <TIM_Base_SetConfig+0x148>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <TIM_Base_SetConfig+0x12c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00f      	beq.n	8003c20 <TIM_Base_SetConfig+0xf8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a18      	ldr	r2, [pc, #96]	@ (8003c64 <TIM_Base_SetConfig+0x13c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00b      	beq.n	8003c20 <TIM_Base_SetConfig+0xf8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a17      	ldr	r2, [pc, #92]	@ (8003c68 <TIM_Base_SetConfig+0x140>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d007      	beq.n	8003c20 <TIM_Base_SetConfig+0xf8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a16      	ldr	r2, [pc, #88]	@ (8003c6c <TIM_Base_SetConfig+0x144>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0xf8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a15      	ldr	r2, [pc, #84]	@ (8003c70 <TIM_Base_SetConfig+0x148>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d103      	bne.n	8003c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f023 0201 	bic.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	611a      	str	r2, [r3, #16]
  }
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00
 8003c64:	40013400 	.word	0x40013400
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800

08003c74 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf8 <TIM_ResetCallback+0x84>)
 8003c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1d      	ldr	r2, [pc, #116]	@ (8003cfc <TIM_ResetCallback+0x88>)
 8003c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <TIM_ResetCallback+0x8c>)
 8003c90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1b      	ldr	r2, [pc, #108]	@ (8003d04 <TIM_ResetCallback+0x90>)
 8003c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d08 <TIM_ResetCallback+0x94>)
 8003ca0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a19      	ldr	r2, [pc, #100]	@ (8003d0c <TIM_ResetCallback+0x98>)
 8003ca8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a18      	ldr	r2, [pc, #96]	@ (8003d10 <TIM_ResetCallback+0x9c>)
 8003cb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <TIM_ResetCallback+0xa0>)
 8003cb8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a16      	ldr	r2, [pc, #88]	@ (8003d18 <TIM_ResetCallback+0xa4>)
 8003cc0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <TIM_ResetCallback+0xa8>)
 8003cc8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a14      	ldr	r2, [pc, #80]	@ (8003d20 <TIM_ResetCallback+0xac>)
 8003cd0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a13      	ldr	r2, [pc, #76]	@ (8003d24 <TIM_ResetCallback+0xb0>)
 8003cd8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a12      	ldr	r2, [pc, #72]	@ (8003d28 <TIM_ResetCallback+0xb4>)
 8003ce0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a11      	ldr	r2, [pc, #68]	@ (8003d2c <TIM_ResetCallback+0xb8>)
 8003ce8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	08000905 	.word	0x08000905
 8003cfc:	080037eb 	.word	0x080037eb
 8003d00:	08003863 	.word	0x08003863
 8003d04:	08003877 	.word	0x08003877
 8003d08:	08003813 	.word	0x08003813
 8003d0c:	08003827 	.word	0x08003827
 8003d10:	080037ff 	.word	0x080037ff
 8003d14:	0800383b 	.word	0x0800383b
 8003d18:	0800384f 	.word	0x0800384f
 8003d1c:	0800388b 	.word	0x0800388b
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d45 	.word	0x08003d45
 8003d28:	08003d59 	.word	0x08003d59
 8003d2c:	08003d6d 	.word	0x08003d6d

08003d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e040      	b.n	8003e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd f858 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	@ 0x24
 8003dac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fedc 	bl	8004b84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fc21 	bl	8004614 <UART_SetConfig>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e01b      	b.n	8003e14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 ff5b 	bl	8004cc8 <UART_CheckIdleState>
 8003e12:	4603      	mov	r3, r0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	@ 0x28
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d177      	bne.n	8003f24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Transmit+0x24>
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e070      	b.n	8003f26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2221      	movs	r2, #33	@ 0x21
 8003e50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e52:	f7fd f8c3 	bl	8000fdc <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e70:	d108      	bne.n	8003e84 <HAL_UART_Transmit+0x68>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e003      	b.n	8003e8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e8c:	e02f      	b.n	8003eee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	@ 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 ffbd 	bl	8004e18 <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e03b      	b.n	8003f26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec0:	b292      	uxth	r2, r2
 8003ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	e007      	b.n	8003edc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1c9      	bne.n	8003e8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2140      	movs	r1, #64	@ 0x40
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 ff87 	bl	8004e18 <UART_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e005      	b.n	8003f26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	@ 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d137      	bne.n	8003fb8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_UART_Receive_IT+0x24>
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e030      	b.n	8003fba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a18      	ldr	r2, [pc, #96]	@ (8003fc4 <HAL_UART_Receive_IT+0x94>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d01f      	beq.n	8003fa8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	613b      	str	r3, [r7, #16]
   return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	69f9      	ldr	r1, [r7, #28]
 8003f9a:	6a3a      	ldr	r2, [r7, #32]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e6      	bne.n	8003f76 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 ffa0 	bl	8004ef4 <UART_Start_Receive_IT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	e000      	b.n	8003fba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3728      	adds	r7, #40	@ 0x28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40008000 	.word	0x40008000

08003fc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0ba      	sub	sp, #232	@ 0xe8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ff2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ffc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d115      	bne.n	8004030 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00f      	beq.n	8004030 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 82ca 	beq.w	80045ba <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
      }
      return;
 800402e:	e2c4      	b.n	80045ba <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8117 	beq.w	8004268 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800403a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004046:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800404a:	4b85      	ldr	r3, [pc, #532]	@ (8004260 <HAL_UART_IRQHandler+0x298>)
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 810a 	beq.w	8004268 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d011      	beq.n	8004084 <HAL_UART_IRQHandler+0xbc>
 8004060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00b      	beq.n	8004084 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2201      	movs	r2, #1
 8004072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d011      	beq.n	80040b4 <HAL_UART_IRQHandler+0xec>
 8004090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2202      	movs	r2, #2
 80040a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d011      	beq.n	80040e4 <HAL_UART_IRQHandler+0x11c>
 80040c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2204      	movs	r2, #4
 80040d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040da:	f043 0202 	orr.w	r2, r3, #2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d017      	beq.n	8004120 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004100:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2208      	movs	r2, #8
 800410e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004116:	f043 0208 	orr.w	r2, r3, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <HAL_UART_IRQHandler+0x18a>
 800412c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004130:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00c      	beq.n	8004152 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004148:	f043 0220 	orr.w	r2, r3, #32
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8230 	beq.w	80045be <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800416a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b40      	cmp	r3, #64	@ 0x40
 800419c:	d005      	beq.n	80041aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800419e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d04f      	beq.n	800424a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 ff68 	bl	8005080 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	d141      	bne.n	8004242 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1d9      	bne.n	80041be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420e:	2b00      	cmp	r3, #0
 8004210:	d013      	beq.n	800423a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004216:	4a13      	ldr	r2, [pc, #76]	@ (8004264 <HAL_UART_IRQHandler+0x29c>)
 8004218:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd f808 	bl	8001234 <HAL_DMA_Abort_IT>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d017      	beq.n	800425a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004234:	4610      	mov	r0, r2
 8004236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	e00f      	b.n	800425a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9d4 	bl	80045e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	e00b      	b.n	800425a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9d0 	bl	80045e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	e007      	b.n	800425a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f9cc 	bl	80045e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004258:	e1b1      	b.n	80045be <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425a:	bf00      	nop
    return;
 800425c:	e1af      	b.n	80045be <HAL_UART_IRQHandler+0x5f6>
 800425e:	bf00      	nop
 8004260:	04000120 	.word	0x04000120
 8004264:	08005149 	.word	0x08005149

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426c:	2b01      	cmp	r3, #1
 800426e:	f040 816a 	bne.w	8004546 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8163 	beq.w	8004546 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 815c 	beq.w	8004546 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2210      	movs	r2, #16
 8004294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	f040 80d4 	bne.w	800444e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80ad 	beq.w	8004416 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042c6:	429a      	cmp	r2, r3
 80042c8:	f080 80a5 	bcs.w	8004416 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f040 8086 	bne.w	80043f4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004316:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800431e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800432a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1da      	bne.n	80042e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3308      	adds	r3, #8
 8004338:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004356:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800435a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800435e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e1      	bne.n	8004332 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800437e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3308      	adds	r3, #8
 800438e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004392:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004394:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004398:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e3      	bne.n	800436e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043c4:	f023 0310 	bic.w	r3, r3, #16
 80043c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e4      	bne.n	80043b4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc fee2 	bl	80011b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004406:	b29b      	uxth	r3, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f8f4 	bl	80045fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004414:	e0d5      	b.n	80045c2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800441c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004420:	429a      	cmp	r2, r3
 8004422:	f040 80ce 	bne.w	80045c2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b20      	cmp	r3, #32
 8004434:	f040 80c5 	bne.w	80045c2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f8d8 	bl	80045fc <HAL_UARTEx_RxEventCallback>
      return;
 800444c:	e0b9      	b.n	80045c2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800445a:	b29b      	uxth	r3, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80ab 	beq.w	80045c6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80a6 	beq.w	80045c6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800448e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
 800449e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e4      	bne.n	800447a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	623b      	str	r3, [r7, #32]
   return(result);
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80044d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e3      	bne.n	80044b0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	60fb      	str	r3, [r7, #12]
   return(result);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f023 0310 	bic.w	r3, r3, #16
 8004510:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	69b9      	ldr	r1, [r7, #24]
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	617b      	str	r3, [r7, #20]
   return(result);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e4      	bne.n	80044fc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800453c:	4619      	mov	r1, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f85c 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004544:	e03f      	b.n	80045c6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <HAL_UART_IRQHandler+0x5a8>
 8004552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004566:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 ffe9 	bl	8005540 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800456e:	e02d      	b.n	80045cc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01c      	beq.n	80045ca <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
    }
    return;
 8004598:	e017      	b.n	80045ca <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d012      	beq.n	80045cc <HAL_UART_IRQHandler+0x604>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fdde 	bl	8005174 <UART_EndTransmit_IT>
    return;
 80045b8:	e008      	b.n	80045cc <HAL_UART_IRQHandler+0x604>
      return;
 80045ba:	bf00      	nop
 80045bc:	e006      	b.n	80045cc <HAL_UART_IRQHandler+0x604>
    return;
 80045be:	bf00      	nop
 80045c0:	e004      	b.n	80045cc <HAL_UART_IRQHandler+0x604>
      return;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <HAL_UART_IRQHandler+0x604>
      return;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <HAL_UART_IRQHandler+0x604>
    return;
 80045ca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80045cc:	37e8      	adds	r7, #232	@ 0xe8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop

080045d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004618:	b08a      	sub	sp, #40	@ 0x28
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	431a      	orrs	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	4313      	orrs	r3, r2
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4ba4      	ldr	r3, [pc, #656]	@ (80048d4 <UART_SetConfig+0x2c0>)
 8004644:	4013      	ands	r3, r2
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800464c:	430b      	orrs	r3, r1
 800464e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a99      	ldr	r2, [pc, #612]	@ (80048d8 <UART_SetConfig+0x2c4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467c:	4313      	orrs	r3, r2
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a90      	ldr	r2, [pc, #576]	@ (80048dc <UART_SetConfig+0x2c8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d126      	bne.n	80046ec <UART_SetConfig+0xd8>
 800469e:	4b90      	ldr	r3, [pc, #576]	@ (80048e0 <UART_SetConfig+0x2cc>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d81b      	bhi.n	80046e4 <UART_SetConfig+0xd0>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <UART_SetConfig+0xa0>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046c5 	.word	0x080046c5
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046cd 	.word	0x080046cd
 80046c0:	080046dd 	.word	0x080046dd
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e116      	b.n	80048fa <UART_SetConfig+0x2e6>
 80046cc:	2302      	movs	r3, #2
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e112      	b.n	80048fa <UART_SetConfig+0x2e6>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e10e      	b.n	80048fa <UART_SetConfig+0x2e6>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e10a      	b.n	80048fa <UART_SetConfig+0x2e6>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e106      	b.n	80048fa <UART_SetConfig+0x2e6>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a7c      	ldr	r2, [pc, #496]	@ (80048e4 <UART_SetConfig+0x2d0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d138      	bne.n	8004768 <UART_SetConfig+0x154>
 80046f6:	4b7a      	ldr	r3, [pc, #488]	@ (80048e0 <UART_SetConfig+0x2cc>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b0c      	cmp	r3, #12
 8004702:	d82d      	bhi.n	8004760 <UART_SetConfig+0x14c>
 8004704:	a201      	add	r2, pc, #4	@ (adr r2, 800470c <UART_SetConfig+0xf8>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004741 	.word	0x08004741
 8004710:	08004761 	.word	0x08004761
 8004714:	08004761 	.word	0x08004761
 8004718:	08004761 	.word	0x08004761
 800471c:	08004751 	.word	0x08004751
 8004720:	08004761 	.word	0x08004761
 8004724:	08004761 	.word	0x08004761
 8004728:	08004761 	.word	0x08004761
 800472c:	08004749 	.word	0x08004749
 8004730:	08004761 	.word	0x08004761
 8004734:	08004761 	.word	0x08004761
 8004738:	08004761 	.word	0x08004761
 800473c:	08004759 	.word	0x08004759
 8004740:	2300      	movs	r3, #0
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004746:	e0d8      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004748:	2302      	movs	r3, #2
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e0d4      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004750:	2304      	movs	r3, #4
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004756:	e0d0      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004758:	2308      	movs	r3, #8
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e0cc      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004760:	2310      	movs	r3, #16
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004766:	e0c8      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a5e      	ldr	r2, [pc, #376]	@ (80048e8 <UART_SetConfig+0x2d4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d125      	bne.n	80047be <UART_SetConfig+0x1aa>
 8004772:	4b5b      	ldr	r3, [pc, #364]	@ (80048e0 <UART_SetConfig+0x2cc>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800477c:	2b30      	cmp	r3, #48	@ 0x30
 800477e:	d016      	beq.n	80047ae <UART_SetConfig+0x19a>
 8004780:	2b30      	cmp	r3, #48	@ 0x30
 8004782:	d818      	bhi.n	80047b6 <UART_SetConfig+0x1a2>
 8004784:	2b20      	cmp	r3, #32
 8004786:	d00a      	beq.n	800479e <UART_SetConfig+0x18a>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d814      	bhi.n	80047b6 <UART_SetConfig+0x1a2>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <UART_SetConfig+0x182>
 8004790:	2b10      	cmp	r3, #16
 8004792:	d008      	beq.n	80047a6 <UART_SetConfig+0x192>
 8004794:	e00f      	b.n	80047b6 <UART_SetConfig+0x1a2>
 8004796:	2300      	movs	r3, #0
 8004798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479c:	e0ad      	b.n	80048fa <UART_SetConfig+0x2e6>
 800479e:	2302      	movs	r3, #2
 80047a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a4:	e0a9      	b.n	80048fa <UART_SetConfig+0x2e6>
 80047a6:	2304      	movs	r3, #4
 80047a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ac:	e0a5      	b.n	80048fa <UART_SetConfig+0x2e6>
 80047ae:	2308      	movs	r3, #8
 80047b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b4:	e0a1      	b.n	80048fa <UART_SetConfig+0x2e6>
 80047b6:	2310      	movs	r3, #16
 80047b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047bc:	e09d      	b.n	80048fa <UART_SetConfig+0x2e6>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a4a      	ldr	r2, [pc, #296]	@ (80048ec <UART_SetConfig+0x2d8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d125      	bne.n	8004814 <UART_SetConfig+0x200>
 80047c8:	4b45      	ldr	r3, [pc, #276]	@ (80048e0 <UART_SetConfig+0x2cc>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80047d4:	d016      	beq.n	8004804 <UART_SetConfig+0x1f0>
 80047d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047d8:	d818      	bhi.n	800480c <UART_SetConfig+0x1f8>
 80047da:	2b80      	cmp	r3, #128	@ 0x80
 80047dc:	d00a      	beq.n	80047f4 <UART_SetConfig+0x1e0>
 80047de:	2b80      	cmp	r3, #128	@ 0x80
 80047e0:	d814      	bhi.n	800480c <UART_SetConfig+0x1f8>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <UART_SetConfig+0x1d8>
 80047e6:	2b40      	cmp	r3, #64	@ 0x40
 80047e8:	d008      	beq.n	80047fc <UART_SetConfig+0x1e8>
 80047ea:	e00f      	b.n	800480c <UART_SetConfig+0x1f8>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f2:	e082      	b.n	80048fa <UART_SetConfig+0x2e6>
 80047f4:	2302      	movs	r3, #2
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fa:	e07e      	b.n	80048fa <UART_SetConfig+0x2e6>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004802:	e07a      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480a:	e076      	b.n	80048fa <UART_SetConfig+0x2e6>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004812:	e072      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a35      	ldr	r2, [pc, #212]	@ (80048f0 <UART_SetConfig+0x2dc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d12a      	bne.n	8004874 <UART_SetConfig+0x260>
 800481e:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <UART_SetConfig+0x2cc>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004828:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800482c:	d01a      	beq.n	8004864 <UART_SetConfig+0x250>
 800482e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004832:	d81b      	bhi.n	800486c <UART_SetConfig+0x258>
 8004834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004838:	d00c      	beq.n	8004854 <UART_SetConfig+0x240>
 800483a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800483e:	d815      	bhi.n	800486c <UART_SetConfig+0x258>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <UART_SetConfig+0x238>
 8004844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004848:	d008      	beq.n	800485c <UART_SetConfig+0x248>
 800484a:	e00f      	b.n	800486c <UART_SetConfig+0x258>
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004852:	e052      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004854:	2302      	movs	r3, #2
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e04e      	b.n	80048fa <UART_SetConfig+0x2e6>
 800485c:	2304      	movs	r3, #4
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004862:	e04a      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004864:	2308      	movs	r3, #8
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486a:	e046      	b.n	80048fa <UART_SetConfig+0x2e6>
 800486c:	2310      	movs	r3, #16
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004872:	e042      	b.n	80048fa <UART_SetConfig+0x2e6>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a17      	ldr	r2, [pc, #92]	@ (80048d8 <UART_SetConfig+0x2c4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d13a      	bne.n	80048f4 <UART_SetConfig+0x2e0>
 800487e:	4b18      	ldr	r3, [pc, #96]	@ (80048e0 <UART_SetConfig+0x2cc>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004884:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004888:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800488c:	d01a      	beq.n	80048c4 <UART_SetConfig+0x2b0>
 800488e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004892:	d81b      	bhi.n	80048cc <UART_SetConfig+0x2b8>
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004898:	d00c      	beq.n	80048b4 <UART_SetConfig+0x2a0>
 800489a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800489e:	d815      	bhi.n	80048cc <UART_SetConfig+0x2b8>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <UART_SetConfig+0x298>
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a8:	d008      	beq.n	80048bc <UART_SetConfig+0x2a8>
 80048aa:	e00f      	b.n	80048cc <UART_SetConfig+0x2b8>
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b2:	e022      	b.n	80048fa <UART_SetConfig+0x2e6>
 80048b4:	2302      	movs	r3, #2
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ba:	e01e      	b.n	80048fa <UART_SetConfig+0x2e6>
 80048bc:	2304      	movs	r3, #4
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c2:	e01a      	b.n	80048fa <UART_SetConfig+0x2e6>
 80048c4:	2308      	movs	r3, #8
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ca:	e016      	b.n	80048fa <UART_SetConfig+0x2e6>
 80048cc:	2310      	movs	r3, #16
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d2:	e012      	b.n	80048fa <UART_SetConfig+0x2e6>
 80048d4:	efff69f3 	.word	0xefff69f3
 80048d8:	40008000 	.word	0x40008000
 80048dc:	40013800 	.word	0x40013800
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40004400 	.word	0x40004400
 80048e8:	40004800 	.word	0x40004800
 80048ec:	40004c00 	.word	0x40004c00
 80048f0:	40005000 	.word	0x40005000
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a9f      	ldr	r2, [pc, #636]	@ (8004b7c <UART_SetConfig+0x568>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d17a      	bne.n	80049fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004904:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004908:	2b08      	cmp	r3, #8
 800490a:	d824      	bhi.n	8004956 <UART_SetConfig+0x342>
 800490c:	a201      	add	r2, pc, #4	@ (adr r2, 8004914 <UART_SetConfig+0x300>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004939 	.word	0x08004939
 8004918:	08004957 	.word	0x08004957
 800491c:	08004941 	.word	0x08004941
 8004920:	08004957 	.word	0x08004957
 8004924:	08004947 	.word	0x08004947
 8004928:	08004957 	.word	0x08004957
 800492c:	08004957 	.word	0x08004957
 8004930:	08004957 	.word	0x08004957
 8004934:	0800494f 	.word	0x0800494f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004938:	f7fd fc58 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 800493c:	61f8      	str	r0, [r7, #28]
        break;
 800493e:	e010      	b.n	8004962 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004940:	4b8f      	ldr	r3, [pc, #572]	@ (8004b80 <UART_SetConfig+0x56c>)
 8004942:	61fb      	str	r3, [r7, #28]
        break;
 8004944:	e00d      	b.n	8004962 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004946:	f7fd fbb9 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800494a:	61f8      	str	r0, [r7, #28]
        break;
 800494c:	e009      	b.n	8004962 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004952:	61fb      	str	r3, [r7, #28]
        break;
 8004954:	e005      	b.n	8004962 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004960:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80fb 	beq.w	8004b60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4413      	add	r3, r2
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	429a      	cmp	r2, r3
 8004978:	d305      	bcc.n	8004986 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	429a      	cmp	r2, r3
 8004984:	d903      	bls.n	800498e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800498c:	e0e8      	b.n	8004b60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2200      	movs	r2, #0
 8004992:	461c      	mov	r4, r3
 8004994:	4615      	mov	r5, r2
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	022b      	lsls	r3, r5, #8
 80049a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049a4:	0222      	lsls	r2, r4, #8
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	6849      	ldr	r1, [r1, #4]
 80049aa:	0849      	lsrs	r1, r1, #1
 80049ac:	2000      	movs	r0, #0
 80049ae:	4688      	mov	r8, r1
 80049b0:	4681      	mov	r9, r0
 80049b2:	eb12 0a08 	adds.w	sl, r2, r8
 80049b6:	eb43 0b09 	adc.w	fp, r3, r9
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c8:	4650      	mov	r0, sl
 80049ca:	4659      	mov	r1, fp
 80049cc:	f7fb fc68 	bl	80002a0 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4613      	mov	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049de:	d308      	bcc.n	80049f2 <UART_SetConfig+0x3de>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049e6:	d204      	bcs.n	80049f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	60da      	str	r2, [r3, #12]
 80049f0:	e0b6      	b.n	8004b60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049f8:	e0b2      	b.n	8004b60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a02:	d15e      	bne.n	8004ac2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d828      	bhi.n	8004a5e <UART_SetConfig+0x44a>
 8004a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <UART_SetConfig+0x400>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	08004a5f 	.word	0x08004a5f
 8004a24:	08004a4f 	.word	0x08004a4f
 8004a28:	08004a5f 	.word	0x08004a5f
 8004a2c:	08004a5f 	.word	0x08004a5f
 8004a30:	08004a5f 	.word	0x08004a5f
 8004a34:	08004a57 	.word	0x08004a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fd fbd8 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8004a3c:	61f8      	str	r0, [r7, #28]
        break;
 8004a3e:	e014      	b.n	8004a6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fd fbea 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8004a44:	61f8      	str	r0, [r7, #28]
        break;
 8004a46:	e010      	b.n	8004a6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a48:	4b4d      	ldr	r3, [pc, #308]	@ (8004b80 <UART_SetConfig+0x56c>)
 8004a4a:	61fb      	str	r3, [r7, #28]
        break;
 8004a4c:	e00d      	b.n	8004a6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4e:	f7fd fb35 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8004a52:	61f8      	str	r0, [r7, #28]
        break;
 8004a54:	e009      	b.n	8004a6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a5a:	61fb      	str	r3, [r7, #28]
        break;
 8004a5c:	e005      	b.n	8004a6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d077      	beq.n	8004b60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	005a      	lsls	r2, r3, #1
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	441a      	add	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b0f      	cmp	r3, #15
 8004a8a:	d916      	bls.n	8004aba <UART_SetConfig+0x4a6>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a92:	d212      	bcs.n	8004aba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f023 030f 	bic.w	r3, r3, #15
 8004a9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	8afb      	ldrh	r3, [r7, #22]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	8afa      	ldrh	r2, [r7, #22]
 8004ab6:	60da      	str	r2, [r3, #12]
 8004ab8:	e052      	b.n	8004b60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ac0:	e04e      	b.n	8004b60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d827      	bhi.n	8004b1a <UART_SetConfig+0x506>
 8004aca:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <UART_SetConfig+0x4bc>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004af5 	.word	0x08004af5
 8004ad4:	08004afd 	.word	0x08004afd
 8004ad8:	08004b05 	.word	0x08004b05
 8004adc:	08004b1b 	.word	0x08004b1b
 8004ae0:	08004b0b 	.word	0x08004b0b
 8004ae4:	08004b1b 	.word	0x08004b1b
 8004ae8:	08004b1b 	.word	0x08004b1b
 8004aec:	08004b1b 	.word	0x08004b1b
 8004af0:	08004b13 	.word	0x08004b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af4:	f7fd fb7a 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8004af8:	61f8      	str	r0, [r7, #28]
        break;
 8004afa:	e014      	b.n	8004b26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004afc:	f7fd fb8c 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8004b00:	61f8      	str	r0, [r7, #28]
        break;
 8004b02:	e010      	b.n	8004b26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b04:	4b1e      	ldr	r3, [pc, #120]	@ (8004b80 <UART_SetConfig+0x56c>)
 8004b06:	61fb      	str	r3, [r7, #28]
        break;
 8004b08:	e00d      	b.n	8004b26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0a:	f7fd fad7 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8004b0e:	61f8      	str	r0, [r7, #28]
        break;
 8004b10:	e009      	b.n	8004b26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b16:	61fb      	str	r3, [r7, #28]
        break;
 8004b18:	e005      	b.n	8004b26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b24:	bf00      	nop
    }

    if (pclk != 0U)
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d019      	beq.n	8004b60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	085a      	lsrs	r2, r3, #1
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	441a      	add	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b0f      	cmp	r3, #15
 8004b44:	d909      	bls.n	8004b5a <UART_SetConfig+0x546>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4c:	d205      	bcs.n	8004b5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60da      	str	r2, [r3, #12]
 8004b58:	e002      	b.n	8004b60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3728      	adds	r7, #40	@ 0x28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40008000 	.word	0x40008000
 8004b80:	00f42400 	.word	0x00f42400

08004b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c82:	d10a      	bne.n	8004c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b098      	sub	sp, #96	@ 0x60
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cd8:	f7fc f980 	bl	8000fdc <HAL_GetTick>
 8004cdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d12e      	bne.n	8004d4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f88c 	bl	8004e18 <UART_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d021      	beq.n	8004d4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e6      	bne.n	8004d06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e062      	b.n	8004e10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d149      	bne.n	8004dec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d60:	2200      	movs	r2, #0
 8004d62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f856 	bl	8004e18 <UART_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d03c      	beq.n	8004dec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc4:	61fa      	str	r2, [r7, #28]
 8004dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	69b9      	ldr	r1, [r7, #24]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e011      	b.n	8004e10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3758      	adds	r7, #88	@ 0x58
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e28:	e04f      	b.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e30:	d04b      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fc f8d3 	bl	8000fdc <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e04e      	b.n	8004eea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d037      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b80      	cmp	r3, #128	@ 0x80
 8004e5e:	d034      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b40      	cmp	r3, #64	@ 0x40
 8004e64:	d031      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d110      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2208      	movs	r2, #8
 8004e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f8ff 	bl	8005080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2208      	movs	r2, #8
 8004e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e029      	b.n	8004eea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea4:	d111      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f8e5 	bl	8005080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e00f      	b.n	8004eea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d0a0      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b097      	sub	sp, #92	@ 0x5c
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	88fa      	ldrh	r2, [r7, #6]
 8004f0c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f26:	d10e      	bne.n	8004f46 <UART_Start_Receive_IT+0x52>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <UART_Start_Receive_IT+0x48>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004f36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f3a:	e02d      	b.n	8004f98 <UART_Start_Receive_IT+0xa4>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	22ff      	movs	r2, #255	@ 0xff
 8004f40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f44:	e028      	b.n	8004f98 <UART_Start_Receive_IT+0xa4>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10d      	bne.n	8004f6a <UART_Start_Receive_IT+0x76>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d104      	bne.n	8004f60 <UART_Start_Receive_IT+0x6c>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	22ff      	movs	r2, #255	@ 0xff
 8004f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f5e:	e01b      	b.n	8004f98 <UART_Start_Receive_IT+0xa4>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	227f      	movs	r2, #127	@ 0x7f
 8004f64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f68:	e016      	b.n	8004f98 <UART_Start_Receive_IT+0xa4>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f72:	d10d      	bne.n	8004f90 <UART_Start_Receive_IT+0x9c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <UART_Start_Receive_IT+0x92>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	227f      	movs	r2, #127	@ 0x7f
 8004f80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f84:	e008      	b.n	8004f98 <UART_Start_Receive_IT+0xa4>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	223f      	movs	r2, #63	@ 0x3f
 8004f8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f8e:	e003      	b.n	8004f98 <UART_Start_Receive_IT+0xa4>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2222      	movs	r2, #34	@ 0x22
 8004fa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fc8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004fca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e5      	bne.n	8004fa8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe4:	d107      	bne.n	8004ff6 <UART_Start_Receive_IT+0x102>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4a21      	ldr	r2, [pc, #132]	@ (8005078 <UART_Start_Receive_IT+0x184>)
 8004ff2:	669a      	str	r2, [r3, #104]	@ 0x68
 8004ff4:	e002      	b.n	8004ffc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a20      	ldr	r2, [pc, #128]	@ (800507c <UART_Start_Receive_IT+0x188>)
 8004ffa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d019      	beq.n	8005038 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
 8005024:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e6      	bne.n	8005004 <UART_Start_Receive_IT+0x110>
 8005036:	e018      	b.n	800506a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	613b      	str	r3, [r7, #16]
   return(result);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f043 0320 	orr.w	r3, r3, #32
 800504c:	653b      	str	r3, [r7, #80]	@ 0x50
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005056:	623b      	str	r3, [r7, #32]
 8005058:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	69f9      	ldr	r1, [r7, #28]
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	61bb      	str	r3, [r7, #24]
   return(result);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e6      	bne.n	8005038 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	375c      	adds	r7, #92	@ 0x5c
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	08005385 	.word	0x08005385
 800507c:	080051c9 	.word	0x080051c9

08005080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b095      	sub	sp, #84	@ 0x54
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800509c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e6      	bne.n	8005088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e5      	bne.n	80050ba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d118      	bne.n	8005128 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	60bb      	str	r3, [r7, #8]
   return(result);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f023 0310 	bic.w	r3, r3, #16
 800510a:	647b      	str	r3, [r7, #68]	@ 0x44
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6979      	ldr	r1, [r7, #20]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	613b      	str	r3, [r7, #16]
   return(result);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800513c:	bf00      	nop
 800513e:	3754      	adds	r7, #84	@ 0x54
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff fa3e 	bl	80045e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	60bb      	str	r3, [r7, #8]
   return(result);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6979      	ldr	r1, [r7, #20]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	613b      	str	r3, [r7, #16]
   return(result);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e6      	bne.n	800517c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fa0a 	bl	80045d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c0:	bf00      	nop
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b09c      	sub	sp, #112	@ 0x70
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e0:	2b22      	cmp	r3, #34	@ 0x22
 80051e2:	f040 80be 	bne.w	8005362 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80051ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80051f4:	b2d9      	uxtb	r1, r3
 80051f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005200:	400a      	ands	r2, r1
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	f040 80a3 	bne.w	8005376 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800523e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800524e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005250:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005254:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800525c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e6      	bne.n	8005230 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005274:	f023 0301 	bic.w	r3, r3, #1
 8005278:	667b      	str	r3, [r7, #100]	@ 0x64
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3308      	adds	r3, #8
 8005280:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005282:	647a      	str	r2, [r7, #68]	@ 0x44
 8005284:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e5      	bne.n	8005262 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a34      	ldr	r2, [pc, #208]	@ (8005380 <UART_RxISR_8BIT+0x1b8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d01f      	beq.n	80052f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d018      	beq.n	80052f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	623b      	str	r3, [r7, #32]
   return(result);
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e6      	bne.n	80052c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d12e      	bne.n	800535a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0310 	bic.w	r3, r3, #16
 8005316:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	617b      	str	r3, [r7, #20]
   return(result);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b10      	cmp	r3, #16
 8005340:	d103      	bne.n	800534a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff f952 	bl	80045fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005358:	e00d      	b.n	8005376 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f002 f8f4 	bl	8007548 <HAL_UART_RxCpltCallback>
}
 8005360:	e009      	b.n	8005376 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	8b1b      	ldrh	r3, [r3, #24]
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0208 	orr.w	r2, r2, #8
 8005372:	b292      	uxth	r2, r2
 8005374:	831a      	strh	r2, [r3, #24]
}
 8005376:	bf00      	nop
 8005378:	3770      	adds	r7, #112	@ 0x70
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40008000 	.word	0x40008000

08005384 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b09c      	sub	sp, #112	@ 0x70
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005392:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800539c:	2b22      	cmp	r3, #34	@ 0x22
 800539e:	f040 80be 	bne.w	800551e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80053a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80053b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80053b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053ba:	4013      	ands	r3, r2
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c6:	1c9a      	adds	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f040 80a3 	bne.w	8005532 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80053fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005400:	667b      	str	r3, [r7, #100]	@ 0x64
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800540a:	657b      	str	r3, [r7, #84]	@ 0x54
 800540c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005410:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e6      	bne.n	80053ec <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	663b      	str	r3, [r7, #96]	@ 0x60
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800543e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005444:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800544c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a34      	ldr	r2, [pc, #208]	@ (800553c <UART_RxISR_16BIT+0x1b8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d01f      	beq.n	80054b0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d018      	beq.n	80054b0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	61fb      	str	r3, [r7, #28]
   return(result);
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800549c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800549e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e6      	bne.n	800547e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d12e      	bne.n	8005516 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f023 0310 	bic.w	r3, r3, #16
 80054d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6979      	ldr	r1, [r7, #20]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e6      	bne.n	80054be <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d103      	bne.n	8005506 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2210      	movs	r2, #16
 8005504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff f874 	bl	80045fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005514:	e00d      	b.n	8005532 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f002 f816 	bl	8007548 <HAL_UART_RxCpltCallback>
}
 800551c:	e009      	b.n	8005532 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	8b1b      	ldrh	r3, [r3, #24]
 8005524:	b29a      	uxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0208 	orr.w	r2, r2, #8
 800552e:	b292      	uxth	r2, r2
 8005530:	831a      	strh	r2, [r3, #24]
}
 8005532:	bf00      	nop
 8005534:	3770      	adds	r7, #112	@ 0x70
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40008000 	.word	0x40008000

08005540 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005566:	2b84      	cmp	r3, #132	@ 0x84
 8005568:	d005      	beq.n	8005576 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800556a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	3303      	adds	r3, #3
 8005574:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005576:	68fb      	ldr	r3, [r7, #12]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005588:	f000 fde2 	bl	8006150 <vTaskStartScheduler>
  
  return osOK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	bd80      	pop	{r7, pc}

08005592 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005594:	b089      	sub	sp, #36	@ 0x24
 8005596:	af04      	add	r7, sp, #16
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d020      	beq.n	80055e6 <osThreadCreate+0x54>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01c      	beq.n	80055e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685c      	ldr	r4, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691e      	ldr	r6, [r3, #16]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff ffc8 	bl	8005554 <makeFreeRtosPriority>
 80055c4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ce:	9202      	str	r2, [sp, #8]
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	9100      	str	r1, [sp, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	4632      	mov	r2, r6
 80055d8:	4629      	mov	r1, r5
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 fbd2 	bl	8005d84 <xTaskCreateStatic>
 80055e0:	4603      	mov	r3, r0
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e01c      	b.n	8005620 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685c      	ldr	r4, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055f2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff ffaa 	bl	8005554 <makeFreeRtosPriority>
 8005600:	4602      	mov	r2, r0
 8005602:	f107 030c 	add.w	r3, r7, #12
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	9200      	str	r2, [sp, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	4632      	mov	r2, r6
 800560e:	4629      	mov	r1, r5
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fc17 	bl	8005e44 <xTaskCreate>
 8005616:	4603      	mov	r3, r0
 8005618:	2b01      	cmp	r3, #1
 800561a:	d001      	beq.n	8005620 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	e000      	b.n	8005622 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800562a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <osDelay+0x16>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e000      	b.n	8005642 <osDelay+0x18>
 8005640:	2301      	movs	r3, #1
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fd4e 	bl	80060e4 <vTaskDelay>
  
  return osOK;
 8005648:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f103 0208 	add.w	r2, r3, #8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800566a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f103 0208 	add.w	r2, r3, #8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f103 0208 	add.w	r2, r3, #8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800570a:	d103      	bne.n	8005714 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	e00c      	b.n	800572e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3308      	adds	r3, #8
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e002      	b.n	8005722 <vListInsert+0x2e>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	429a      	cmp	r2, r3
 800572c:	d2f6      	bcs.n	800571c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6892      	ldr	r2, [r2, #8]
 800577c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6852      	ldr	r2, [r2, #4]
 8005786:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d103      	bne.n	800579a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057e8:	f001 fb9e 	bl	8006f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057f8:	fb01 f303 	mul.w	r3, r1, r3
 80057fc:	441a      	add	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005818:	3b01      	subs	r3, #1
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	22ff      	movs	r2, #255	@ 0xff
 800582c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	22ff      	movs	r2, #255	@ 0xff
 8005834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d114      	bne.n	8005868 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01a      	beq.n	800587c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3310      	adds	r3, #16
 800584a:	4618      	mov	r0, r3
 800584c:	f000 feda 	bl	8006604 <xTaskRemoveFromEventList>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d012      	beq.n	800587c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <xQueueGenericReset+0xd0>)
 8005858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	e009      	b.n	800587c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3310      	adds	r3, #16
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fef0 	bl	8005652 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3324      	adds	r3, #36	@ 0x24
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff feeb 	bl	8005652 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800587c:	f001 fb86 	bl	8006f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005880:	2301      	movs	r3, #1
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	e000ed04 	.word	0xe000ed04

08005890 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	@ 0x28
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <xQueueGenericCreate+0x2c>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	613b      	str	r3, [r7, #16]
}
 80058b6:	bf00      	nop
 80058b8:	bf00      	nop
 80058ba:	e7fd      	b.n	80058b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
 80058c4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3348      	adds	r3, #72	@ 0x48
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 fc4e 	bl	800716c <pvPortMalloc>
 80058d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d011      	beq.n	80058fc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3348      	adds	r3, #72	@ 0x48
 80058e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058ea:	79fa      	ldrb	r2, [r7, #7]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f805 	bl	8005906 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058fc:	69bb      	ldr	r3, [r7, #24]
	}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	e002      	b.n	8005928 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005934:	2101      	movs	r1, #1
 8005936:	69b8      	ldr	r0, [r7, #24]
 8005938:	f7ff ff40 	bl	80057bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08e      	sub	sp, #56	@ 0x38
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00b      	beq.n	8005990 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	61fb      	str	r3, [r7, #28]
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	e7fd      	b.n	800598c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d103      	bne.n	80059a0 <xQueueGiveFromISR+0x5c>
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <xQueueGiveFromISR+0x60>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <xQueueGiveFromISR+0x62>
 80059a4:	2300      	movs	r3, #0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	61bb      	str	r3, [r7, #24]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059c2:	f001 fb91 	bl	80070e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059c6:	f3ef 8211 	mrs	r2, BASEPRI
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	617a      	str	r2, [r7, #20]
 80059dc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d22b      	bcs.n	8005a4a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a0c:	d112      	bne.n	8005a34 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d016      	beq.n	8005a44 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	3324      	adds	r3, #36	@ 0x24
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fdf2 	bl	8006604 <xTaskRemoveFromEventList>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e007      	b.n	8005a44 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a38:	3301      	adds	r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	b25a      	sxtb	r2, r3
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005a44:	2301      	movs	r3, #1
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a48:	e001      	b.n	8005a4e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3738      	adds	r7, #56	@ 0x38
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	@ 0x38
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	623b      	str	r3, [r7, #32]
}
 8005a92:	bf00      	nop
 8005a94:	bf00      	nop
 8005a96:	e7fd      	b.n	8005a94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	61fb      	str	r3, [r7, #28]
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ab8:	f000 ff6a 	bl	8006990 <xTaskGetSchedulerState>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <xQueueSemaphoreTake+0x64>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <xQueueSemaphoreTake+0x68>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <xQueueSemaphoreTake+0x6a>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	61bb      	str	r3, [r7, #24]
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	e7fd      	b.n	8005ae6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aea:	f001 fa1d 	bl	8006f28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d024      	beq.n	8005b44 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b00:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b0a:	f001 f865 	bl	8006bd8 <pvTaskIncrementMutexHeldCount>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00f      	beq.n	8005b3c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	3310      	adds	r3, #16
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fd6f 	bl	8006604 <xTaskRemoveFromEventList>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b2c:	4b54      	ldr	r3, [pc, #336]	@ (8005c80 <xQueueSemaphoreTake+0x21c>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b3c:	f001 fa26 	bl	8006f8c <vPortExitCritical>
				return pdPASS;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e098      	b.n	8005c76 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d112      	bne.n	8005b70 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00b      	beq.n	8005b68 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	617b      	str	r3, [r7, #20]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b68:	f001 fa10 	bl	8006f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e082      	b.n	8005c76 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b76:	f107 030c 	add.w	r3, r7, #12
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fda6 	bl	80066cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b84:	f001 fa02 	bl	8006f8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b88:	f000 fb4c 	bl	8006224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b8c:	f001 f9cc 	bl	8006f28 <vPortEnterCritical>
 8005b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b96:	b25b      	sxtb	r3, r3
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b9c:	d103      	bne.n	8005ba6 <xQueueSemaphoreTake+0x142>
 8005b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bb2:	d103      	bne.n	8005bbc <xQueueSemaphoreTake+0x158>
 8005bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bbc:	f001 f9e6 	bl	8006f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bc0:	463a      	mov	r2, r7
 8005bc2:	f107 030c 	add.w	r3, r7, #12
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fd95 	bl	80066f8 <xTaskCheckForTimeOut>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d132      	bne.n	8005c3a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bd6:	f000 f8bf 	bl	8005d58 <prvIsQueueEmpty>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d026      	beq.n	8005c2e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005be8:	f001 f99e 	bl	8006f28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 feeb 	bl	80069cc <xTaskPriorityInherit>
 8005bf6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005bf8:	f001 f9c8 	bl	8006f8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfe:	3324      	adds	r3, #36	@ 0x24
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	4611      	mov	r1, r2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fcd7 	bl	80065b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c0c:	f000 f852 	bl	8005cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c10:	f000 fb16 	bl	8006240 <xTaskResumeAll>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f47f af67 	bne.w	8005aea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005c1c:	4b18      	ldr	r3, [pc, #96]	@ (8005c80 <xQueueSemaphoreTake+0x21c>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	e75d      	b.n	8005aea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c30:	f000 f840 	bl	8005cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c34:	f000 fb04 	bl	8006240 <xTaskResumeAll>
 8005c38:	e757      	b.n	8005aea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c3c:	f000 f83a 	bl	8005cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c40:	f000 fafe 	bl	8006240 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c46:	f000 f887 	bl	8005d58 <prvIsQueueEmpty>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f43f af4c 	beq.w	8005aea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c58:	f001 f966 	bl	8006f28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c5e:	f000 f811 	bl	8005c84 <prvGetDisinheritPriorityAfterTimeout>
 8005c62:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 ff24 	bl	8006ab8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c70:	f001 f98c 	bl	8006f8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3738      	adds	r7, #56	@ 0x38
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	e000ed04 	.word	0xe000ed04

08005c84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1c3 0307 	rsb	r3, r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e001      	b.n	8005ca6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cbc:	f001 f934 	bl	8006f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cc8:	e011      	b.n	8005cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d012      	beq.n	8005cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3324      	adds	r3, #36	@ 0x24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fc94 	bl	8006604 <xTaskRemoveFromEventList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ce2:	f000 fd6d 	bl	80067c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	dce9      	bgt.n	8005cca <prvUnlockQueue+0x16>
 8005cf6:	e000      	b.n	8005cfa <prvUnlockQueue+0x46>
					break;
 8005cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	22ff      	movs	r2, #255	@ 0xff
 8005cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d02:	f001 f943 	bl	8006f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d06:	f001 f90f 	bl	8006f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d12:	e011      	b.n	8005d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d012      	beq.n	8005d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3310      	adds	r3, #16
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fc6f 	bl	8006604 <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d2c:	f000 fd48 	bl	80067c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dce9      	bgt.n	8005d14 <prvUnlockQueue+0x60>
 8005d40:	e000      	b.n	8005d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	22ff      	movs	r2, #255	@ 0xff
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d4c:	f001 f91e 	bl	8006f8c <vPortExitCritical>
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d60:	f001 f8e2 	bl	8006f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e001      	b.n	8005d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d76:	f001 f909 	bl	8006f8c <vPortExitCritical>

	return xReturn;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	@ 0x38
 8005d88:	af04      	add	r7, sp, #16
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	623b      	str	r3, [r7, #32]
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <xTaskCreateStatic+0x4a>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	61fb      	str	r3, [r7, #28]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dce:	23a0      	movs	r3, #160	@ 0xa0
 8005dd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2ba0      	cmp	r3, #160	@ 0xa0
 8005dd6:	d00b      	beq.n	8005df0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	61bb      	str	r3, [r7, #24]
}
 8005dea:	bf00      	nop
 8005dec:	bf00      	nop
 8005dee:	e7fd      	b.n	8005dec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005df0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01e      	beq.n	8005e36 <xTaskCreateStatic+0xb2>
 8005df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01b      	beq.n	8005e36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e10:	2300      	movs	r3, #0
 8005e12:	9303      	str	r3, [sp, #12]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	9302      	str	r3, [sp, #8]
 8005e18:	f107 0314 	add.w	r3, r7, #20
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f851 	bl	8005ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e30:	f000 f8ee 	bl	8006010 <prvAddNewTaskToReadyList>
 8005e34:	e001      	b.n	8005e3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e3a:	697b      	ldr	r3, [r7, #20]
	}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3728      	adds	r7, #40	@ 0x28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	@ 0x30
 8005e48:	af04      	add	r7, sp, #16
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 f987 	bl	800716c <pvPortMalloc>
 8005e5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00e      	beq.n	8005e84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e66:	20a0      	movs	r0, #160	@ 0xa0
 8005e68:	f001 f980 	bl	800716c <pvPortMalloc>
 8005e6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e7a:	e005      	b.n	8005e88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e7c:	6978      	ldr	r0, [r7, #20]
 8005e7e:	f001 fa43 	bl	8007308 <vPortFree>
 8005e82:	e001      	b.n	8005e88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d017      	beq.n	8005ebe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9303      	str	r3, [sp, #12]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	9302      	str	r3, [sp, #8]
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f80f 	bl	8005ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb2:	69f8      	ldr	r0, [r7, #28]
 8005eb4:	f000 f8ac 	bl	8006010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	e002      	b.n	8005ec4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ec2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
	}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f023 0307 	bic.w	r3, r3, #7
 8005ef6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	617b      	str	r3, [r7, #20]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01f      	beq.n	8005f60 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f20:	2300      	movs	r3, #0
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	e012      	b.n	8005f4c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	7819      	ldrb	r1, [r3, #0]
 8005f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	4413      	add	r3, r2
 8005f34:	3334      	adds	r3, #52	@ 0x34
 8005f36:	460a      	mov	r2, r1
 8005f38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d006      	beq.n	8005f54 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b0f      	cmp	r3, #15
 8005f50:	d9e9      	bls.n	8005f26 <prvInitialiseNewTask+0x56>
 8005f52:	e000      	b.n	8005f56 <prvInitialiseNewTask+0x86>
			{
				break;
 8005f54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f5e:	e003      	b.n	8005f68 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	d901      	bls.n	8005f72 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f6e:	2306      	movs	r3, #6
 8005f70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f7c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	2200      	movs	r2, #0
 8005f82:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	3304      	adds	r3, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fb82 	bl	8005692 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	3318      	adds	r3, #24
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fb7d 	bl	8005692 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa0:	f1c3 0207 	rsb	r2, r3, #7
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	334c      	adds	r3, #76	@ 0x4c
 8005fc2:	224c      	movs	r2, #76	@ 0x4c
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 fe24 	bl	8007c14 <memset>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	4a0d      	ldr	r2, [pc, #52]	@ (8006004 <prvInitialiseNewTask+0x134>)
 8005fd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006008 <prvInitialiseNewTask+0x138>)
 8005fd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	4a0c      	ldr	r2, [pc, #48]	@ (800600c <prvInitialiseNewTask+0x13c>)
 8005fdc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	68f9      	ldr	r1, [r7, #12]
 8005fe2:	69b8      	ldr	r0, [r7, #24]
 8005fe4:	f000 fe72 	bl	8006ccc <pxPortInitialiseStack>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	200055e0 	.word	0x200055e0
 8006008:	20005648 	.word	0x20005648
 800600c:	200056b0 	.word	0x200056b0

08006010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006018:	f000 ff86 	bl	8006f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800601c:	4b2a      	ldr	r3, [pc, #168]	@ (80060c8 <prvAddNewTaskToReadyList+0xb8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	4a29      	ldr	r2, [pc, #164]	@ (80060c8 <prvAddNewTaskToReadyList+0xb8>)
 8006024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006026:	4b29      	ldr	r3, [pc, #164]	@ (80060cc <prvAddNewTaskToReadyList+0xbc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800602e:	4a27      	ldr	r2, [pc, #156]	@ (80060cc <prvAddNewTaskToReadyList+0xbc>)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006034:	4b24      	ldr	r3, [pc, #144]	@ (80060c8 <prvAddNewTaskToReadyList+0xb8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d110      	bne.n	800605e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800603c:	f000 fbe4 	bl	8006808 <prvInitialiseTaskLists>
 8006040:	e00d      	b.n	800605e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006042:	4b23      	ldr	r3, [pc, #140]	@ (80060d0 <prvAddNewTaskToReadyList+0xc0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800604a:	4b20      	ldr	r3, [pc, #128]	@ (80060cc <prvAddNewTaskToReadyList+0xbc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	429a      	cmp	r2, r3
 8006056:	d802      	bhi.n	800605e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006058:	4a1c      	ldr	r2, [pc, #112]	@ (80060cc <prvAddNewTaskToReadyList+0xbc>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800605e:	4b1d      	ldr	r3, [pc, #116]	@ (80060d4 <prvAddNewTaskToReadyList+0xc4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <prvAddNewTaskToReadyList+0xc4>)
 8006066:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	2201      	movs	r2, #1
 800606e:	409a      	lsls	r2, r3
 8006070:	4b19      	ldr	r3, [pc, #100]	@ (80060d8 <prvAddNewTaskToReadyList+0xc8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4313      	orrs	r3, r2
 8006076:	4a18      	ldr	r2, [pc, #96]	@ (80060d8 <prvAddNewTaskToReadyList+0xc8>)
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4a15      	ldr	r2, [pc, #84]	@ (80060dc <prvAddNewTaskToReadyList+0xcc>)
 8006088:	441a      	add	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3304      	adds	r3, #4
 800608e:	4619      	mov	r1, r3
 8006090:	4610      	mov	r0, r2
 8006092:	f7ff fb0b 	bl	80056ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006096:	f000 ff79 	bl	8006f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800609a:	4b0d      	ldr	r3, [pc, #52]	@ (80060d0 <prvAddNewTaskToReadyList+0xc0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00e      	beq.n	80060c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060a2:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <prvAddNewTaskToReadyList+0xbc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d207      	bcs.n	80060c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <prvAddNewTaskToReadyList+0xd0>)
 80060b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200006b0 	.word	0x200006b0
 80060cc:	200005b0 	.word	0x200005b0
 80060d0:	200006bc 	.word	0x200006bc
 80060d4:	200006cc 	.word	0x200006cc
 80060d8:	200006b8 	.word	0x200006b8
 80060dc:	200005b4 	.word	0x200005b4
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d018      	beq.n	8006128 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060f6:	4b14      	ldr	r3, [pc, #80]	@ (8006148 <vTaskDelay+0x64>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <vTaskDelay+0x32>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	60bb      	str	r3, [r7, #8]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006116:	f000 f885 	bl	8006224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800611a:	2100      	movs	r1, #0
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fd6f 	bl	8006c00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006122:	f000 f88d 	bl	8006240 <xTaskResumeAll>
 8006126:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d107      	bne.n	800613e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800612e:	4b07      	ldr	r3, [pc, #28]	@ (800614c <vTaskDelay+0x68>)
 8006130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200006d8 	.word	0x200006d8
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	@ 0x28
 8006154:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800615e:	463a      	mov	r2, r7
 8006160:	1d39      	adds	r1, r7, #4
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	4618      	mov	r0, r3
 8006168:	f7fa fa8e 	bl	8000688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	9202      	str	r2, [sp, #8]
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	2300      	movs	r3, #0
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	2300      	movs	r3, #0
 800617c:	460a      	mov	r2, r1
 800617e:	4921      	ldr	r1, [pc, #132]	@ (8006204 <vTaskStartScheduler+0xb4>)
 8006180:	4821      	ldr	r0, [pc, #132]	@ (8006208 <vTaskStartScheduler+0xb8>)
 8006182:	f7ff fdff 	bl	8005d84 <xTaskCreateStatic>
 8006186:	4603      	mov	r3, r0
 8006188:	4a20      	ldr	r2, [pc, #128]	@ (800620c <vTaskStartScheduler+0xbc>)
 800618a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800618c:	4b1f      	ldr	r3, [pc, #124]	@ (800620c <vTaskStartScheduler+0xbc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006194:	2301      	movs	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e001      	b.n	800619e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d11b      	bne.n	80061dc <vTaskStartScheduler+0x8c>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	613b      	str	r3, [r7, #16]
}
 80061b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061b8:	4b15      	ldr	r3, [pc, #84]	@ (8006210 <vTaskStartScheduler+0xc0>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	334c      	adds	r3, #76	@ 0x4c
 80061be:	4a15      	ldr	r2, [pc, #84]	@ (8006214 <vTaskStartScheduler+0xc4>)
 80061c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061c2:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <vTaskStartScheduler+0xc8>)
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061ca:	4b14      	ldr	r3, [pc, #80]	@ (800621c <vTaskStartScheduler+0xcc>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061d0:	4b13      	ldr	r3, [pc, #76]	@ (8006220 <vTaskStartScheduler+0xd0>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061d6:	f000 fe03 	bl	8006de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061da:	e00f      	b.n	80061fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061e2:	d10b      	bne.n	80061fc <vTaskStartScheduler+0xac>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	60fb      	str	r3, [r7, #12]
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	e7fd      	b.n	80061f8 <vTaskStartScheduler+0xa8>
}
 80061fc:	bf00      	nop
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	08008b30 	.word	0x08008b30
 8006208:	080067d9 	.word	0x080067d9
 800620c:	200006d4 	.word	0x200006d4
 8006210:	200005b0 	.word	0x200005b0
 8006214:	200000ec 	.word	0x200000ec
 8006218:	200006d0 	.word	0x200006d0
 800621c:	200006bc 	.word	0x200006bc
 8006220:	200006b4 	.word	0x200006b4

08006224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006228:	4b04      	ldr	r3, [pc, #16]	@ (800623c <vTaskSuspendAll+0x18>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	4a03      	ldr	r2, [pc, #12]	@ (800623c <vTaskSuspendAll+0x18>)
 8006230:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	200006d8 	.word	0x200006d8

08006240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800624e:	4b42      	ldr	r3, [pc, #264]	@ (8006358 <xTaskResumeAll+0x118>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <xTaskResumeAll+0x2e>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	603b      	str	r3, [r7, #0]
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	e7fd      	b.n	800626a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800626e:	f000 fe5b 	bl	8006f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006272:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <xTaskResumeAll+0x118>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3b01      	subs	r3, #1
 8006278:	4a37      	ldr	r2, [pc, #220]	@ (8006358 <xTaskResumeAll+0x118>)
 800627a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800627c:	4b36      	ldr	r3, [pc, #216]	@ (8006358 <xTaskResumeAll+0x118>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d161      	bne.n	8006348 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006284:	4b35      	ldr	r3, [pc, #212]	@ (800635c <xTaskResumeAll+0x11c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d05d      	beq.n	8006348 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800628c:	e02e      	b.n	80062ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628e:	4b34      	ldr	r3, [pc, #208]	@ (8006360 <xTaskResumeAll+0x120>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3318      	adds	r3, #24
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fa63 	bl	8005766 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fa5e 	bl	8005766 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	2201      	movs	r2, #1
 80062b0:	409a      	lsls	r2, r3
 80062b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006364 <xTaskResumeAll+0x124>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006364 <xTaskResumeAll+0x124>)
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4a27      	ldr	r2, [pc, #156]	@ (8006368 <xTaskResumeAll+0x128>)
 80062ca:	441a      	add	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f7ff f9ea 	bl	80056ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062dc:	4b23      	ldr	r3, [pc, #140]	@ (800636c <xTaskResumeAll+0x12c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d302      	bcc.n	80062ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062e6:	4b22      	ldr	r3, [pc, #136]	@ (8006370 <xTaskResumeAll+0x130>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006360 <xTaskResumeAll+0x120>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1cc      	bne.n	800628e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062fa:	f000 fb29 	bl	8006950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006374 <xTaskResumeAll+0x134>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d010      	beq.n	800632c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800630a:	f000 f837 	bl	800637c <xTaskIncrementTick>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006314:	4b16      	ldr	r3, [pc, #88]	@ (8006370 <xTaskResumeAll+0x130>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3b01      	subs	r3, #1
 800631e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f1      	bne.n	800630a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006326:	4b13      	ldr	r3, [pc, #76]	@ (8006374 <xTaskResumeAll+0x134>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800632c:	4b10      	ldr	r3, [pc, #64]	@ (8006370 <xTaskResumeAll+0x130>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006338:	4b0f      	ldr	r3, [pc, #60]	@ (8006378 <xTaskResumeAll+0x138>)
 800633a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006348:	f000 fe20 	bl	8006f8c <vPortExitCritical>

	return xAlreadyYielded;
 800634c:	68bb      	ldr	r3, [r7, #8]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200006d8 	.word	0x200006d8
 800635c:	200006b0 	.word	0x200006b0
 8006360:	20000670 	.word	0x20000670
 8006364:	200006b8 	.word	0x200006b8
 8006368:	200005b4 	.word	0x200005b4
 800636c:	200005b0 	.word	0x200005b0
 8006370:	200006c4 	.word	0x200006c4
 8006374:	200006c0 	.word	0x200006c0
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006386:	4b4f      	ldr	r3, [pc, #316]	@ (80064c4 <xTaskIncrementTick+0x148>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f040 808f 	bne.w	80064ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006390:	4b4d      	ldr	r3, [pc, #308]	@ (80064c8 <xTaskIncrementTick+0x14c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006398:	4a4b      	ldr	r2, [pc, #300]	@ (80064c8 <xTaskIncrementTick+0x14c>)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d121      	bne.n	80063e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80063a4:	4b49      	ldr	r3, [pc, #292]	@ (80064cc <xTaskIncrementTick+0x150>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	603b      	str	r3, [r7, #0]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <xTaskIncrementTick+0x46>
 80063c6:	4b41      	ldr	r3, [pc, #260]	@ (80064cc <xTaskIncrementTick+0x150>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	4b40      	ldr	r3, [pc, #256]	@ (80064d0 <xTaskIncrementTick+0x154>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a3e      	ldr	r2, [pc, #248]	@ (80064cc <xTaskIncrementTick+0x150>)
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	4a3e      	ldr	r2, [pc, #248]	@ (80064d0 <xTaskIncrementTick+0x154>)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b3e      	ldr	r3, [pc, #248]	@ (80064d4 <xTaskIncrementTick+0x158>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	4a3c      	ldr	r2, [pc, #240]	@ (80064d4 <xTaskIncrementTick+0x158>)
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	f000 fab4 	bl	8006950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063e8:	4b3b      	ldr	r3, [pc, #236]	@ (80064d8 <xTaskIncrementTick+0x15c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d348      	bcc.n	8006484 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f2:	4b36      	ldr	r3, [pc, #216]	@ (80064cc <xTaskIncrementTick+0x150>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063fc:	4b36      	ldr	r3, [pc, #216]	@ (80064d8 <xTaskIncrementTick+0x15c>)
 80063fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006402:	601a      	str	r2, [r3, #0]
					break;
 8006404:	e03e      	b.n	8006484 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006406:	4b31      	ldr	r3, [pc, #196]	@ (80064cc <xTaskIncrementTick+0x150>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d203      	bcs.n	8006426 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800641e:	4a2e      	ldr	r2, [pc, #184]	@ (80064d8 <xTaskIncrementTick+0x15c>)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006424:	e02e      	b.n	8006484 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	3304      	adds	r3, #4
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff f99b 	bl	8005766 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	3318      	adds	r3, #24
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff f992 	bl	8005766 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006446:	2201      	movs	r2, #1
 8006448:	409a      	lsls	r2, r3
 800644a:	4b24      	ldr	r3, [pc, #144]	@ (80064dc <xTaskIncrementTick+0x160>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4313      	orrs	r3, r2
 8006450:	4a22      	ldr	r2, [pc, #136]	@ (80064dc <xTaskIncrementTick+0x160>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4a1f      	ldr	r2, [pc, #124]	@ (80064e0 <xTaskIncrementTick+0x164>)
 8006462:	441a      	add	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f7ff f91e 	bl	80056ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006474:	4b1b      	ldr	r3, [pc, #108]	@ (80064e4 <xTaskIncrementTick+0x168>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647a:	429a      	cmp	r2, r3
 800647c:	d3b9      	bcc.n	80063f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800647e:	2301      	movs	r3, #1
 8006480:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006482:	e7b6      	b.n	80063f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006484:	4b17      	ldr	r3, [pc, #92]	@ (80064e4 <xTaskIncrementTick+0x168>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648a:	4915      	ldr	r1, [pc, #84]	@ (80064e0 <xTaskIncrementTick+0x164>)
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d901      	bls.n	80064a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064a0:	4b11      	ldr	r3, [pc, #68]	@ (80064e8 <xTaskIncrementTick+0x16c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	e004      	b.n	80064b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064ae:	4b0f      	ldr	r3, [pc, #60]	@ (80064ec <xTaskIncrementTick+0x170>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a0d      	ldr	r2, [pc, #52]	@ (80064ec <xTaskIncrementTick+0x170>)
 80064b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064b8:	697b      	ldr	r3, [r7, #20]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200006d8 	.word	0x200006d8
 80064c8:	200006b4 	.word	0x200006b4
 80064cc:	20000668 	.word	0x20000668
 80064d0:	2000066c 	.word	0x2000066c
 80064d4:	200006c8 	.word	0x200006c8
 80064d8:	200006d0 	.word	0x200006d0
 80064dc:	200006b8 	.word	0x200006b8
 80064e0:	200005b4 	.word	0x200005b4
 80064e4:	200005b0 	.word	0x200005b0
 80064e8:	200006c4 	.word	0x200006c4
 80064ec:	200006c0 	.word	0x200006c0

080064f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064f6:	4b2a      	ldr	r3, [pc, #168]	@ (80065a0 <vTaskSwitchContext+0xb0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064fe:	4b29      	ldr	r3, [pc, #164]	@ (80065a4 <vTaskSwitchContext+0xb4>)
 8006500:	2201      	movs	r2, #1
 8006502:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006504:	e045      	b.n	8006592 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006506:	4b27      	ldr	r3, [pc, #156]	@ (80065a4 <vTaskSwitchContext+0xb4>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800650c:	4b26      	ldr	r3, [pc, #152]	@ (80065a8 <vTaskSwitchContext+0xb8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	fab3 f383 	clz	r3, r3
 8006518:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800651a:	7afb      	ldrb	r3, [r7, #11]
 800651c:	f1c3 031f 	rsb	r3, r3, #31
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	4922      	ldr	r1, [pc, #136]	@ (80065ac <vTaskSwitchContext+0xbc>)
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10b      	bne.n	800654e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	607b      	str	r3, [r7, #4]
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	e7fd      	b.n	800654a <vTaskSwitchContext+0x5a>
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <vTaskSwitchContext+0xbc>)
 800655a:	4413      	add	r3, r2
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	3308      	adds	r3, #8
 8006570:	429a      	cmp	r2, r3
 8006572:	d104      	bne.n	800657e <vTaskSwitchContext+0x8e>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	605a      	str	r2, [r3, #4]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	4a0a      	ldr	r2, [pc, #40]	@ (80065b0 <vTaskSwitchContext+0xc0>)
 8006586:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <vTaskSwitchContext+0xc0>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	334c      	adds	r3, #76	@ 0x4c
 800658e:	4a09      	ldr	r2, [pc, #36]	@ (80065b4 <vTaskSwitchContext+0xc4>)
 8006590:	6013      	str	r3, [r2, #0]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	200006d8 	.word	0x200006d8
 80065a4:	200006c4 	.word	0x200006c4
 80065a8:	200006b8 	.word	0x200006b8
 80065ac:	200005b4 	.word	0x200005b4
 80065b0:	200005b0 	.word	0x200005b0
 80065b4:	200000ec 	.word	0x200000ec

080065b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60fb      	str	r3, [r7, #12]
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065e0:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <vTaskPlaceOnEventList+0x48>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3318      	adds	r3, #24
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff f883 	bl	80056f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065ee:	2101      	movs	r1, #1
 80065f0:	6838      	ldr	r0, [r7, #0]
 80065f2:	f000 fb05 	bl	8006c00 <prvAddCurrentTaskToDelayedList>
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200005b0 	.word	0x200005b0

08006604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60fb      	str	r3, [r7, #12]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	3318      	adds	r3, #24
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff f895 	bl	8005766 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800663c:	4b1d      	ldr	r3, [pc, #116]	@ (80066b4 <xTaskRemoveFromEventList+0xb0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d11c      	bne.n	800667e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	3304      	adds	r3, #4
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff f88c 	bl	8005766 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	2201      	movs	r2, #1
 8006654:	409a      	lsls	r2, r3
 8006656:	4b18      	ldr	r3, [pc, #96]	@ (80066b8 <xTaskRemoveFromEventList+0xb4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	4a16      	ldr	r2, [pc, #88]	@ (80066b8 <xTaskRemoveFromEventList+0xb4>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4a13      	ldr	r2, [pc, #76]	@ (80066bc <xTaskRemoveFromEventList+0xb8>)
 800666e:	441a      	add	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7ff f818 	bl	80056ac <vListInsertEnd>
 800667c:	e005      	b.n	800668a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3318      	adds	r3, #24
 8006682:	4619      	mov	r1, r3
 8006684:	480e      	ldr	r0, [pc, #56]	@ (80066c0 <xTaskRemoveFromEventList+0xbc>)
 8006686:	f7ff f811 	bl	80056ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668e:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <xTaskRemoveFromEventList+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	429a      	cmp	r2, r3
 8006696:	d905      	bls.n	80066a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800669c:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <xTaskRemoveFromEventList+0xc4>)
 800669e:	2201      	movs	r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e001      	b.n	80066a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066a8:	697b      	ldr	r3, [r7, #20]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200006d8 	.word	0x200006d8
 80066b8:	200006b8 	.word	0x200006b8
 80066bc:	200005b4 	.word	0x200005b4
 80066c0:	20000670 	.word	0x20000670
 80066c4:	200005b0 	.word	0x200005b0
 80066c8:	200006c4 	.word	0x200006c4

080066cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066d4:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <vTaskInternalSetTimeOutState+0x24>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066dc:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <vTaskInternalSetTimeOutState+0x28>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	605a      	str	r2, [r3, #4]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	200006c8 	.word	0x200006c8
 80066f4:	200006b4 	.word	0x200006b4

080066f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10b      	bne.n	8006720 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	613b      	str	r3, [r7, #16]
}
 800671a:	bf00      	nop
 800671c:	bf00      	nop
 800671e:	e7fd      	b.n	800671c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60fb      	str	r3, [r7, #12]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800673e:	f000 fbf3 	bl	8006f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006742:	4b1d      	ldr	r3, [pc, #116]	@ (80067b8 <xTaskCheckForTimeOut+0xc0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800675a:	d102      	bne.n	8006762 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800675c:	2300      	movs	r3, #0
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e023      	b.n	80067aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <xTaskCheckForTimeOut+0xc4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d007      	beq.n	800677e <xTaskCheckForTimeOut+0x86>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	429a      	cmp	r2, r3
 8006776:	d302      	bcc.n	800677e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006778:	2301      	movs	r3, #1
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e015      	b.n	80067aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	429a      	cmp	r2, r3
 8006786:	d20b      	bcs.n	80067a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff ff99 	bl	80066cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e004      	b.n	80067aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067a6:	2301      	movs	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067aa:	f000 fbef 	bl	8006f8c <vPortExitCritical>

	return xReturn;
 80067ae:	69fb      	ldr	r3, [r7, #28]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200006b4 	.word	0x200006b4
 80067bc:	200006c8 	.word	0x200006c8

080067c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067c4:	4b03      	ldr	r3, [pc, #12]	@ (80067d4 <vTaskMissedYield+0x14>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
}
 80067ca:	bf00      	nop
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	200006c4 	.word	0x200006c4

080067d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067e0:	f000 f852 	bl	8006888 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067e4:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <prvIdleTask+0x28>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d9f9      	bls.n	80067e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067ec:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <prvIdleTask+0x2c>)
 80067ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067fc:	e7f0      	b.n	80067e0 <prvIdleTask+0x8>
 80067fe:	bf00      	nop
 8006800:	200005b4 	.word	0x200005b4
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800680e:	2300      	movs	r3, #0
 8006810:	607b      	str	r3, [r7, #4]
 8006812:	e00c      	b.n	800682e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4a12      	ldr	r2, [pc, #72]	@ (8006868 <prvInitialiseTaskLists+0x60>)
 8006820:	4413      	add	r3, r2
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe ff15 	bl	8005652 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3301      	adds	r3, #1
 800682c:	607b      	str	r3, [r7, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b06      	cmp	r3, #6
 8006832:	d9ef      	bls.n	8006814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006834:	480d      	ldr	r0, [pc, #52]	@ (800686c <prvInitialiseTaskLists+0x64>)
 8006836:	f7fe ff0c 	bl	8005652 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800683a:	480d      	ldr	r0, [pc, #52]	@ (8006870 <prvInitialiseTaskLists+0x68>)
 800683c:	f7fe ff09 	bl	8005652 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006840:	480c      	ldr	r0, [pc, #48]	@ (8006874 <prvInitialiseTaskLists+0x6c>)
 8006842:	f7fe ff06 	bl	8005652 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006846:	480c      	ldr	r0, [pc, #48]	@ (8006878 <prvInitialiseTaskLists+0x70>)
 8006848:	f7fe ff03 	bl	8005652 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800684c:	480b      	ldr	r0, [pc, #44]	@ (800687c <prvInitialiseTaskLists+0x74>)
 800684e:	f7fe ff00 	bl	8005652 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006852:	4b0b      	ldr	r3, [pc, #44]	@ (8006880 <prvInitialiseTaskLists+0x78>)
 8006854:	4a05      	ldr	r2, [pc, #20]	@ (800686c <prvInitialiseTaskLists+0x64>)
 8006856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <prvInitialiseTaskLists+0x7c>)
 800685a:	4a05      	ldr	r2, [pc, #20]	@ (8006870 <prvInitialiseTaskLists+0x68>)
 800685c:	601a      	str	r2, [r3, #0]
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	200005b4 	.word	0x200005b4
 800686c:	20000640 	.word	0x20000640
 8006870:	20000654 	.word	0x20000654
 8006874:	20000670 	.word	0x20000670
 8006878:	20000684 	.word	0x20000684
 800687c:	2000069c 	.word	0x2000069c
 8006880:	20000668 	.word	0x20000668
 8006884:	2000066c 	.word	0x2000066c

08006888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800688e:	e019      	b.n	80068c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006890:	f000 fb4a 	bl	8006f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006894:	4b10      	ldr	r3, [pc, #64]	@ (80068d8 <prvCheckTasksWaitingTermination+0x50>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe ff60 	bl	8005766 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068a6:	4b0d      	ldr	r3, [pc, #52]	@ (80068dc <prvCheckTasksWaitingTermination+0x54>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4a0b      	ldr	r2, [pc, #44]	@ (80068dc <prvCheckTasksWaitingTermination+0x54>)
 80068ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <prvCheckTasksWaitingTermination+0x58>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	4a0a      	ldr	r2, [pc, #40]	@ (80068e0 <prvCheckTasksWaitingTermination+0x58>)
 80068b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068ba:	f000 fb67 	bl	8006f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f810 	bl	80068e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068c4:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <prvCheckTasksWaitingTermination+0x58>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e1      	bne.n	8006890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000684 	.word	0x20000684
 80068dc:	200006b0 	.word	0x200006b0
 80068e0:	20000698 	.word	0x20000698

080068e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	334c      	adds	r3, #76	@ 0x4c
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 f997 	bl	8007c24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fcff 	bl	8007308 <vPortFree>
				vPortFree( pxTCB );
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fcfc 	bl	8007308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006910:	e019      	b.n	8006946 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006918:	2b01      	cmp	r3, #1
 800691a:	d103      	bne.n	8006924 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fcf3 	bl	8007308 <vPortFree>
	}
 8006922:	e010      	b.n	8006946 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800692a:	2b02      	cmp	r3, #2
 800692c:	d00b      	beq.n	8006946 <prvDeleteTCB+0x62>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	60fb      	str	r3, [r7, #12]
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <prvDeleteTCB+0x5e>
	}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006956:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <prvResetNextTaskUnblockTime+0x38>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006960:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <prvResetNextTaskUnblockTime+0x3c>)
 8006962:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006968:	e008      	b.n	800697c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696a:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <prvResetNextTaskUnblockTime+0x38>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a04      	ldr	r2, [pc, #16]	@ (800698c <prvResetNextTaskUnblockTime+0x3c>)
 800697a:	6013      	str	r3, [r2, #0]
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20000668 	.word	0x20000668
 800698c:	200006d0 	.word	0x200006d0

08006990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006996:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <xTaskGetSchedulerState+0x34>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800699e:	2301      	movs	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	e008      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a4:	4b08      	ldr	r3, [pc, #32]	@ (80069c8 <xTaskGetSchedulerState+0x38>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069ac:	2302      	movs	r3, #2
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	e001      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069b2:	2300      	movs	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069b6:	687b      	ldr	r3, [r7, #4]
	}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	200006bc 	.word	0x200006bc
 80069c8:	200006d8 	.word	0x200006d8

080069cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d05e      	beq.n	8006aa0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e6:	4b31      	ldr	r3, [pc, #196]	@ (8006aac <xTaskPriorityInherit+0xe0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d24e      	bcs.n	8006a8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	db06      	blt.n	8006a06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	4b2c      	ldr	r3, [pc, #176]	@ (8006aac <xTaskPriorityInherit+0xe0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	f1c3 0207 	rsb	r2, r3, #7
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6959      	ldr	r1, [r3, #20]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a26      	ldr	r2, [pc, #152]	@ (8006ab0 <xTaskPriorityInherit+0xe4>)
 8006a18:	4413      	add	r3, r2
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	d12f      	bne.n	8006a7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fe9f 	bl	8005766 <uxListRemove>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	2201      	movs	r2, #1
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	43da      	mvns	r2, r3
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ab4 <xTaskPriorityInherit+0xe8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab4 <xTaskPriorityInherit+0xe8>)
 8006a42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a44:	4b19      	ldr	r3, [pc, #100]	@ (8006aac <xTaskPriorityInherit+0xe0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	2201      	movs	r2, #1
 8006a54:	409a      	lsls	r2, r3
 8006a56:	4b17      	ldr	r3, [pc, #92]	@ (8006ab4 <xTaskPriorityInherit+0xe8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	4a15      	ldr	r2, [pc, #84]	@ (8006ab4 <xTaskPriorityInherit+0xe8>)
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4a10      	ldr	r2, [pc, #64]	@ (8006ab0 <xTaskPriorityInherit+0xe4>)
 8006a6e:	441a      	add	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4619      	mov	r1, r3
 8006a76:	4610      	mov	r0, r2
 8006a78:	f7fe fe18 	bl	80056ac <vListInsertEnd>
 8006a7c:	e004      	b.n	8006a88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006aac <xTaskPriorityInherit+0xe0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e008      	b.n	8006aa0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a92:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <xTaskPriorityInherit+0xe0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d201      	bcs.n	8006aa0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
	}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200005b0 	.word	0x200005b0
 8006ab0:	200005b4 	.word	0x200005b4
 8006ab4:	200006b8 	.word	0x200006b8

08006ab8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d079      	beq.n	8006bc4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	60fb      	str	r3, [r7, #12]
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	e7fd      	b.n	8006aec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d902      	bls.n	8006b00 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	e002      	b.n	8006b06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d059      	beq.n	8006bc4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d154      	bne.n	8006bc4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d10b      	bne.n	8006b3c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	60bb      	str	r3, [r7, #8]
}
 8006b36:	bf00      	nop
 8006b38:	bf00      	nop
 8006b3a:	e7fd      	b.n	8006b38 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	db04      	blt.n	8006b5a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	f1c3 0207 	rsb	r2, r3, #7
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	6959      	ldr	r1, [r3, #20]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4a19      	ldr	r2, [pc, #100]	@ (8006bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b6a:	4413      	add	r3, r2
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	d129      	bne.n	8006bc4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fdf6 	bl	8005766 <uxListRemove>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	2201      	movs	r2, #1
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	43da      	mvns	r2, r3
 8006b8c:	4b11      	ldr	r3, [pc, #68]	@ (8006bd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4013      	ands	r3, r2
 8006b92:	4a10      	ldr	r2, [pc, #64]	@ (8006bd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006b94:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	409a      	lsls	r2, r3
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8006bd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4a06      	ldr	r2, [pc, #24]	@ (8006bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006bb6:	441a      	add	r2, r3
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f7fe fd74 	bl	80056ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bc4:	bf00      	nop
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	200005b0 	.word	0x200005b0
 8006bd0:	200005b4 	.word	0x200005b4
 8006bd4:	200006b8 	.word	0x200006b8

08006bd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006bdc:	4b07      	ldr	r3, [pc, #28]	@ (8006bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006be4:	4b05      	ldr	r3, [pc, #20]	@ (8006bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bea:	3201      	adds	r2, #1
 8006bec:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006bee:	4b03      	ldr	r3, [pc, #12]	@ (8006bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
	}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	200005b0 	.word	0x200005b0

08006c00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c0a:	4b29      	ldr	r3, [pc, #164]	@ (8006cb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c10:	4b28      	ldr	r3, [pc, #160]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fda5 	bl	8005766 <uxListRemove>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10b      	bne.n	8006c3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c22:	4b24      	ldr	r3, [pc, #144]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	2201      	movs	r2, #1
 8006c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2e:	43da      	mvns	r2, r3
 8006c30:	4b21      	ldr	r3, [pc, #132]	@ (8006cb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4013      	ands	r3, r2
 8006c36:	4a20      	ldr	r2, [pc, #128]	@ (8006cb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c40:	d10a      	bne.n	8006c58 <prvAddCurrentTaskToDelayedList+0x58>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c48:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4619      	mov	r1, r3
 8006c50:	481a      	ldr	r0, [pc, #104]	@ (8006cbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c52:	f7fe fd2b 	bl	80056ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c56:	e026      	b.n	8006ca6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c60:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d209      	bcs.n	8006c84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c70:	4b13      	ldr	r3, [pc, #76]	@ (8006cc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f7fe fd39 	bl	80056f4 <vListInsert>
}
 8006c82:	e010      	b.n	8006ca6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c84:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f7fe fd2f 	bl	80056f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c96:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d202      	bcs.n	8006ca6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ca0:	4a09      	ldr	r2, [pc, #36]	@ (8006cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6013      	str	r3, [r2, #0]
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	200006b4 	.word	0x200006b4
 8006cb4:	200005b0 	.word	0x200005b0
 8006cb8:	200006b8 	.word	0x200006b8
 8006cbc:	2000069c 	.word	0x2000069c
 8006cc0:	2000066c 	.word	0x2000066c
 8006cc4:	20000668 	.word	0x20000668
 8006cc8:	200006d0 	.word	0x200006d0

08006ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3b04      	subs	r3, #4
 8006cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0201 	bic.w	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d30 <pxPortInitialiseStack+0x64>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3b14      	subs	r3, #20
 8006d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b04      	subs	r3, #4
 8006d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f06f 0202 	mvn.w	r2, #2
 8006d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3b20      	subs	r3, #32
 8006d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d22:	68fb      	ldr	r3, [r7, #12]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	08006d35 	.word	0x08006d35

08006d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d3e:	4b13      	ldr	r3, [pc, #76]	@ (8006d8c <prvTaskExitError+0x58>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d46:	d00b      	beq.n	8006d60 <prvTaskExitError+0x2c>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	60fb      	str	r3, [r7, #12]
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <prvTaskExitError+0x28>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60bb      	str	r3, [r7, #8]
}
 8006d72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d74:	bf00      	nop
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0fc      	beq.n	8006d76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	2000000c 	.word	0x2000000c

08006d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d90:	4b07      	ldr	r3, [pc, #28]	@ (8006db0 <pxCurrentTCBConst2>)
 8006d92:	6819      	ldr	r1, [r3, #0]
 8006d94:	6808      	ldr	r0, [r1, #0]
 8006d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9a:	f380 8809 	msr	PSP, r0
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8811 	msr	BASEPRI, r0
 8006daa:	4770      	bx	lr
 8006dac:	f3af 8000 	nop.w

08006db0 <pxCurrentTCBConst2>:
 8006db0:	200005b0 	.word	0x200005b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop

08006db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006db8:	4808      	ldr	r0, [pc, #32]	@ (8006ddc <prvPortStartFirstTask+0x24>)
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	6800      	ldr	r0, [r0, #0]
 8006dbe:	f380 8808 	msr	MSP, r0
 8006dc2:	f04f 0000 	mov.w	r0, #0
 8006dc6:	f380 8814 	msr	CONTROL, r0
 8006dca:	b662      	cpsie	i
 8006dcc:	b661      	cpsie	f
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	df00      	svc	0
 8006dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dda:	bf00      	nop
 8006ddc:	e000ed08 	.word	0xe000ed08

08006de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006de6:	4b47      	ldr	r3, [pc, #284]	@ (8006f04 <xPortStartScheduler+0x124>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a47      	ldr	r2, [pc, #284]	@ (8006f08 <xPortStartScheduler+0x128>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d10b      	bne.n	8006e08 <xPortStartScheduler+0x28>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	613b      	str	r3, [r7, #16]
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e08:	4b3e      	ldr	r3, [pc, #248]	@ (8006f04 <xPortStartScheduler+0x124>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f0c <xPortStartScheduler+0x12c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d10b      	bne.n	8006e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60fb      	str	r3, [r7, #12]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e2a:	4b39      	ldr	r3, [pc, #228]	@ (8006f10 <xPortStartScheduler+0x130>)
 8006e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	22ff      	movs	r2, #255	@ 0xff
 8006e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	4b31      	ldr	r3, [pc, #196]	@ (8006f14 <xPortStartScheduler+0x134>)
 8006e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e52:	4b31      	ldr	r3, [pc, #196]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e54:	2207      	movs	r2, #7
 8006e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e58:	e009      	b.n	8006e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	4a2d      	ldr	r2, [pc, #180]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e76:	2b80      	cmp	r3, #128	@ 0x80
 8006e78:	d0ef      	beq.n	8006e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e7a:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f1c3 0307 	rsb	r3, r3, #7
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d00b      	beq.n	8006e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60bb      	str	r3, [r7, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006eb0:	4a19      	ldr	r2, [pc, #100]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ebc:	4b17      	ldr	r3, [pc, #92]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ec8:	4b14      	ldr	r3, [pc, #80]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a13      	ldr	r2, [pc, #76]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ed4:	f000 f8da 	bl	800708c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ed8:	4b11      	ldr	r3, [pc, #68]	@ (8006f20 <xPortStartScheduler+0x140>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ede:	f000 f8f9 	bl	80070d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ee2:	4b10      	ldr	r3, [pc, #64]	@ (8006f24 <xPortStartScheduler+0x144>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8006f24 <xPortStartScheduler+0x144>)
 8006ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006eee:	f7ff ff63 	bl	8006db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ef2:	f7ff fafd 	bl	80064f0 <vTaskSwitchContext>
	prvTaskExitError();
 8006ef6:	f7ff ff1d 	bl	8006d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	e000ed00 	.word	0xe000ed00
 8006f08:	410fc271 	.word	0x410fc271
 8006f0c:	410fc270 	.word	0x410fc270
 8006f10:	e000e400 	.word	0xe000e400
 8006f14:	200006dc 	.word	0x200006dc
 8006f18:	200006e0 	.word	0x200006e0
 8006f1c:	e000ed20 	.word	0xe000ed20
 8006f20:	2000000c 	.word	0x2000000c
 8006f24:	e000ef34 	.word	0xe000ef34

08006f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
}
 8006f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f42:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	4a0e      	ldr	r2, [pc, #56]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d110      	bne.n	8006f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <vPortEnterCritical+0x60>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	603b      	str	r3, [r7, #0]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <vPortEnterCritical+0x4a>
	}
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f92:	4b12      	ldr	r3, [pc, #72]	@ (8006fdc <vPortExitCritical+0x50>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <vPortExitCritical+0x26>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	607b      	str	r3, [r7, #4]
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	4a08      	ldr	r2, [pc, #32]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fbc:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <vPortExitCritical+0x44>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f383 8811 	msr	BASEPRI, r3
}
 8006fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	2000000c 	.word	0x2000000c

08006fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fe0:	f3ef 8009 	mrs	r0, PSP
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4b15      	ldr	r3, [pc, #84]	@ (8007040 <pxCurrentTCBConst>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f01e 0f10 	tst.w	lr, #16
 8006ff0:	bf08      	it	eq
 8006ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	6010      	str	r0, [r2, #0]
 8006ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007004:	f380 8811 	msr	BASEPRI, r0
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f7ff fa6e 	bl	80064f0 <vTaskSwitchContext>
 8007014:	f04f 0000 	mov.w	r0, #0
 8007018:	f380 8811 	msr	BASEPRI, r0
 800701c:	bc09      	pop	{r0, r3}
 800701e:	6819      	ldr	r1, [r3, #0]
 8007020:	6808      	ldr	r0, [r1, #0]
 8007022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007026:	f01e 0f10 	tst.w	lr, #16
 800702a:	bf08      	it	eq
 800702c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007030:	f380 8809 	msr	PSP, r0
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w

08007040 <pxCurrentTCBConst>:
 8007040:	200005b0 	.word	0x200005b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop

08007048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	607b      	str	r3, [r7, #4]
}
 8007060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007062:	f7ff f98b 	bl	800637c <xTaskIncrementTick>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <SysTick_Handler+0x40>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f383 8811 	msr	BASEPRI, r3
}
 800707e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007090:	4b0b      	ldr	r3, [pc, #44]	@ (80070c0 <vPortSetupTimerInterrupt+0x34>)
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007096:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <vPortSetupTimerInterrupt+0x38>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800709c:	4b0a      	ldr	r3, [pc, #40]	@ (80070c8 <vPortSetupTimerInterrupt+0x3c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a0a      	ldr	r2, [pc, #40]	@ (80070cc <vPortSetupTimerInterrupt+0x40>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	099b      	lsrs	r3, r3, #6
 80070a8:	4a09      	ldr	r2, [pc, #36]	@ (80070d0 <vPortSetupTimerInterrupt+0x44>)
 80070aa:	3b01      	subs	r3, #1
 80070ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ae:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <vPortSetupTimerInterrupt+0x34>)
 80070b0:	2207      	movs	r2, #7
 80070b2:	601a      	str	r2, [r3, #0]
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	e000e010 	.word	0xe000e010
 80070c4:	e000e018 	.word	0xe000e018
 80070c8:	20000000 	.word	0x20000000
 80070cc:	10624dd3 	.word	0x10624dd3
 80070d0:	e000e014 	.word	0xe000e014

080070d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80070e4 <vPortEnableVFP+0x10>
 80070d8:	6801      	ldr	r1, [r0, #0]
 80070da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80070de:	6001      	str	r1, [r0, #0]
 80070e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070e2:	bf00      	nop
 80070e4:	e000ed88 	.word	0xe000ed88

080070e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070ee:	f3ef 8305 	mrs	r3, IPSR
 80070f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	d915      	bls.n	8007126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070fa:	4a18      	ldr	r2, [pc, #96]	@ (800715c <vPortValidateInterruptPriority+0x74>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007104:	4b16      	ldr	r3, [pc, #88]	@ (8007160 <vPortValidateInterruptPriority+0x78>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	7afa      	ldrb	r2, [r7, #11]
 800710a:	429a      	cmp	r2, r3
 800710c:	d20b      	bcs.n	8007126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	607b      	str	r3, [r7, #4]
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	e7fd      	b.n	8007122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007126:	4b0f      	ldr	r3, [pc, #60]	@ (8007164 <vPortValidateInterruptPriority+0x7c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800712e:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <vPortValidateInterruptPriority+0x80>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d90b      	bls.n	800714e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	603b      	str	r3, [r7, #0]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <vPortValidateInterruptPriority+0x62>
	}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	e000e3f0 	.word	0xe000e3f0
 8007160:	200006dc 	.word	0x200006dc
 8007164:	e000ed0c 	.word	0xe000ed0c
 8007168:	200006e0 	.word	0x200006e0

0800716c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	@ 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007178:	f7ff f854 	bl	8006224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800717c:	4b5c      	ldr	r3, [pc, #368]	@ (80072f0 <pvPortMalloc+0x184>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007184:	f000 f924 	bl	80073d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007188:	4b5a      	ldr	r3, [pc, #360]	@ (80072f4 <pvPortMalloc+0x188>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 8095 	bne.w	80072c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01e      	beq.n	80071da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800719c:	2208      	movs	r2, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d015      	beq.n	80071da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	3308      	adds	r3, #8
 80071b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <pvPortMalloc+0x6e>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	617b      	str	r3, [r7, #20]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d06f      	beq.n	80072c0 <pvPortMalloc+0x154>
 80071e0:	4b45      	ldr	r3, [pc, #276]	@ (80072f8 <pvPortMalloc+0x18c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d86a      	bhi.n	80072c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071ea:	4b44      	ldr	r3, [pc, #272]	@ (80072fc <pvPortMalloc+0x190>)
 80071ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071ee:	4b43      	ldr	r3, [pc, #268]	@ (80072fc <pvPortMalloc+0x190>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071f4:	e004      	b.n	8007200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	429a      	cmp	r2, r3
 8007208:	d903      	bls.n	8007212 <pvPortMalloc+0xa6>
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f1      	bne.n	80071f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007212:	4b37      	ldr	r3, [pc, #220]	@ (80072f0 <pvPortMalloc+0x184>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007218:	429a      	cmp	r2, r3
 800721a:	d051      	beq.n	80072c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2208      	movs	r2, #8
 8007222:	4413      	add	r3, r2
 8007224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	2308      	movs	r3, #8
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	429a      	cmp	r2, r3
 800723c:	d920      	bls.n	8007280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4413      	add	r3, r2
 8007244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <pvPortMalloc+0xfc>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	613b      	str	r3, [r7, #16]
}
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	e7fd      	b.n	8007264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800727a:	69b8      	ldr	r0, [r7, #24]
 800727c:	f000 f90a 	bl	8007494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007280:	4b1d      	ldr	r3, [pc, #116]	@ (80072f8 <pvPortMalloc+0x18c>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	4a1b      	ldr	r2, [pc, #108]	@ (80072f8 <pvPortMalloc+0x18c>)
 800728c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800728e:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <pvPortMalloc+0x18c>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b1b      	ldr	r3, [pc, #108]	@ (8007300 <pvPortMalloc+0x194>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d203      	bcs.n	80072a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800729a:	4b17      	ldr	r3, [pc, #92]	@ (80072f8 <pvPortMalloc+0x18c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a18      	ldr	r2, [pc, #96]	@ (8007300 <pvPortMalloc+0x194>)
 80072a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <pvPortMalloc+0x188>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072b6:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <pvPortMalloc+0x198>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	4a11      	ldr	r2, [pc, #68]	@ (8007304 <pvPortMalloc+0x198>)
 80072be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072c0:	f7fe ffbe 	bl	8006240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <pvPortMalloc+0x17a>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	60fb      	str	r3, [r7, #12]
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	e7fd      	b.n	80072e2 <pvPortMalloc+0x176>
	return pvReturn;
 80072e6:	69fb      	ldr	r3, [r7, #28]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3728      	adds	r7, #40	@ 0x28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	2000550c 	.word	0x2000550c
 80072f4:	20005520 	.word	0x20005520
 80072f8:	20005510 	.word	0x20005510
 80072fc:	20005504 	.word	0x20005504
 8007300:	20005514 	.word	0x20005514
 8007304:	20005518 	.word	0x20005518

08007308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d04f      	beq.n	80073ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800731a:	2308      	movs	r3, #8
 800731c:	425b      	negs	r3, r3
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	4b25      	ldr	r3, [pc, #148]	@ (80073c4 <vPortFree+0xbc>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10b      	bne.n	800734e <vPortFree+0x46>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	60fb      	str	r3, [r7, #12]
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <vPortFree+0x66>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	60bb      	str	r3, [r7, #8]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <vPortFree+0xbc>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01e      	beq.n	80073ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11a      	bne.n	80073ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	4b0e      	ldr	r3, [pc, #56]	@ (80073c4 <vPortFree+0xbc>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007394:	f7fe ff46 	bl	8006224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b0a      	ldr	r3, [pc, #40]	@ (80073c8 <vPortFree+0xc0>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	4a09      	ldr	r2, [pc, #36]	@ (80073c8 <vPortFree+0xc0>)
 80073a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073a6:	6938      	ldr	r0, [r7, #16]
 80073a8:	f000 f874 	bl	8007494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073ac:	4b07      	ldr	r3, [pc, #28]	@ (80073cc <vPortFree+0xc4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	4a06      	ldr	r2, [pc, #24]	@ (80073cc <vPortFree+0xc4>)
 80073b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073b6:	f7fe ff43 	bl	8006240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073ba:	bf00      	nop
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20005520 	.word	0x20005520
 80073c8:	20005510 	.word	0x20005510
 80073cc:	2000551c 	.word	0x2000551c

080073d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073d6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80073da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073dc:	4b27      	ldr	r3, [pc, #156]	@ (800747c <prvHeapInit+0xac>)
 80073de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3307      	adds	r3, #7
 80073ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0307 	bic.w	r3, r3, #7
 80073f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	4a1f      	ldr	r2, [pc, #124]	@ (800747c <prvHeapInit+0xac>)
 8007400:	4413      	add	r3, r2
 8007402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007408:	4a1d      	ldr	r2, [pc, #116]	@ (8007480 <prvHeapInit+0xb0>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800740e:	4b1c      	ldr	r3, [pc, #112]	@ (8007480 <prvHeapInit+0xb0>)
 8007410:	2200      	movs	r2, #0
 8007412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800741c:	2208      	movs	r2, #8
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a15      	ldr	r2, [pc, #84]	@ (8007484 <prvHeapInit+0xb4>)
 8007430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007432:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <prvHeapInit+0xb4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2200      	movs	r2, #0
 8007438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800743a:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <prvHeapInit+0xb4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007450:	4b0c      	ldr	r3, [pc, #48]	@ (8007484 <prvHeapInit+0xb4>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4a0a      	ldr	r2, [pc, #40]	@ (8007488 <prvHeapInit+0xb8>)
 800745e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	4a09      	ldr	r2, [pc, #36]	@ (800748c <prvHeapInit+0xbc>)
 8007466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007468:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <prvHeapInit+0xc0>)
 800746a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800746e:	601a      	str	r2, [r3, #0]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	200006e4 	.word	0x200006e4
 8007480:	20005504 	.word	0x20005504
 8007484:	2000550c 	.word	0x2000550c
 8007488:	20005514 	.word	0x20005514
 800748c:	20005510 	.word	0x20005510
 8007490:	20005520 	.word	0x20005520

08007494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800749c:	4b28      	ldr	r3, [pc, #160]	@ (8007540 <prvInsertBlockIntoFreeList+0xac>)
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e002      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x14>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d8f7      	bhi.n	80074a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d108      	bne.n	80074d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	441a      	add	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	441a      	add	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d118      	bne.n	800751c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b15      	ldr	r3, [pc, #84]	@ (8007544 <prvInsertBlockIntoFreeList+0xb0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d00d      	beq.n	8007512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	e008      	b.n	8007524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007512:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <prvInsertBlockIntoFreeList+0xb0>)
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e003      	b.n	8007524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d002      	beq.n	8007532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	20005504 	.word	0x20005504
 8007544:	2000550c 	.word	0x2000550c

08007548 <HAL_UART_RxCpltCallback>:
/*********** PREEMPTION PRIORITY  ***********/
void CUSTOM_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

}
/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART2) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a0d      	ldr	r2, [pc, #52]	@ (800758c <HAL_UART_RxCpltCallback+0x44>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d114      	bne.n	8007584 <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 800755e:	4b0c      	ldr	r3, [pc, #48]	@ (8007590 <HAL_UART_RxCpltCallback+0x48>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f107 020c 	add.w	r2, r7, #12
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe f9eb 	bl	8005944 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <HAL_UART_RxCpltCallback+0x3c>
 8007574:	4b07      	ldr	r3, [pc, #28]	@ (8007594 <HAL_UART_RxCpltCallback+0x4c>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
	}
}
 8007584:	bf00      	nop
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40004400 	.word	0x40004400
 8007590:	20005524 	.word	0x20005524
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <shell_init>:
int isStarted = 0;
int isADC_cplt =0;
uint8_t PWMLed = 255;


void shell_init(void) {
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 800759c:	2220      	movs	r2, #32
 800759e:	2100      	movs	r1, #0
 80075a0:	481a      	ldr	r0, [pc, #104]	@ (800760c <shell_init+0x74>)
 80075a2:	f000 fb37 	bl	8007c14 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 80075a6:	2240      	movs	r2, #64	@ 0x40
 80075a8:	2100      	movs	r1, #0
 80075aa:	4819      	ldr	r0, [pc, #100]	@ (8007610 <shell_init+0x78>)
 80075ac:	f000 fb32 	bl	8007c14 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 80075b0:	4b18      	ldr	r3, [pc, #96]	@ (8007614 <shell_init+0x7c>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 80075b6:	2240      	movs	r2, #64	@ 0x40
 80075b8:	2100      	movs	r1, #0
 80075ba:	4817      	ldr	r0, [pc, #92]	@ (8007618 <shell_init+0x80>)
 80075bc:	f000 fb2a 	bl	8007c14 <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 80075c0:	2203      	movs	r2, #3
 80075c2:	2100      	movs	r1, #0
 80075c4:	2001      	movs	r0, #1
 80075c6:	f7fe f963 	bl	8005890 <xQueueGenericCreate>
 80075ca:	4603      	mov	r3, r0
 80075cc:	4a13      	ldr	r2, [pc, #76]	@ (800761c <shell_init+0x84>)
 80075ce:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 80075d0:	4b12      	ldr	r3, [pc, #72]	@ (800761c <shell_init+0x84>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <shell_init+0x44>
 80075d8:	f7f9 f9a6 	bl	8000928 <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 80075dc:	4810      	ldr	r0, [pc, #64]	@ (8007620 <shell_init+0x88>)
 80075de:	f7f8 fdf7 	bl	80001d0 <strlen>
 80075e2:	4603      	mov	r3, r0
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075ea:	490d      	ldr	r1, [pc, #52]	@ (8007620 <shell_init+0x88>)
 80075ec:	480d      	ldr	r0, [pc, #52]	@ (8007624 <shell_init+0x8c>)
 80075ee:	f7fc fc15 	bl	8003e1c <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 80075f2:	480d      	ldr	r0, [pc, #52]	@ (8007628 <shell_init+0x90>)
 80075f4:	f7f8 fdec 	bl	80001d0 <strlen>
 80075f8:	4603      	mov	r3, r0
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007600:	4909      	ldr	r1, [pc, #36]	@ (8007628 <shell_init+0x90>)
 8007602:	4808      	ldr	r0, [pc, #32]	@ (8007624 <shell_init+0x8c>)
 8007604:	f7fc fc0a 	bl	8003e1c <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 8007608:	bf00      	nop
 800760a:	bd80      	pop	{r7, pc}
 800760c:	200055b0 	.word	0x200055b0
 8007610:	2000556c 	.word	0x2000556c
 8007614:	20005528 	.word	0x20005528
 8007618:	2000552c 	.word	0x2000552c
 800761c:	20005524 	.word	0x20005524
 8007620:	20000040 	.word	0x20000040
 8007624:	20000524 	.word	0x20000524
 8007628:	200000c4 	.word	0x200000c4

0800762c <shell_run>:

void shell_run(void*) {
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 8007638:	2301      	movs	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 800763c:	4b5d      	ldr	r3, [pc, #372]	@ (80077b4 <shell_run+0x188>)
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
		while (reading) {
 8007642:	e070      	b.n	8007726 <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8007644:	2201      	movs	r2, #1
 8007646:	495c      	ldr	r1, [pc, #368]	@ (80077b8 <shell_run+0x18c>)
 8007648:	485c      	ldr	r0, [pc, #368]	@ (80077bc <shell_run+0x190>)
 800764a:	f7fc fc71 	bl	8003f30 <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 800764e:	4b5c      	ldr	r3, [pc, #368]	@ (80077c0 <shell_run+0x194>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fa04 	bl	8005a64 <xQueueSemaphoreTake>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d001      	beq.n	8007666 <shell_run+0x3a>
 8007662:	f7f9 f961 	bl	8000928 <Error_Handler>

			switch (uartRxBuffer[0]) {
 8007666:	4b54      	ldr	r3, [pc, #336]	@ (80077b8 <shell_run+0x18c>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b7f      	cmp	r3, #127	@ 0x7f
 800766c:	d035      	beq.n	80076da <shell_run+0xae>
 800766e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007670:	dc47      	bgt.n	8007702 <shell_run+0xd6>
 8007672:	2b08      	cmp	r3, #8
 8007674:	d031      	beq.n	80076da <shell_run+0xae>
 8007676:	2b0d      	cmp	r3, #13
 8007678:	d143      	bne.n	8007702 <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 800767a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800767e:	2203      	movs	r2, #3
 8007680:	4950      	ldr	r1, [pc, #320]	@ (80077c4 <shell_run+0x198>)
 8007682:	484e      	ldr	r0, [pc, #312]	@ (80077bc <shell_run+0x190>)
 8007684:	f7fc fbca 	bl	8003e1c <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				argc = 0;
 8007688:	4b4f      	ldr	r3, [pc, #316]	@ (80077c8 <shell_run+0x19c>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 800768e:	494f      	ldr	r1, [pc, #316]	@ (80077cc <shell_run+0x1a0>)
 8007690:	484f      	ldr	r0, [pc, #316]	@ (80077d0 <shell_run+0x1a4>)
 8007692:	f000 fa63 	bl	8007b5c <strtok>
 8007696:	4603      	mov	r3, r0
 8007698:	4a4e      	ldr	r2, [pc, #312]	@ (80077d4 <shell_run+0x1a8>)
 800769a:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 800769c:	e010      	b.n	80076c0 <shell_run+0x94>
					argv[argc++] = token;
 800769e:	4b4a      	ldr	r3, [pc, #296]	@ (80077c8 <shell_run+0x19c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	4948      	ldr	r1, [pc, #288]	@ (80077c8 <shell_run+0x19c>)
 80076a6:	600a      	str	r2, [r1, #0]
 80076a8:	4a4a      	ldr	r2, [pc, #296]	@ (80077d4 <shell_run+0x1a8>)
 80076aa:	6812      	ldr	r2, [r2, #0]
 80076ac:	494a      	ldr	r1, [pc, #296]	@ (80077d8 <shell_run+0x1ac>)
 80076ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 80076b2:	4946      	ldr	r1, [pc, #280]	@ (80077cc <shell_run+0x1a0>)
 80076b4:	2000      	movs	r0, #0
 80076b6:	f000 fa51 	bl	8007b5c <strtok>
 80076ba:	4603      	mov	r3, r0
 80076bc:	4a45      	ldr	r2, [pc, #276]	@ (80077d4 <shell_run+0x1a8>)
 80076be:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 80076c0:	4b44      	ldr	r3, [pc, #272]	@ (80077d4 <shell_run+0x1a8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1ea      	bne.n	800769e <shell_run+0x72>
				}
				idx_cmd = 0;
 80076c8:	4b3a      	ldr	r3, [pc, #232]	@ (80077b4 <shell_run+0x188>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 80076d2:	4b42      	ldr	r3, [pc, #264]	@ (80077dc <shell_run+0x1b0>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
				break;
 80076d8:	e025      	b.n	8007726 <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 80076da:	4b36      	ldr	r3, [pc, #216]	@ (80077b4 <shell_run+0x188>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d020      	beq.n	8007724 <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 80076e2:	4b34      	ldr	r3, [pc, #208]	@ (80077b4 <shell_run+0x188>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	1e5a      	subs	r2, r3, #1
 80076e8:	4932      	ldr	r1, [pc, #200]	@ (80077b4 <shell_run+0x188>)
 80076ea:	600a      	str	r2, [r1, #0]
 80076ec:	4a38      	ldr	r2, [pc, #224]	@ (80077d0 <shell_run+0x1a4>)
 80076ee:	2100      	movs	r1, #0
 80076f0:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 80076f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076f6:	2204      	movs	r2, #4
 80076f8:	4939      	ldr	r1, [pc, #228]	@ (80077e0 <shell_run+0x1b4>)
 80076fa:	4830      	ldr	r0, [pc, #192]	@ (80077bc <shell_run+0x190>)
 80076fc:	f7fc fb8e 	bl	8003e1c <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 8007700:	e011      	b.n	8007726 <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8007702:	4b2c      	ldr	r3, [pc, #176]	@ (80077b4 <shell_run+0x188>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	492a      	ldr	r1, [pc, #168]	@ (80077b4 <shell_run+0x188>)
 800770a:	600a      	str	r2, [r1, #0]
 800770c:	4a2a      	ldr	r2, [pc, #168]	@ (80077b8 <shell_run+0x18c>)
 800770e:	7811      	ldrb	r1, [r2, #0]
 8007710:	4a2f      	ldr	r2, [pc, #188]	@ (80077d0 <shell_run+0x1a4>)
 8007712:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 8007714:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007718:	2201      	movs	r2, #1
 800771a:	4927      	ldr	r1, [pc, #156]	@ (80077b8 <shell_run+0x18c>)
 800771c:	4827      	ldr	r0, [pc, #156]	@ (80077bc <shell_run+0x190>)
 800771e:	f7fc fb7d 	bl	8003e1c <HAL_UART_Transmit>
 8007722:	e000      	b.n	8007726 <shell_run+0xfa>
					break;
 8007724:	bf00      	nop
		while (reading) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d18b      	bne.n	8007644 <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 800772c:	4b2b      	ldr	r3, [pc, #172]	@ (80077dc <shell_run+0x1b0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d081      	beq.n	8007638 <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8007734:	2300      	movs	r3, #0
 8007736:	60bb      	str	r3, [r7, #8]
 8007738:	e01b      	b.n	8007772 <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 800773a:	4b27      	ldr	r3, [pc, #156]	@ (80077d8 <shell_run+0x1ac>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4929      	ldr	r1, [pc, #164]	@ (80077e4 <shell_run+0x1b8>)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	440b      	add	r3, r1
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7f8 fd48 	bl	80001e0 <strcmp>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10a      	bne.n	800776c <shell_run+0x140>
					isFind = 1;
 8007756:	4b24      	ldr	r3, [pc, #144]	@ (80077e8 <shell_run+0x1bc>)
 8007758:	2201      	movs	r2, #1
 800775a:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 800775c:	4a21      	ldr	r2, [pc, #132]	@ (80077e4 <shell_run+0x1b8>)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	4413      	add	r3, r2
 8007764:	330c      	adds	r3, #12
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	481b      	ldr	r0, [pc, #108]	@ (80077d8 <shell_run+0x1ac>)
 800776a:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3301      	adds	r3, #1
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d9e0      	bls.n	800773a <shell_run+0x10e>
				}
			}
			if (!isFind) {
 8007778:	4b1b      	ldr	r3, [pc, #108]	@ (80077e8 <shell_run+0x1bc>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 8007780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007784:	2214      	movs	r2, #20
 8007786:	4919      	ldr	r1, [pc, #100]	@ (80077ec <shell_run+0x1c0>)
 8007788:	480c      	ldr	r0, [pc, #48]	@ (80077bc <shell_run+0x190>)
 800778a:	f7fc fb47 	bl	8003e1c <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 800778e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007792:	2212      	movs	r2, #18
 8007794:	4916      	ldr	r1, [pc, #88]	@ (80077f0 <shell_run+0x1c4>)
 8007796:	4809      	ldr	r0, [pc, #36]	@ (80077bc <shell_run+0x190>)
 8007798:	f7fc fb40 	bl	8003e1c <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 800779c:	4b0f      	ldr	r3, [pc, #60]	@ (80077dc <shell_run+0x1b0>)
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
			isFind = 0;
 80077a2:	4b11      	ldr	r3, [pc, #68]	@ (80077e8 <shell_run+0x1bc>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 80077a8:	2220      	movs	r2, #32
 80077aa:	2100      	movs	r1, #0
 80077ac:	4808      	ldr	r0, [pc, #32]	@ (80077d0 <shell_run+0x1a4>)
 80077ae:	f000 fa31 	bl	8007c14 <memset>
		reading = 1;
 80077b2:	e741      	b.n	8007638 <shell_run+0xc>
 80077b4:	200055ac 	.word	0x200055ac
 80077b8:	20005528 	.word	0x20005528
 80077bc:	20000524 	.word	0x20000524
 80077c0:	20005524 	.word	0x20005524
 80077c4:	200000a8 	.word	0x200000a8
 80077c8:	200055d0 	.word	0x200055d0
 80077cc:	08008b94 	.word	0x08008b94
 80077d0:	2000556c 	.word	0x2000556c
 80077d4:	200055d4 	.word	0x200055d4
 80077d8:	200055b0 	.word	0x200055b0
 80077dc:	200055d8 	.word	0x200055d8
 80077e0:	200000ac 	.word	0x200000ac
 80077e4:	20000010 	.word	0x20000010
 80077e8:	200055dc 	.word	0x200055dc
 80077ec:	200000b0 	.word	0x200000b0
 80077f0:	200000c4 	.word	0x200000c4

080077f4 <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af04      	add	r7, sp, #16
 80077fa:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 80077fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007868 <subfunct_help+0x74>)
 80077fe:	9302      	str	r3, [sp, #8]
 8007800:	4b1a      	ldr	r3, [pc, #104]	@ (800786c <subfunct_help+0x78>)
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <subfunct_help+0x7c>)
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	4b1a      	ldr	r3, [pc, #104]	@ (8007874 <subfunct_help+0x80>)
 800780a:	4a1b      	ldr	r2, [pc, #108]	@ (8007878 <subfunct_help+0x84>)
 800780c:	491b      	ldr	r1, [pc, #108]	@ (800787c <subfunct_help+0x88>)
 800780e:	481c      	ldr	r0, [pc, #112]	@ (8007880 <subfunct_help+0x8c>)
 8007810:	f000 f934 	bl	8007a7c <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e01b      	b.n	8007852 <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 800781a:	4a1a      	ldr	r2, [pc, #104]	@ (8007884 <subfunct_help+0x90>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	4413      	add	r3, r2
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	4a17      	ldr	r2, [pc, #92]	@ (8007884 <subfunct_help+0x90>)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	4413      	add	r3, r2
 800782c:	3308      	adds	r3, #8
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4814      	ldr	r0, [pc, #80]	@ (8007884 <subfunct_help+0x90>)
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	0112      	lsls	r2, r2, #4
 8007836:	4402      	add	r2, r0
 8007838:	3204      	adds	r2, #4
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	9201      	str	r2, [sp, #4]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	4b0a      	ldr	r3, [pc, #40]	@ (800786c <subfunct_help+0x78>)
 8007842:	460a      	mov	r2, r1
 8007844:	4910      	ldr	r1, [pc, #64]	@ (8007888 <subfunct_help+0x94>)
 8007846:	4811      	ldr	r0, [pc, #68]	@ (800788c <subfunct_help+0x98>)
 8007848:	f000 f918 	bl	8007a7c <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d9e0      	bls.n	800781a <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 8007858:	480d      	ldr	r0, [pc, #52]	@ (8007890 <subfunct_help+0x9c>)
 800785a:	f000 f977 	bl	8007b4c <puts>
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	08008bd4 	.word	0x08008bd4
 800786c:	08008c24 	.word	0x08008c24
 8007870:	08008c2c 	.word	0x08008c2c
 8007874:	08008b98 	.word	0x08008b98
 8007878:	08008ba0 	.word	0x08008ba0
 800787c:	08008bac 	.word	0x08008bac
 8007880:	08008bb4 	.word	0x08008bb4
 8007884:	20000010 	.word	0x20000010
 8007888:	08008c38 	.word	0x08008c38
 800788c:	08008c40 	.word	0x08008c40
 8007890:	08008c5c 	.word	0x08008c5c

08007894 <subfunct_leds>:
void subfunct_leds(char **argv){
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	MCP23S17_init();
 800789c:	f7f8 fe78 	bl	8000590 <MCP23S17_init>
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <subfunct_clear>:
void subfunct_clear(char **argv) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 80078b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078b4:	2208      	movs	r2, #8
 80078b6:	4904      	ldr	r1, [pc, #16]	@ (80078c8 <subfunct_clear+0x20>)
 80078b8:	4804      	ldr	r0, [pc, #16]	@ (80078cc <subfunct_clear+0x24>)
 80078ba:	f7fc faaf 	bl	8003e1c <HAL_UART_Transmit>
}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	200000d8 	.word	0x200000d8
 80078cc:	20000524 	.word	0x20000524

080078d0 <debug>:

/************************************************************************************************
 * 										DEBUG
 *************************************************************************************************/

void debug(char *debugType, char *message) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]

	printf("%-15s%s| %s\r\n", debugType, D_RESET, message);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	4a04      	ldr	r2, [pc, #16]	@ (80078f0 <debug+0x20>)
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4804      	ldr	r0, [pc, #16]	@ (80078f4 <debug+0x24>)
 80078e2:	f000 f8cb 	bl	8007a7c <iprintf>

}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	08008c24 	.word	0x08008c24
 80078f4:	08008ca8 	.word	0x08008ca8

080078f8 <std>:
 80078f8:	2300      	movs	r3, #0
 80078fa:	b510      	push	{r4, lr}
 80078fc:	4604      	mov	r4, r0
 80078fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007906:	6083      	str	r3, [r0, #8]
 8007908:	8181      	strh	r1, [r0, #12]
 800790a:	6643      	str	r3, [r0, #100]	@ 0x64
 800790c:	81c2      	strh	r2, [r0, #14]
 800790e:	6183      	str	r3, [r0, #24]
 8007910:	4619      	mov	r1, r3
 8007912:	2208      	movs	r2, #8
 8007914:	305c      	adds	r0, #92	@ 0x5c
 8007916:	f000 f97d 	bl	8007c14 <memset>
 800791a:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <std+0x58>)
 800791c:	6263      	str	r3, [r4, #36]	@ 0x24
 800791e:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <std+0x5c>)
 8007920:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007922:	4b0d      	ldr	r3, [pc, #52]	@ (8007958 <std+0x60>)
 8007924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007926:	4b0d      	ldr	r3, [pc, #52]	@ (800795c <std+0x64>)
 8007928:	6323      	str	r3, [r4, #48]	@ 0x30
 800792a:	4b0d      	ldr	r3, [pc, #52]	@ (8007960 <std+0x68>)
 800792c:	6224      	str	r4, [r4, #32]
 800792e:	429c      	cmp	r4, r3
 8007930:	d006      	beq.n	8007940 <std+0x48>
 8007932:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007936:	4294      	cmp	r4, r2
 8007938:	d002      	beq.n	8007940 <std+0x48>
 800793a:	33d0      	adds	r3, #208	@ 0xd0
 800793c:	429c      	cmp	r4, r3
 800793e:	d105      	bne.n	800794c <std+0x54>
 8007940:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007948:	f000 b9ec 	b.w	8007d24 <__retarget_lock_init_recursive>
 800794c:	bd10      	pop	{r4, pc}
 800794e:	bf00      	nop
 8007950:	08008661 	.word	0x08008661
 8007954:	08008683 	.word	0x08008683
 8007958:	080086bb 	.word	0x080086bb
 800795c:	080086df 	.word	0x080086df
 8007960:	200055e0 	.word	0x200055e0

08007964 <stdio_exit_handler>:
 8007964:	4a02      	ldr	r2, [pc, #8]	@ (8007970 <stdio_exit_handler+0xc>)
 8007966:	4903      	ldr	r1, [pc, #12]	@ (8007974 <stdio_exit_handler+0x10>)
 8007968:	4803      	ldr	r0, [pc, #12]	@ (8007978 <stdio_exit_handler+0x14>)
 800796a:	f000 b869 	b.w	8007a40 <_fwalk_sglue>
 800796e:	bf00      	nop
 8007970:	200000e0 	.word	0x200000e0
 8007974:	080085f9 	.word	0x080085f9
 8007978:	200000f0 	.word	0x200000f0

0800797c <cleanup_stdio>:
 800797c:	6841      	ldr	r1, [r0, #4]
 800797e:	4b0c      	ldr	r3, [pc, #48]	@ (80079b0 <cleanup_stdio+0x34>)
 8007980:	4299      	cmp	r1, r3
 8007982:	b510      	push	{r4, lr}
 8007984:	4604      	mov	r4, r0
 8007986:	d001      	beq.n	800798c <cleanup_stdio+0x10>
 8007988:	f000 fe36 	bl	80085f8 <_fflush_r>
 800798c:	68a1      	ldr	r1, [r4, #8]
 800798e:	4b09      	ldr	r3, [pc, #36]	@ (80079b4 <cleanup_stdio+0x38>)
 8007990:	4299      	cmp	r1, r3
 8007992:	d002      	beq.n	800799a <cleanup_stdio+0x1e>
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fe2f 	bl	80085f8 <_fflush_r>
 800799a:	68e1      	ldr	r1, [r4, #12]
 800799c:	4b06      	ldr	r3, [pc, #24]	@ (80079b8 <cleanup_stdio+0x3c>)
 800799e:	4299      	cmp	r1, r3
 80079a0:	d004      	beq.n	80079ac <cleanup_stdio+0x30>
 80079a2:	4620      	mov	r0, r4
 80079a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a8:	f000 be26 	b.w	80085f8 <_fflush_r>
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	bf00      	nop
 80079b0:	200055e0 	.word	0x200055e0
 80079b4:	20005648 	.word	0x20005648
 80079b8:	200056b0 	.word	0x200056b0

080079bc <global_stdio_init.part.0>:
 80079bc:	b510      	push	{r4, lr}
 80079be:	4b0b      	ldr	r3, [pc, #44]	@ (80079ec <global_stdio_init.part.0+0x30>)
 80079c0:	4c0b      	ldr	r4, [pc, #44]	@ (80079f0 <global_stdio_init.part.0+0x34>)
 80079c2:	4a0c      	ldr	r2, [pc, #48]	@ (80079f4 <global_stdio_init.part.0+0x38>)
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	4620      	mov	r0, r4
 80079c8:	2200      	movs	r2, #0
 80079ca:	2104      	movs	r1, #4
 80079cc:	f7ff ff94 	bl	80078f8 <std>
 80079d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079d4:	2201      	movs	r2, #1
 80079d6:	2109      	movs	r1, #9
 80079d8:	f7ff ff8e 	bl	80078f8 <std>
 80079dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079e0:	2202      	movs	r2, #2
 80079e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e6:	2112      	movs	r1, #18
 80079e8:	f7ff bf86 	b.w	80078f8 <std>
 80079ec:	20005718 	.word	0x20005718
 80079f0:	200055e0 	.word	0x200055e0
 80079f4:	08007965 	.word	0x08007965

080079f8 <__sfp_lock_acquire>:
 80079f8:	4801      	ldr	r0, [pc, #4]	@ (8007a00 <__sfp_lock_acquire+0x8>)
 80079fa:	f000 b994 	b.w	8007d26 <__retarget_lock_acquire_recursive>
 80079fe:	bf00      	nop
 8007a00:	20005721 	.word	0x20005721

08007a04 <__sfp_lock_release>:
 8007a04:	4801      	ldr	r0, [pc, #4]	@ (8007a0c <__sfp_lock_release+0x8>)
 8007a06:	f000 b98f 	b.w	8007d28 <__retarget_lock_release_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	20005721 	.word	0x20005721

08007a10 <__sinit>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	4604      	mov	r4, r0
 8007a14:	f7ff fff0 	bl	80079f8 <__sfp_lock_acquire>
 8007a18:	6a23      	ldr	r3, [r4, #32]
 8007a1a:	b11b      	cbz	r3, 8007a24 <__sinit+0x14>
 8007a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a20:	f7ff bff0 	b.w	8007a04 <__sfp_lock_release>
 8007a24:	4b04      	ldr	r3, [pc, #16]	@ (8007a38 <__sinit+0x28>)
 8007a26:	6223      	str	r3, [r4, #32]
 8007a28:	4b04      	ldr	r3, [pc, #16]	@ (8007a3c <__sinit+0x2c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f5      	bne.n	8007a1c <__sinit+0xc>
 8007a30:	f7ff ffc4 	bl	80079bc <global_stdio_init.part.0>
 8007a34:	e7f2      	b.n	8007a1c <__sinit+0xc>
 8007a36:	bf00      	nop
 8007a38:	0800797d 	.word	0x0800797d
 8007a3c:	20005718 	.word	0x20005718

08007a40 <_fwalk_sglue>:
 8007a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a44:	4607      	mov	r7, r0
 8007a46:	4688      	mov	r8, r1
 8007a48:	4614      	mov	r4, r2
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a50:	f1b9 0901 	subs.w	r9, r9, #1
 8007a54:	d505      	bpl.n	8007a62 <_fwalk_sglue+0x22>
 8007a56:	6824      	ldr	r4, [r4, #0]
 8007a58:	2c00      	cmp	r4, #0
 8007a5a:	d1f7      	bne.n	8007a4c <_fwalk_sglue+0xc>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a62:	89ab      	ldrh	r3, [r5, #12]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d907      	bls.n	8007a78 <_fwalk_sglue+0x38>
 8007a68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	d003      	beq.n	8007a78 <_fwalk_sglue+0x38>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4638      	mov	r0, r7
 8007a74:	47c0      	blx	r8
 8007a76:	4306      	orrs	r6, r0
 8007a78:	3568      	adds	r5, #104	@ 0x68
 8007a7a:	e7e9      	b.n	8007a50 <_fwalk_sglue+0x10>

08007a7c <iprintf>:
 8007a7c:	b40f      	push	{r0, r1, r2, r3}
 8007a7e:	b507      	push	{r0, r1, r2, lr}
 8007a80:	4906      	ldr	r1, [pc, #24]	@ (8007a9c <iprintf+0x20>)
 8007a82:	ab04      	add	r3, sp, #16
 8007a84:	6808      	ldr	r0, [r1, #0]
 8007a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8a:	6881      	ldr	r1, [r0, #8]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	f000 f9df 	bl	8007e50 <_vfiprintf_r>
 8007a92:	b003      	add	sp, #12
 8007a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a98:	b004      	add	sp, #16
 8007a9a:	4770      	bx	lr
 8007a9c:	200000ec 	.word	0x200000ec

08007aa0 <_puts_r>:
 8007aa0:	6a03      	ldr	r3, [r0, #32]
 8007aa2:	b570      	push	{r4, r5, r6, lr}
 8007aa4:	6884      	ldr	r4, [r0, #8]
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	460e      	mov	r6, r1
 8007aaa:	b90b      	cbnz	r3, 8007ab0 <_puts_r+0x10>
 8007aac:	f7ff ffb0 	bl	8007a10 <__sinit>
 8007ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ab2:	07db      	lsls	r3, r3, #31
 8007ab4:	d405      	bmi.n	8007ac2 <_puts_r+0x22>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	0598      	lsls	r0, r3, #22
 8007aba:	d402      	bmi.n	8007ac2 <_puts_r+0x22>
 8007abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007abe:	f000 f932 	bl	8007d26 <__retarget_lock_acquire_recursive>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	0719      	lsls	r1, r3, #28
 8007ac6:	d502      	bpl.n	8007ace <_puts_r+0x2e>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d135      	bne.n	8007b3a <_puts_r+0x9a>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 fe59 	bl	8008788 <__swsetup_r>
 8007ad6:	b380      	cbz	r0, 8007b3a <_puts_r+0x9a>
 8007ad8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007adc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ade:	07da      	lsls	r2, r3, #31
 8007ae0:	d405      	bmi.n	8007aee <_puts_r+0x4e>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	059b      	lsls	r3, r3, #22
 8007ae6:	d402      	bmi.n	8007aee <_puts_r+0x4e>
 8007ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aea:	f000 f91d 	bl	8007d28 <__retarget_lock_release_recursive>
 8007aee:	4628      	mov	r0, r5
 8007af0:	bd70      	pop	{r4, r5, r6, pc}
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da04      	bge.n	8007b00 <_puts_r+0x60>
 8007af6:	69a2      	ldr	r2, [r4, #24]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	dc17      	bgt.n	8007b2c <_puts_r+0x8c>
 8007afc:	290a      	cmp	r1, #10
 8007afe:	d015      	beq.n	8007b2c <_puts_r+0x8c>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	6022      	str	r2, [r4, #0]
 8007b06:	7019      	strb	r1, [r3, #0]
 8007b08:	68a3      	ldr	r3, [r4, #8]
 8007b0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	60a3      	str	r3, [r4, #8]
 8007b12:	2900      	cmp	r1, #0
 8007b14:	d1ed      	bne.n	8007af2 <_puts_r+0x52>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da11      	bge.n	8007b3e <_puts_r+0x9e>
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	210a      	movs	r1, #10
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fdf4 	bl	800870c <__swbuf_r>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d0d7      	beq.n	8007ad8 <_puts_r+0x38>
 8007b28:	250a      	movs	r5, #10
 8007b2a:	e7d7      	b.n	8007adc <_puts_r+0x3c>
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fdec 	bl	800870c <__swbuf_r>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d1e7      	bne.n	8007b08 <_puts_r+0x68>
 8007b38:	e7ce      	b.n	8007ad8 <_puts_r+0x38>
 8007b3a:	3e01      	subs	r6, #1
 8007b3c:	e7e4      	b.n	8007b08 <_puts_r+0x68>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	6022      	str	r2, [r4, #0]
 8007b44:	220a      	movs	r2, #10
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e7ee      	b.n	8007b28 <_puts_r+0x88>
	...

08007b4c <puts>:
 8007b4c:	4b02      	ldr	r3, [pc, #8]	@ (8007b58 <puts+0xc>)
 8007b4e:	4601      	mov	r1, r0
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	f7ff bfa5 	b.w	8007aa0 <_puts_r>
 8007b56:	bf00      	nop
 8007b58:	200000ec 	.word	0x200000ec

08007b5c <strtok>:
 8007b5c:	4b16      	ldr	r3, [pc, #88]	@ (8007bb8 <strtok+0x5c>)
 8007b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	681f      	ldr	r7, [r3, #0]
 8007b64:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007b66:	4605      	mov	r5, r0
 8007b68:	460e      	mov	r6, r1
 8007b6a:	b9ec      	cbnz	r4, 8007ba8 <strtok+0x4c>
 8007b6c:	2050      	movs	r0, #80	@ 0x50
 8007b6e:	f000 fa87 	bl	8008080 <malloc>
 8007b72:	4602      	mov	r2, r0
 8007b74:	6478      	str	r0, [r7, #68]	@ 0x44
 8007b76:	b920      	cbnz	r0, 8007b82 <strtok+0x26>
 8007b78:	4b10      	ldr	r3, [pc, #64]	@ (8007bbc <strtok+0x60>)
 8007b7a:	4811      	ldr	r0, [pc, #68]	@ (8007bc0 <strtok+0x64>)
 8007b7c:	215b      	movs	r1, #91	@ 0x5b
 8007b7e:	f000 f8d5 	bl	8007d2c <__assert_func>
 8007b82:	e9c0 4400 	strd	r4, r4, [r0]
 8007b86:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007b8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007b8e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007b92:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007b96:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007b9a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007b9e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007ba2:	6184      	str	r4, [r0, #24]
 8007ba4:	7704      	strb	r4, [r0, #28]
 8007ba6:	6244      	str	r4, [r0, #36]	@ 0x24
 8007ba8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb4:	f000 b806 	b.w	8007bc4 <__strtok_r>
 8007bb8:	200000ec 	.word	0x200000ec
 8007bbc:	08008d00 	.word	0x08008d00
 8007bc0:	08008d17 	.word	0x08008d17

08007bc4 <__strtok_r>:
 8007bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	b908      	cbnz	r0, 8007bce <__strtok_r+0xa>
 8007bca:	6814      	ldr	r4, [r2, #0]
 8007bcc:	b144      	cbz	r4, 8007be0 <__strtok_r+0x1c>
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007bda:	b91e      	cbnz	r6, 8007be4 <__strtok_r+0x20>
 8007bdc:	b965      	cbnz	r5, 8007bf8 <__strtok_r+0x34>
 8007bde:	6015      	str	r5, [r2, #0]
 8007be0:	2000      	movs	r0, #0
 8007be2:	e005      	b.n	8007bf0 <__strtok_r+0x2c>
 8007be4:	42b5      	cmp	r5, r6
 8007be6:	d1f6      	bne.n	8007bd6 <__strtok_r+0x12>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f0      	bne.n	8007bce <__strtok_r+0xa>
 8007bec:	6014      	str	r4, [r2, #0]
 8007bee:	7003      	strb	r3, [r0, #0]
 8007bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf2:	461c      	mov	r4, r3
 8007bf4:	e00c      	b.n	8007c10 <__strtok_r+0x4c>
 8007bf6:	b915      	cbnz	r5, 8007bfe <__strtok_r+0x3a>
 8007bf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bfc:	460e      	mov	r6, r1
 8007bfe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007c02:	42ab      	cmp	r3, r5
 8007c04:	d1f7      	bne.n	8007bf6 <__strtok_r+0x32>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f3      	beq.n	8007bf2 <__strtok_r+0x2e>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007c10:	6014      	str	r4, [r2, #0]
 8007c12:	e7ed      	b.n	8007bf0 <__strtok_r+0x2c>

08007c14 <memset>:
 8007c14:	4402      	add	r2, r0
 8007c16:	4603      	mov	r3, r0
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d100      	bne.n	8007c1e <memset+0xa>
 8007c1c:	4770      	bx	lr
 8007c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c22:	e7f9      	b.n	8007c18 <memset+0x4>

08007c24 <_reclaim_reent>:
 8007c24:	4b29      	ldr	r3, [pc, #164]	@ (8007ccc <_reclaim_reent+0xa8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4283      	cmp	r3, r0
 8007c2a:	b570      	push	{r4, r5, r6, lr}
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	d04b      	beq.n	8007cc8 <_reclaim_reent+0xa4>
 8007c30:	69c3      	ldr	r3, [r0, #28]
 8007c32:	b1ab      	cbz	r3, 8007c60 <_reclaim_reent+0x3c>
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	b16b      	cbz	r3, 8007c54 <_reclaim_reent+0x30>
 8007c38:	2500      	movs	r5, #0
 8007c3a:	69e3      	ldr	r3, [r4, #28]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	5959      	ldr	r1, [r3, r5]
 8007c40:	2900      	cmp	r1, #0
 8007c42:	d13b      	bne.n	8007cbc <_reclaim_reent+0x98>
 8007c44:	3504      	adds	r5, #4
 8007c46:	2d80      	cmp	r5, #128	@ 0x80
 8007c48:	d1f7      	bne.n	8007c3a <_reclaim_reent+0x16>
 8007c4a:	69e3      	ldr	r3, [r4, #28]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	68d9      	ldr	r1, [r3, #12]
 8007c50:	f000 f88a 	bl	8007d68 <_free_r>
 8007c54:	69e3      	ldr	r3, [r4, #28]
 8007c56:	6819      	ldr	r1, [r3, #0]
 8007c58:	b111      	cbz	r1, 8007c60 <_reclaim_reent+0x3c>
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 f884 	bl	8007d68 <_free_r>
 8007c60:	6961      	ldr	r1, [r4, #20]
 8007c62:	b111      	cbz	r1, 8007c6a <_reclaim_reent+0x46>
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 f87f 	bl	8007d68 <_free_r>
 8007c6a:	69e1      	ldr	r1, [r4, #28]
 8007c6c:	b111      	cbz	r1, 8007c74 <_reclaim_reent+0x50>
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 f87a 	bl	8007d68 <_free_r>
 8007c74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c76:	b111      	cbz	r1, 8007c7e <_reclaim_reent+0x5a>
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 f875 	bl	8007d68 <_free_r>
 8007c7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c80:	b111      	cbz	r1, 8007c88 <_reclaim_reent+0x64>
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f870 	bl	8007d68 <_free_r>
 8007c88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c8a:	b111      	cbz	r1, 8007c92 <_reclaim_reent+0x6e>
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 f86b 	bl	8007d68 <_free_r>
 8007c92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c94:	b111      	cbz	r1, 8007c9c <_reclaim_reent+0x78>
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 f866 	bl	8007d68 <_free_r>
 8007c9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c9e:	b111      	cbz	r1, 8007ca6 <_reclaim_reent+0x82>
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 f861 	bl	8007d68 <_free_r>
 8007ca6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007ca8:	b111      	cbz	r1, 8007cb0 <_reclaim_reent+0x8c>
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 f85c 	bl	8007d68 <_free_r>
 8007cb0:	6a23      	ldr	r3, [r4, #32]
 8007cb2:	b14b      	cbz	r3, 8007cc8 <_reclaim_reent+0xa4>
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cba:	4718      	bx	r3
 8007cbc:	680e      	ldr	r6, [r1, #0]
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 f852 	bl	8007d68 <_free_r>
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	e7bb      	b.n	8007c40 <_reclaim_reent+0x1c>
 8007cc8:	bd70      	pop	{r4, r5, r6, pc}
 8007cca:	bf00      	nop
 8007ccc:	200000ec 	.word	0x200000ec

08007cd0 <__errno>:
 8007cd0:	4b01      	ldr	r3, [pc, #4]	@ (8007cd8 <__errno+0x8>)
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	200000ec 	.word	0x200000ec

08007cdc <__libc_init_array>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	4d0d      	ldr	r5, [pc, #52]	@ (8007d14 <__libc_init_array+0x38>)
 8007ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8007d18 <__libc_init_array+0x3c>)
 8007ce2:	1b64      	subs	r4, r4, r5
 8007ce4:	10a4      	asrs	r4, r4, #2
 8007ce6:	2600      	movs	r6, #0
 8007ce8:	42a6      	cmp	r6, r4
 8007cea:	d109      	bne.n	8007d00 <__libc_init_array+0x24>
 8007cec:	4d0b      	ldr	r5, [pc, #44]	@ (8007d1c <__libc_init_array+0x40>)
 8007cee:	4c0c      	ldr	r4, [pc, #48]	@ (8007d20 <__libc_init_array+0x44>)
 8007cf0:	f000 fec6 	bl	8008a80 <_init>
 8007cf4:	1b64      	subs	r4, r4, r5
 8007cf6:	10a4      	asrs	r4, r4, #2
 8007cf8:	2600      	movs	r6, #0
 8007cfa:	42a6      	cmp	r6, r4
 8007cfc:	d105      	bne.n	8007d0a <__libc_init_array+0x2e>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d04:	4798      	blx	r3
 8007d06:	3601      	adds	r6, #1
 8007d08:	e7ee      	b.n	8007ce8 <__libc_init_array+0xc>
 8007d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0e:	4798      	blx	r3
 8007d10:	3601      	adds	r6, #1
 8007d12:	e7f2      	b.n	8007cfa <__libc_init_array+0x1e>
 8007d14:	08008de8 	.word	0x08008de8
 8007d18:	08008de8 	.word	0x08008de8
 8007d1c:	08008de8 	.word	0x08008de8
 8007d20:	08008dec 	.word	0x08008dec

08007d24 <__retarget_lock_init_recursive>:
 8007d24:	4770      	bx	lr

08007d26 <__retarget_lock_acquire_recursive>:
 8007d26:	4770      	bx	lr

08007d28 <__retarget_lock_release_recursive>:
 8007d28:	4770      	bx	lr
	...

08007d2c <__assert_func>:
 8007d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d2e:	4614      	mov	r4, r2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4b09      	ldr	r3, [pc, #36]	@ (8007d58 <__assert_func+0x2c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4605      	mov	r5, r0
 8007d38:	68d8      	ldr	r0, [r3, #12]
 8007d3a:	b954      	cbnz	r4, 8007d52 <__assert_func+0x26>
 8007d3c:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <__assert_func+0x30>)
 8007d3e:	461c      	mov	r4, r3
 8007d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d44:	9100      	str	r1, [sp, #0]
 8007d46:	462b      	mov	r3, r5
 8007d48:	4905      	ldr	r1, [pc, #20]	@ (8007d60 <__assert_func+0x34>)
 8007d4a:	f000 fccd 	bl	80086e8 <fiprintf>
 8007d4e:	f000 fe4b 	bl	80089e8 <abort>
 8007d52:	4b04      	ldr	r3, [pc, #16]	@ (8007d64 <__assert_func+0x38>)
 8007d54:	e7f4      	b.n	8007d40 <__assert_func+0x14>
 8007d56:	bf00      	nop
 8007d58:	200000ec 	.word	0x200000ec
 8007d5c:	08008dac 	.word	0x08008dac
 8007d60:	08008d7e 	.word	0x08008d7e
 8007d64:	08008d71 	.word	0x08008d71

08007d68 <_free_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d041      	beq.n	8007df4 <_free_r+0x8c>
 8007d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d74:	1f0c      	subs	r4, r1, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bfb8      	it	lt
 8007d7a:	18e4      	addlt	r4, r4, r3
 8007d7c:	f000 fc64 	bl	8008648 <__malloc_lock>
 8007d80:	4a1d      	ldr	r2, [pc, #116]	@ (8007df8 <_free_r+0x90>)
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	b933      	cbnz	r3, 8007d94 <_free_r+0x2c>
 8007d86:	6063      	str	r3, [r4, #4]
 8007d88:	6014      	str	r4, [r2, #0]
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d90:	f000 bc60 	b.w	8008654 <__malloc_unlock>
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d908      	bls.n	8007daa <_free_r+0x42>
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	1821      	adds	r1, r4, r0
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	bf01      	itttt	eq
 8007da0:	6819      	ldreq	r1, [r3, #0]
 8007da2:	685b      	ldreq	r3, [r3, #4]
 8007da4:	1809      	addeq	r1, r1, r0
 8007da6:	6021      	streq	r1, [r4, #0]
 8007da8:	e7ed      	b.n	8007d86 <_free_r+0x1e>
 8007daa:	461a      	mov	r2, r3
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	b10b      	cbz	r3, 8007db4 <_free_r+0x4c>
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d9fa      	bls.n	8007daa <_free_r+0x42>
 8007db4:	6811      	ldr	r1, [r2, #0]
 8007db6:	1850      	adds	r0, r2, r1
 8007db8:	42a0      	cmp	r0, r4
 8007dba:	d10b      	bne.n	8007dd4 <_free_r+0x6c>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	4401      	add	r1, r0
 8007dc0:	1850      	adds	r0, r2, r1
 8007dc2:	4283      	cmp	r3, r0
 8007dc4:	6011      	str	r1, [r2, #0]
 8007dc6:	d1e0      	bne.n	8007d8a <_free_r+0x22>
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	6053      	str	r3, [r2, #4]
 8007dce:	4408      	add	r0, r1
 8007dd0:	6010      	str	r0, [r2, #0]
 8007dd2:	e7da      	b.n	8007d8a <_free_r+0x22>
 8007dd4:	d902      	bls.n	8007ddc <_free_r+0x74>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	e7d6      	b.n	8007d8a <_free_r+0x22>
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	1821      	adds	r1, r4, r0
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf04      	itt	eq
 8007de4:	6819      	ldreq	r1, [r3, #0]
 8007de6:	685b      	ldreq	r3, [r3, #4]
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	bf04      	itt	eq
 8007dec:	1809      	addeq	r1, r1, r0
 8007dee:	6021      	streq	r1, [r4, #0]
 8007df0:	6054      	str	r4, [r2, #4]
 8007df2:	e7ca      	b.n	8007d8a <_free_r+0x22>
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	bf00      	nop
 8007df8:	20005728 	.word	0x20005728

08007dfc <__sfputc_r>:
 8007dfc:	6893      	ldr	r3, [r2, #8]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	b410      	push	{r4}
 8007e04:	6093      	str	r3, [r2, #8]
 8007e06:	da08      	bge.n	8007e1a <__sfputc_r+0x1e>
 8007e08:	6994      	ldr	r4, [r2, #24]
 8007e0a:	42a3      	cmp	r3, r4
 8007e0c:	db01      	blt.n	8007e12 <__sfputc_r+0x16>
 8007e0e:	290a      	cmp	r1, #10
 8007e10:	d103      	bne.n	8007e1a <__sfputc_r+0x1e>
 8007e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e16:	f000 bc79 	b.w	800870c <__swbuf_r>
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	1c58      	adds	r0, r3, #1
 8007e1e:	6010      	str	r0, [r2, #0]
 8007e20:	7019      	strb	r1, [r3, #0]
 8007e22:	4608      	mov	r0, r1
 8007e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <__sfputs_r>:
 8007e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	460f      	mov	r7, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	18d5      	adds	r5, r2, r3
 8007e34:	42ac      	cmp	r4, r5
 8007e36:	d101      	bne.n	8007e3c <__sfputs_r+0x12>
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e007      	b.n	8007e4c <__sfputs_r+0x22>
 8007e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e40:	463a      	mov	r2, r7
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7ff ffda 	bl	8007dfc <__sfputc_r>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d1f3      	bne.n	8007e34 <__sfputs_r+0xa>
 8007e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e50 <_vfiprintf_r>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	460d      	mov	r5, r1
 8007e56:	b09d      	sub	sp, #116	@ 0x74
 8007e58:	4614      	mov	r4, r2
 8007e5a:	4698      	mov	r8, r3
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	b118      	cbz	r0, 8007e68 <_vfiprintf_r+0x18>
 8007e60:	6a03      	ldr	r3, [r0, #32]
 8007e62:	b90b      	cbnz	r3, 8007e68 <_vfiprintf_r+0x18>
 8007e64:	f7ff fdd4 	bl	8007a10 <__sinit>
 8007e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e6a:	07d9      	lsls	r1, r3, #31
 8007e6c:	d405      	bmi.n	8007e7a <_vfiprintf_r+0x2a>
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	059a      	lsls	r2, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_vfiprintf_r+0x2a>
 8007e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e76:	f7ff ff56 	bl	8007d26 <__retarget_lock_acquire_recursive>
 8007e7a:	89ab      	ldrh	r3, [r5, #12]
 8007e7c:	071b      	lsls	r3, r3, #28
 8007e7e:	d501      	bpl.n	8007e84 <_vfiprintf_r+0x34>
 8007e80:	692b      	ldr	r3, [r5, #16]
 8007e82:	b99b      	cbnz	r3, 8007eac <_vfiprintf_r+0x5c>
 8007e84:	4629      	mov	r1, r5
 8007e86:	4630      	mov	r0, r6
 8007e88:	f000 fc7e 	bl	8008788 <__swsetup_r>
 8007e8c:	b170      	cbz	r0, 8007eac <_vfiprintf_r+0x5c>
 8007e8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e90:	07dc      	lsls	r4, r3, #31
 8007e92:	d504      	bpl.n	8007e9e <_vfiprintf_r+0x4e>
 8007e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e98:	b01d      	add	sp, #116	@ 0x74
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	89ab      	ldrh	r3, [r5, #12]
 8007ea0:	0598      	lsls	r0, r3, #22
 8007ea2:	d4f7      	bmi.n	8007e94 <_vfiprintf_r+0x44>
 8007ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ea6:	f7ff ff3f 	bl	8007d28 <__retarget_lock_release_recursive>
 8007eaa:	e7f3      	b.n	8007e94 <_vfiprintf_r+0x44>
 8007eac:	2300      	movs	r3, #0
 8007eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eba:	2330      	movs	r3, #48	@ 0x30
 8007ebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800806c <_vfiprintf_r+0x21c>
 8007ec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ec4:	f04f 0901 	mov.w	r9, #1
 8007ec8:	4623      	mov	r3, r4
 8007eca:	469a      	mov	sl, r3
 8007ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ed0:	b10a      	cbz	r2, 8007ed6 <_vfiprintf_r+0x86>
 8007ed2:	2a25      	cmp	r2, #37	@ 0x25
 8007ed4:	d1f9      	bne.n	8007eca <_vfiprintf_r+0x7a>
 8007ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eda:	d00b      	beq.n	8007ef4 <_vfiprintf_r+0xa4>
 8007edc:	465b      	mov	r3, fp
 8007ede:	4622      	mov	r2, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff ffa1 	bl	8007e2a <__sfputs_r>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	f000 80a7 	beq.w	800803c <_vfiprintf_r+0x1ec>
 8007eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef0:	445a      	add	r2, fp
 8007ef2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 809f 	beq.w	800803c <_vfiprintf_r+0x1ec>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f08:	f10a 0a01 	add.w	sl, sl, #1
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	9307      	str	r3, [sp, #28]
 8007f10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f14:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f16:	4654      	mov	r4, sl
 8007f18:	2205      	movs	r2, #5
 8007f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1e:	4853      	ldr	r0, [pc, #332]	@ (800806c <_vfiprintf_r+0x21c>)
 8007f20:	f7f8 f96e 	bl	8000200 <memchr>
 8007f24:	9a04      	ldr	r2, [sp, #16]
 8007f26:	b9d8      	cbnz	r0, 8007f60 <_vfiprintf_r+0x110>
 8007f28:	06d1      	lsls	r1, r2, #27
 8007f2a:	bf44      	itt	mi
 8007f2c:	2320      	movmi	r3, #32
 8007f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f32:	0713      	lsls	r3, r2, #28
 8007f34:	bf44      	itt	mi
 8007f36:	232b      	movmi	r3, #43	@ 0x2b
 8007f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f42:	d015      	beq.n	8007f70 <_vfiprintf_r+0x120>
 8007f44:	9a07      	ldr	r2, [sp, #28]
 8007f46:	4654      	mov	r4, sl
 8007f48:	2000      	movs	r0, #0
 8007f4a:	f04f 0c0a 	mov.w	ip, #10
 8007f4e:	4621      	mov	r1, r4
 8007f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f54:	3b30      	subs	r3, #48	@ 0x30
 8007f56:	2b09      	cmp	r3, #9
 8007f58:	d94b      	bls.n	8007ff2 <_vfiprintf_r+0x1a2>
 8007f5a:	b1b0      	cbz	r0, 8007f8a <_vfiprintf_r+0x13a>
 8007f5c:	9207      	str	r2, [sp, #28]
 8007f5e:	e014      	b.n	8007f8a <_vfiprintf_r+0x13a>
 8007f60:	eba0 0308 	sub.w	r3, r0, r8
 8007f64:	fa09 f303 	lsl.w	r3, r9, r3
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	46a2      	mov	sl, r4
 8007f6e:	e7d2      	b.n	8007f16 <_vfiprintf_r+0xc6>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	1d19      	adds	r1, r3, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	9103      	str	r1, [sp, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bfbb      	ittet	lt
 8007f7c:	425b      	neglt	r3, r3
 8007f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f82:	9307      	strge	r3, [sp, #28]
 8007f84:	9307      	strlt	r3, [sp, #28]
 8007f86:	bfb8      	it	lt
 8007f88:	9204      	strlt	r2, [sp, #16]
 8007f8a:	7823      	ldrb	r3, [r4, #0]
 8007f8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f8e:	d10a      	bne.n	8007fa6 <_vfiprintf_r+0x156>
 8007f90:	7863      	ldrb	r3, [r4, #1]
 8007f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f94:	d132      	bne.n	8007ffc <_vfiprintf_r+0x1ac>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	1d1a      	adds	r2, r3, #4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	9203      	str	r2, [sp, #12]
 8007f9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fa2:	3402      	adds	r4, #2
 8007fa4:	9305      	str	r3, [sp, #20]
 8007fa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800807c <_vfiprintf_r+0x22c>
 8007faa:	7821      	ldrb	r1, [r4, #0]
 8007fac:	2203      	movs	r2, #3
 8007fae:	4650      	mov	r0, sl
 8007fb0:	f7f8 f926 	bl	8000200 <memchr>
 8007fb4:	b138      	cbz	r0, 8007fc6 <_vfiprintf_r+0x176>
 8007fb6:	9b04      	ldr	r3, [sp, #16]
 8007fb8:	eba0 000a 	sub.w	r0, r0, sl
 8007fbc:	2240      	movs	r2, #64	@ 0x40
 8007fbe:	4082      	lsls	r2, r0
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	3401      	adds	r4, #1
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fca:	4829      	ldr	r0, [pc, #164]	@ (8008070 <_vfiprintf_r+0x220>)
 8007fcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fd0:	2206      	movs	r2, #6
 8007fd2:	f7f8 f915 	bl	8000200 <memchr>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d03f      	beq.n	800805a <_vfiprintf_r+0x20a>
 8007fda:	4b26      	ldr	r3, [pc, #152]	@ (8008074 <_vfiprintf_r+0x224>)
 8007fdc:	bb1b      	cbnz	r3, 8008026 <_vfiprintf_r+0x1d6>
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	3307      	adds	r3, #7
 8007fe2:	f023 0307 	bic.w	r3, r3, #7
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	9303      	str	r3, [sp, #12]
 8007fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fec:	443b      	add	r3, r7
 8007fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff0:	e76a      	b.n	8007ec8 <_vfiprintf_r+0x78>
 8007ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	e7a8      	b.n	8007f4e <_vfiprintf_r+0xfe>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	3401      	adds	r4, #1
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	4619      	mov	r1, r3
 8008004:	f04f 0c0a 	mov.w	ip, #10
 8008008:	4620      	mov	r0, r4
 800800a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800800e:	3a30      	subs	r2, #48	@ 0x30
 8008010:	2a09      	cmp	r2, #9
 8008012:	d903      	bls.n	800801c <_vfiprintf_r+0x1cc>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0c6      	beq.n	8007fa6 <_vfiprintf_r+0x156>
 8008018:	9105      	str	r1, [sp, #20]
 800801a:	e7c4      	b.n	8007fa6 <_vfiprintf_r+0x156>
 800801c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008020:	4604      	mov	r4, r0
 8008022:	2301      	movs	r3, #1
 8008024:	e7f0      	b.n	8008008 <_vfiprintf_r+0x1b8>
 8008026:	ab03      	add	r3, sp, #12
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	462a      	mov	r2, r5
 800802c:	4b12      	ldr	r3, [pc, #72]	@ (8008078 <_vfiprintf_r+0x228>)
 800802e:	a904      	add	r1, sp, #16
 8008030:	4630      	mov	r0, r6
 8008032:	f3af 8000 	nop.w
 8008036:	4607      	mov	r7, r0
 8008038:	1c78      	adds	r0, r7, #1
 800803a:	d1d6      	bne.n	8007fea <_vfiprintf_r+0x19a>
 800803c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800803e:	07d9      	lsls	r1, r3, #31
 8008040:	d405      	bmi.n	800804e <_vfiprintf_r+0x1fe>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	059a      	lsls	r2, r3, #22
 8008046:	d402      	bmi.n	800804e <_vfiprintf_r+0x1fe>
 8008048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800804a:	f7ff fe6d 	bl	8007d28 <__retarget_lock_release_recursive>
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	065b      	lsls	r3, r3, #25
 8008052:	f53f af1f 	bmi.w	8007e94 <_vfiprintf_r+0x44>
 8008056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008058:	e71e      	b.n	8007e98 <_vfiprintf_r+0x48>
 800805a:	ab03      	add	r3, sp, #12
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	462a      	mov	r2, r5
 8008060:	4b05      	ldr	r3, [pc, #20]	@ (8008078 <_vfiprintf_r+0x228>)
 8008062:	a904      	add	r1, sp, #16
 8008064:	4630      	mov	r0, r6
 8008066:	f000 f923 	bl	80082b0 <_printf_i>
 800806a:	e7e4      	b.n	8008036 <_vfiprintf_r+0x1e6>
 800806c:	08008dad 	.word	0x08008dad
 8008070:	08008db7 	.word	0x08008db7
 8008074:	00000000 	.word	0x00000000
 8008078:	08007e2b 	.word	0x08007e2b
 800807c:	08008db3 	.word	0x08008db3

08008080 <malloc>:
 8008080:	4b02      	ldr	r3, [pc, #8]	@ (800808c <malloc+0xc>)
 8008082:	4601      	mov	r1, r0
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f000 b825 	b.w	80080d4 <_malloc_r>
 800808a:	bf00      	nop
 800808c:	200000ec 	.word	0x200000ec

08008090 <sbrk_aligned>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	4e0f      	ldr	r6, [pc, #60]	@ (80080d0 <sbrk_aligned+0x40>)
 8008094:	460c      	mov	r4, r1
 8008096:	6831      	ldr	r1, [r6, #0]
 8008098:	4605      	mov	r5, r0
 800809a:	b911      	cbnz	r1, 80080a2 <sbrk_aligned+0x12>
 800809c:	f000 fc82 	bl	80089a4 <_sbrk_r>
 80080a0:	6030      	str	r0, [r6, #0]
 80080a2:	4621      	mov	r1, r4
 80080a4:	4628      	mov	r0, r5
 80080a6:	f000 fc7d 	bl	80089a4 <_sbrk_r>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	d103      	bne.n	80080b6 <sbrk_aligned+0x26>
 80080ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80080b2:	4620      	mov	r0, r4
 80080b4:	bd70      	pop	{r4, r5, r6, pc}
 80080b6:	1cc4      	adds	r4, r0, #3
 80080b8:	f024 0403 	bic.w	r4, r4, #3
 80080bc:	42a0      	cmp	r0, r4
 80080be:	d0f8      	beq.n	80080b2 <sbrk_aligned+0x22>
 80080c0:	1a21      	subs	r1, r4, r0
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 fc6e 	bl	80089a4 <_sbrk_r>
 80080c8:	3001      	adds	r0, #1
 80080ca:	d1f2      	bne.n	80080b2 <sbrk_aligned+0x22>
 80080cc:	e7ef      	b.n	80080ae <sbrk_aligned+0x1e>
 80080ce:	bf00      	nop
 80080d0:	20005724 	.word	0x20005724

080080d4 <_malloc_r>:
 80080d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d8:	1ccd      	adds	r5, r1, #3
 80080da:	f025 0503 	bic.w	r5, r5, #3
 80080de:	3508      	adds	r5, #8
 80080e0:	2d0c      	cmp	r5, #12
 80080e2:	bf38      	it	cc
 80080e4:	250c      	movcc	r5, #12
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	4606      	mov	r6, r0
 80080ea:	db01      	blt.n	80080f0 <_malloc_r+0x1c>
 80080ec:	42a9      	cmp	r1, r5
 80080ee:	d904      	bls.n	80080fa <_malloc_r+0x26>
 80080f0:	230c      	movs	r3, #12
 80080f2:	6033      	str	r3, [r6, #0]
 80080f4:	2000      	movs	r0, #0
 80080f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081d0 <_malloc_r+0xfc>
 80080fe:	f000 faa3 	bl	8008648 <__malloc_lock>
 8008102:	f8d8 3000 	ldr.w	r3, [r8]
 8008106:	461c      	mov	r4, r3
 8008108:	bb44      	cbnz	r4, 800815c <_malloc_r+0x88>
 800810a:	4629      	mov	r1, r5
 800810c:	4630      	mov	r0, r6
 800810e:	f7ff ffbf 	bl	8008090 <sbrk_aligned>
 8008112:	1c43      	adds	r3, r0, #1
 8008114:	4604      	mov	r4, r0
 8008116:	d158      	bne.n	80081ca <_malloc_r+0xf6>
 8008118:	f8d8 4000 	ldr.w	r4, [r8]
 800811c:	4627      	mov	r7, r4
 800811e:	2f00      	cmp	r7, #0
 8008120:	d143      	bne.n	80081aa <_malloc_r+0xd6>
 8008122:	2c00      	cmp	r4, #0
 8008124:	d04b      	beq.n	80081be <_malloc_r+0xea>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	4639      	mov	r1, r7
 800812a:	4630      	mov	r0, r6
 800812c:	eb04 0903 	add.w	r9, r4, r3
 8008130:	f000 fc38 	bl	80089a4 <_sbrk_r>
 8008134:	4581      	cmp	r9, r0
 8008136:	d142      	bne.n	80081be <_malloc_r+0xea>
 8008138:	6821      	ldr	r1, [r4, #0]
 800813a:	1a6d      	subs	r5, r5, r1
 800813c:	4629      	mov	r1, r5
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff ffa6 	bl	8008090 <sbrk_aligned>
 8008144:	3001      	adds	r0, #1
 8008146:	d03a      	beq.n	80081be <_malloc_r+0xea>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	442b      	add	r3, r5
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	f8d8 3000 	ldr.w	r3, [r8]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	bb62      	cbnz	r2, 80081b0 <_malloc_r+0xdc>
 8008156:	f8c8 7000 	str.w	r7, [r8]
 800815a:	e00f      	b.n	800817c <_malloc_r+0xa8>
 800815c:	6822      	ldr	r2, [r4, #0]
 800815e:	1b52      	subs	r2, r2, r5
 8008160:	d420      	bmi.n	80081a4 <_malloc_r+0xd0>
 8008162:	2a0b      	cmp	r2, #11
 8008164:	d917      	bls.n	8008196 <_malloc_r+0xc2>
 8008166:	1961      	adds	r1, r4, r5
 8008168:	42a3      	cmp	r3, r4
 800816a:	6025      	str	r5, [r4, #0]
 800816c:	bf18      	it	ne
 800816e:	6059      	strne	r1, [r3, #4]
 8008170:	6863      	ldr	r3, [r4, #4]
 8008172:	bf08      	it	eq
 8008174:	f8c8 1000 	streq.w	r1, [r8]
 8008178:	5162      	str	r2, [r4, r5]
 800817a:	604b      	str	r3, [r1, #4]
 800817c:	4630      	mov	r0, r6
 800817e:	f000 fa69 	bl	8008654 <__malloc_unlock>
 8008182:	f104 000b 	add.w	r0, r4, #11
 8008186:	1d23      	adds	r3, r4, #4
 8008188:	f020 0007 	bic.w	r0, r0, #7
 800818c:	1ac2      	subs	r2, r0, r3
 800818e:	bf1c      	itt	ne
 8008190:	1a1b      	subne	r3, r3, r0
 8008192:	50a3      	strne	r3, [r4, r2]
 8008194:	e7af      	b.n	80080f6 <_malloc_r+0x22>
 8008196:	6862      	ldr	r2, [r4, #4]
 8008198:	42a3      	cmp	r3, r4
 800819a:	bf0c      	ite	eq
 800819c:	f8c8 2000 	streq.w	r2, [r8]
 80081a0:	605a      	strne	r2, [r3, #4]
 80081a2:	e7eb      	b.n	800817c <_malloc_r+0xa8>
 80081a4:	4623      	mov	r3, r4
 80081a6:	6864      	ldr	r4, [r4, #4]
 80081a8:	e7ae      	b.n	8008108 <_malloc_r+0x34>
 80081aa:	463c      	mov	r4, r7
 80081ac:	687f      	ldr	r7, [r7, #4]
 80081ae:	e7b6      	b.n	800811e <_malloc_r+0x4a>
 80081b0:	461a      	mov	r2, r3
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d1fb      	bne.n	80081b0 <_malloc_r+0xdc>
 80081b8:	2300      	movs	r3, #0
 80081ba:	6053      	str	r3, [r2, #4]
 80081bc:	e7de      	b.n	800817c <_malloc_r+0xa8>
 80081be:	230c      	movs	r3, #12
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	4630      	mov	r0, r6
 80081c4:	f000 fa46 	bl	8008654 <__malloc_unlock>
 80081c8:	e794      	b.n	80080f4 <_malloc_r+0x20>
 80081ca:	6005      	str	r5, [r0, #0]
 80081cc:	e7d6      	b.n	800817c <_malloc_r+0xa8>
 80081ce:	bf00      	nop
 80081d0:	20005728 	.word	0x20005728

080081d4 <_printf_common>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	4616      	mov	r6, r2
 80081da:	4698      	mov	r8, r3
 80081dc:	688a      	ldr	r2, [r1, #8]
 80081de:	690b      	ldr	r3, [r1, #16]
 80081e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081e4:	4293      	cmp	r3, r2
 80081e6:	bfb8      	it	lt
 80081e8:	4613      	movlt	r3, r2
 80081ea:	6033      	str	r3, [r6, #0]
 80081ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081f0:	4607      	mov	r7, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	b10a      	cbz	r2, 80081fa <_printf_common+0x26>
 80081f6:	3301      	adds	r3, #1
 80081f8:	6033      	str	r3, [r6, #0]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	0699      	lsls	r1, r3, #26
 80081fe:	bf42      	ittt	mi
 8008200:	6833      	ldrmi	r3, [r6, #0]
 8008202:	3302      	addmi	r3, #2
 8008204:	6033      	strmi	r3, [r6, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	f015 0506 	ands.w	r5, r5, #6
 800820c:	d106      	bne.n	800821c <_printf_common+0x48>
 800820e:	f104 0a19 	add.w	sl, r4, #25
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	6832      	ldr	r2, [r6, #0]
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	42ab      	cmp	r3, r5
 800821a:	dc26      	bgt.n	800826a <_printf_common+0x96>
 800821c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008220:	6822      	ldr	r2, [r4, #0]
 8008222:	3b00      	subs	r3, #0
 8008224:	bf18      	it	ne
 8008226:	2301      	movne	r3, #1
 8008228:	0692      	lsls	r2, r2, #26
 800822a:	d42b      	bmi.n	8008284 <_printf_common+0xb0>
 800822c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008230:	4641      	mov	r1, r8
 8008232:	4638      	mov	r0, r7
 8008234:	47c8      	blx	r9
 8008236:	3001      	adds	r0, #1
 8008238:	d01e      	beq.n	8008278 <_printf_common+0xa4>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	6922      	ldr	r2, [r4, #16]
 800823e:	f003 0306 	and.w	r3, r3, #6
 8008242:	2b04      	cmp	r3, #4
 8008244:	bf02      	ittt	eq
 8008246:	68e5      	ldreq	r5, [r4, #12]
 8008248:	6833      	ldreq	r3, [r6, #0]
 800824a:	1aed      	subeq	r5, r5, r3
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	bf0c      	ite	eq
 8008250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008254:	2500      	movne	r5, #0
 8008256:	4293      	cmp	r3, r2
 8008258:	bfc4      	itt	gt
 800825a:	1a9b      	subgt	r3, r3, r2
 800825c:	18ed      	addgt	r5, r5, r3
 800825e:	2600      	movs	r6, #0
 8008260:	341a      	adds	r4, #26
 8008262:	42b5      	cmp	r5, r6
 8008264:	d11a      	bne.n	800829c <_printf_common+0xc8>
 8008266:	2000      	movs	r0, #0
 8008268:	e008      	b.n	800827c <_printf_common+0xa8>
 800826a:	2301      	movs	r3, #1
 800826c:	4652      	mov	r2, sl
 800826e:	4641      	mov	r1, r8
 8008270:	4638      	mov	r0, r7
 8008272:	47c8      	blx	r9
 8008274:	3001      	adds	r0, #1
 8008276:	d103      	bne.n	8008280 <_printf_common+0xac>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800827c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008280:	3501      	adds	r5, #1
 8008282:	e7c6      	b.n	8008212 <_printf_common+0x3e>
 8008284:	18e1      	adds	r1, r4, r3
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	2030      	movs	r0, #48	@ 0x30
 800828a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800828e:	4422      	add	r2, r4
 8008290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008298:	3302      	adds	r3, #2
 800829a:	e7c7      	b.n	800822c <_printf_common+0x58>
 800829c:	2301      	movs	r3, #1
 800829e:	4622      	mov	r2, r4
 80082a0:	4641      	mov	r1, r8
 80082a2:	4638      	mov	r0, r7
 80082a4:	47c8      	blx	r9
 80082a6:	3001      	adds	r0, #1
 80082a8:	d0e6      	beq.n	8008278 <_printf_common+0xa4>
 80082aa:	3601      	adds	r6, #1
 80082ac:	e7d9      	b.n	8008262 <_printf_common+0x8e>
	...

080082b0 <_printf_i>:
 80082b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	7e0f      	ldrb	r7, [r1, #24]
 80082b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082b8:	2f78      	cmp	r7, #120	@ 0x78
 80082ba:	4691      	mov	r9, r2
 80082bc:	4680      	mov	r8, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	469a      	mov	sl, r3
 80082c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082c6:	d807      	bhi.n	80082d8 <_printf_i+0x28>
 80082c8:	2f62      	cmp	r7, #98	@ 0x62
 80082ca:	d80a      	bhi.n	80082e2 <_printf_i+0x32>
 80082cc:	2f00      	cmp	r7, #0
 80082ce:	f000 80d2 	beq.w	8008476 <_printf_i+0x1c6>
 80082d2:	2f58      	cmp	r7, #88	@ 0x58
 80082d4:	f000 80b9 	beq.w	800844a <_printf_i+0x19a>
 80082d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082e0:	e03a      	b.n	8008358 <_printf_i+0xa8>
 80082e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082e6:	2b15      	cmp	r3, #21
 80082e8:	d8f6      	bhi.n	80082d8 <_printf_i+0x28>
 80082ea:	a101      	add	r1, pc, #4	@ (adr r1, 80082f0 <_printf_i+0x40>)
 80082ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082f0:	08008349 	.word	0x08008349
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	080082d9 	.word	0x080082d9
 80082fc:	080082d9 	.word	0x080082d9
 8008300:	080082d9 	.word	0x080082d9
 8008304:	080082d9 	.word	0x080082d9
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080082d9 	.word	0x080082d9
 8008310:	080082d9 	.word	0x080082d9
 8008314:	080082d9 	.word	0x080082d9
 8008318:	080082d9 	.word	0x080082d9
 800831c:	0800845d 	.word	0x0800845d
 8008320:	08008387 	.word	0x08008387
 8008324:	08008417 	.word	0x08008417
 8008328:	080082d9 	.word	0x080082d9
 800832c:	080082d9 	.word	0x080082d9
 8008330:	0800847f 	.word	0x0800847f
 8008334:	080082d9 	.word	0x080082d9
 8008338:	08008387 	.word	0x08008387
 800833c:	080082d9 	.word	0x080082d9
 8008340:	080082d9 	.word	0x080082d9
 8008344:	0800841f 	.word	0x0800841f
 8008348:	6833      	ldr	r3, [r6, #0]
 800834a:	1d1a      	adds	r2, r3, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6032      	str	r2, [r6, #0]
 8008350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008358:	2301      	movs	r3, #1
 800835a:	e09d      	b.n	8008498 <_printf_i+0x1e8>
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	6820      	ldr	r0, [r4, #0]
 8008360:	1d19      	adds	r1, r3, #4
 8008362:	6031      	str	r1, [r6, #0]
 8008364:	0606      	lsls	r6, r0, #24
 8008366:	d501      	bpl.n	800836c <_printf_i+0xbc>
 8008368:	681d      	ldr	r5, [r3, #0]
 800836a:	e003      	b.n	8008374 <_printf_i+0xc4>
 800836c:	0645      	lsls	r5, r0, #25
 800836e:	d5fb      	bpl.n	8008368 <_printf_i+0xb8>
 8008370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008374:	2d00      	cmp	r5, #0
 8008376:	da03      	bge.n	8008380 <_printf_i+0xd0>
 8008378:	232d      	movs	r3, #45	@ 0x2d
 800837a:	426d      	negs	r5, r5
 800837c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008380:	4859      	ldr	r0, [pc, #356]	@ (80084e8 <_printf_i+0x238>)
 8008382:	230a      	movs	r3, #10
 8008384:	e011      	b.n	80083aa <_printf_i+0xfa>
 8008386:	6821      	ldr	r1, [r4, #0]
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	0608      	lsls	r0, r1, #24
 800838c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008390:	d402      	bmi.n	8008398 <_printf_i+0xe8>
 8008392:	0649      	lsls	r1, r1, #25
 8008394:	bf48      	it	mi
 8008396:	b2ad      	uxthmi	r5, r5
 8008398:	2f6f      	cmp	r7, #111	@ 0x6f
 800839a:	4853      	ldr	r0, [pc, #332]	@ (80084e8 <_printf_i+0x238>)
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	bf14      	ite	ne
 80083a0:	230a      	movne	r3, #10
 80083a2:	2308      	moveq	r3, #8
 80083a4:	2100      	movs	r1, #0
 80083a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083aa:	6866      	ldr	r6, [r4, #4]
 80083ac:	60a6      	str	r6, [r4, #8]
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	bfa2      	ittt	ge
 80083b2:	6821      	ldrge	r1, [r4, #0]
 80083b4:	f021 0104 	bicge.w	r1, r1, #4
 80083b8:	6021      	strge	r1, [r4, #0]
 80083ba:	b90d      	cbnz	r5, 80083c0 <_printf_i+0x110>
 80083bc:	2e00      	cmp	r6, #0
 80083be:	d04b      	beq.n	8008458 <_printf_i+0x1a8>
 80083c0:	4616      	mov	r6, r2
 80083c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083c6:	fb03 5711 	mls	r7, r3, r1, r5
 80083ca:	5dc7      	ldrb	r7, [r0, r7]
 80083cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083d0:	462f      	mov	r7, r5
 80083d2:	42bb      	cmp	r3, r7
 80083d4:	460d      	mov	r5, r1
 80083d6:	d9f4      	bls.n	80083c2 <_printf_i+0x112>
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d10b      	bne.n	80083f4 <_printf_i+0x144>
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	07df      	lsls	r7, r3, #31
 80083e0:	d508      	bpl.n	80083f4 <_printf_i+0x144>
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	6861      	ldr	r1, [r4, #4]
 80083e6:	4299      	cmp	r1, r3
 80083e8:	bfde      	ittt	le
 80083ea:	2330      	movle	r3, #48	@ 0x30
 80083ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80083f4:	1b92      	subs	r2, r2, r6
 80083f6:	6122      	str	r2, [r4, #16]
 80083f8:	f8cd a000 	str.w	sl, [sp]
 80083fc:	464b      	mov	r3, r9
 80083fe:	aa03      	add	r2, sp, #12
 8008400:	4621      	mov	r1, r4
 8008402:	4640      	mov	r0, r8
 8008404:	f7ff fee6 	bl	80081d4 <_printf_common>
 8008408:	3001      	adds	r0, #1
 800840a:	d14a      	bne.n	80084a2 <_printf_i+0x1f2>
 800840c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008410:	b004      	add	sp, #16
 8008412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	f043 0320 	orr.w	r3, r3, #32
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	4833      	ldr	r0, [pc, #204]	@ (80084ec <_printf_i+0x23c>)
 8008420:	2778      	movs	r7, #120	@ 0x78
 8008422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	6831      	ldr	r1, [r6, #0]
 800842a:	061f      	lsls	r7, r3, #24
 800842c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008430:	d402      	bmi.n	8008438 <_printf_i+0x188>
 8008432:	065f      	lsls	r7, r3, #25
 8008434:	bf48      	it	mi
 8008436:	b2ad      	uxthmi	r5, r5
 8008438:	6031      	str	r1, [r6, #0]
 800843a:	07d9      	lsls	r1, r3, #31
 800843c:	bf44      	itt	mi
 800843e:	f043 0320 	orrmi.w	r3, r3, #32
 8008442:	6023      	strmi	r3, [r4, #0]
 8008444:	b11d      	cbz	r5, 800844e <_printf_i+0x19e>
 8008446:	2310      	movs	r3, #16
 8008448:	e7ac      	b.n	80083a4 <_printf_i+0xf4>
 800844a:	4827      	ldr	r0, [pc, #156]	@ (80084e8 <_printf_i+0x238>)
 800844c:	e7e9      	b.n	8008422 <_printf_i+0x172>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	f023 0320 	bic.w	r3, r3, #32
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	e7f6      	b.n	8008446 <_printf_i+0x196>
 8008458:	4616      	mov	r6, r2
 800845a:	e7bd      	b.n	80083d8 <_printf_i+0x128>
 800845c:	6833      	ldr	r3, [r6, #0]
 800845e:	6825      	ldr	r5, [r4, #0]
 8008460:	6961      	ldr	r1, [r4, #20]
 8008462:	1d18      	adds	r0, r3, #4
 8008464:	6030      	str	r0, [r6, #0]
 8008466:	062e      	lsls	r6, r5, #24
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	d501      	bpl.n	8008470 <_printf_i+0x1c0>
 800846c:	6019      	str	r1, [r3, #0]
 800846e:	e002      	b.n	8008476 <_printf_i+0x1c6>
 8008470:	0668      	lsls	r0, r5, #25
 8008472:	d5fb      	bpl.n	800846c <_printf_i+0x1bc>
 8008474:	8019      	strh	r1, [r3, #0]
 8008476:	2300      	movs	r3, #0
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	4616      	mov	r6, r2
 800847c:	e7bc      	b.n	80083f8 <_printf_i+0x148>
 800847e:	6833      	ldr	r3, [r6, #0]
 8008480:	1d1a      	adds	r2, r3, #4
 8008482:	6032      	str	r2, [r6, #0]
 8008484:	681e      	ldr	r6, [r3, #0]
 8008486:	6862      	ldr	r2, [r4, #4]
 8008488:	2100      	movs	r1, #0
 800848a:	4630      	mov	r0, r6
 800848c:	f7f7 feb8 	bl	8000200 <memchr>
 8008490:	b108      	cbz	r0, 8008496 <_printf_i+0x1e6>
 8008492:	1b80      	subs	r0, r0, r6
 8008494:	6060      	str	r0, [r4, #4]
 8008496:	6863      	ldr	r3, [r4, #4]
 8008498:	6123      	str	r3, [r4, #16]
 800849a:	2300      	movs	r3, #0
 800849c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084a0:	e7aa      	b.n	80083f8 <_printf_i+0x148>
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	4632      	mov	r2, r6
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	47d0      	blx	sl
 80084ac:	3001      	adds	r0, #1
 80084ae:	d0ad      	beq.n	800840c <_printf_i+0x15c>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	079b      	lsls	r3, r3, #30
 80084b4:	d413      	bmi.n	80084de <_printf_i+0x22e>
 80084b6:	68e0      	ldr	r0, [r4, #12]
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	4298      	cmp	r0, r3
 80084bc:	bfb8      	it	lt
 80084be:	4618      	movlt	r0, r3
 80084c0:	e7a6      	b.n	8008410 <_printf_i+0x160>
 80084c2:	2301      	movs	r3, #1
 80084c4:	4632      	mov	r2, r6
 80084c6:	4649      	mov	r1, r9
 80084c8:	4640      	mov	r0, r8
 80084ca:	47d0      	blx	sl
 80084cc:	3001      	adds	r0, #1
 80084ce:	d09d      	beq.n	800840c <_printf_i+0x15c>
 80084d0:	3501      	adds	r5, #1
 80084d2:	68e3      	ldr	r3, [r4, #12]
 80084d4:	9903      	ldr	r1, [sp, #12]
 80084d6:	1a5b      	subs	r3, r3, r1
 80084d8:	42ab      	cmp	r3, r5
 80084da:	dcf2      	bgt.n	80084c2 <_printf_i+0x212>
 80084dc:	e7eb      	b.n	80084b6 <_printf_i+0x206>
 80084de:	2500      	movs	r5, #0
 80084e0:	f104 0619 	add.w	r6, r4, #25
 80084e4:	e7f5      	b.n	80084d2 <_printf_i+0x222>
 80084e6:	bf00      	nop
 80084e8:	08008dbe 	.word	0x08008dbe
 80084ec:	08008dcf 	.word	0x08008dcf

080084f0 <__sflush_r>:
 80084f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f8:	0716      	lsls	r6, r2, #28
 80084fa:	4605      	mov	r5, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	d454      	bmi.n	80085aa <__sflush_r+0xba>
 8008500:	684b      	ldr	r3, [r1, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	dc02      	bgt.n	800850c <__sflush_r+0x1c>
 8008506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	dd48      	ble.n	800859e <__sflush_r+0xae>
 800850c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800850e:	2e00      	cmp	r6, #0
 8008510:	d045      	beq.n	800859e <__sflush_r+0xae>
 8008512:	2300      	movs	r3, #0
 8008514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008518:	682f      	ldr	r7, [r5, #0]
 800851a:	6a21      	ldr	r1, [r4, #32]
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	d030      	beq.n	8008582 <__sflush_r+0x92>
 8008520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	0759      	lsls	r1, r3, #29
 8008526:	d505      	bpl.n	8008534 <__sflush_r+0x44>
 8008528:	6863      	ldr	r3, [r4, #4]
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800852e:	b10b      	cbz	r3, 8008534 <__sflush_r+0x44>
 8008530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008532:	1ad2      	subs	r2, r2, r3
 8008534:	2300      	movs	r3, #0
 8008536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008538:	6a21      	ldr	r1, [r4, #32]
 800853a:	4628      	mov	r0, r5
 800853c:	47b0      	blx	r6
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	d106      	bne.n	8008552 <__sflush_r+0x62>
 8008544:	6829      	ldr	r1, [r5, #0]
 8008546:	291d      	cmp	r1, #29
 8008548:	d82b      	bhi.n	80085a2 <__sflush_r+0xb2>
 800854a:	4a2a      	ldr	r2, [pc, #168]	@ (80085f4 <__sflush_r+0x104>)
 800854c:	410a      	asrs	r2, r1
 800854e:	07d6      	lsls	r6, r2, #31
 8008550:	d427      	bmi.n	80085a2 <__sflush_r+0xb2>
 8008552:	2200      	movs	r2, #0
 8008554:	6062      	str	r2, [r4, #4]
 8008556:	04d9      	lsls	r1, r3, #19
 8008558:	6922      	ldr	r2, [r4, #16]
 800855a:	6022      	str	r2, [r4, #0]
 800855c:	d504      	bpl.n	8008568 <__sflush_r+0x78>
 800855e:	1c42      	adds	r2, r0, #1
 8008560:	d101      	bne.n	8008566 <__sflush_r+0x76>
 8008562:	682b      	ldr	r3, [r5, #0]
 8008564:	b903      	cbnz	r3, 8008568 <__sflush_r+0x78>
 8008566:	6560      	str	r0, [r4, #84]	@ 0x54
 8008568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800856a:	602f      	str	r7, [r5, #0]
 800856c:	b1b9      	cbz	r1, 800859e <__sflush_r+0xae>
 800856e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008572:	4299      	cmp	r1, r3
 8008574:	d002      	beq.n	800857c <__sflush_r+0x8c>
 8008576:	4628      	mov	r0, r5
 8008578:	f7ff fbf6 	bl	8007d68 <_free_r>
 800857c:	2300      	movs	r3, #0
 800857e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008580:	e00d      	b.n	800859e <__sflush_r+0xae>
 8008582:	2301      	movs	r3, #1
 8008584:	4628      	mov	r0, r5
 8008586:	47b0      	blx	r6
 8008588:	4602      	mov	r2, r0
 800858a:	1c50      	adds	r0, r2, #1
 800858c:	d1c9      	bne.n	8008522 <__sflush_r+0x32>
 800858e:	682b      	ldr	r3, [r5, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0c6      	beq.n	8008522 <__sflush_r+0x32>
 8008594:	2b1d      	cmp	r3, #29
 8008596:	d001      	beq.n	800859c <__sflush_r+0xac>
 8008598:	2b16      	cmp	r3, #22
 800859a:	d11e      	bne.n	80085da <__sflush_r+0xea>
 800859c:	602f      	str	r7, [r5, #0]
 800859e:	2000      	movs	r0, #0
 80085a0:	e022      	b.n	80085e8 <__sflush_r+0xf8>
 80085a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a6:	b21b      	sxth	r3, r3
 80085a8:	e01b      	b.n	80085e2 <__sflush_r+0xf2>
 80085aa:	690f      	ldr	r7, [r1, #16]
 80085ac:	2f00      	cmp	r7, #0
 80085ae:	d0f6      	beq.n	800859e <__sflush_r+0xae>
 80085b0:	0793      	lsls	r3, r2, #30
 80085b2:	680e      	ldr	r6, [r1, #0]
 80085b4:	bf08      	it	eq
 80085b6:	694b      	ldreq	r3, [r1, #20]
 80085b8:	600f      	str	r7, [r1, #0]
 80085ba:	bf18      	it	ne
 80085bc:	2300      	movne	r3, #0
 80085be:	eba6 0807 	sub.w	r8, r6, r7
 80085c2:	608b      	str	r3, [r1, #8]
 80085c4:	f1b8 0f00 	cmp.w	r8, #0
 80085c8:	dde9      	ble.n	800859e <__sflush_r+0xae>
 80085ca:	6a21      	ldr	r1, [r4, #32]
 80085cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085ce:	4643      	mov	r3, r8
 80085d0:	463a      	mov	r2, r7
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b0      	blx	r6
 80085d6:	2800      	cmp	r0, #0
 80085d8:	dc08      	bgt.n	80085ec <__sflush_r+0xfc>
 80085da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ec:	4407      	add	r7, r0
 80085ee:	eba8 0800 	sub.w	r8, r8, r0
 80085f2:	e7e7      	b.n	80085c4 <__sflush_r+0xd4>
 80085f4:	dfbffffe 	.word	0xdfbffffe

080085f8 <_fflush_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	690b      	ldr	r3, [r1, #16]
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	b913      	cbnz	r3, 8008608 <_fflush_r+0x10>
 8008602:	2500      	movs	r5, #0
 8008604:	4628      	mov	r0, r5
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	b118      	cbz	r0, 8008612 <_fflush_r+0x1a>
 800860a:	6a03      	ldr	r3, [r0, #32]
 800860c:	b90b      	cbnz	r3, 8008612 <_fflush_r+0x1a>
 800860e:	f7ff f9ff 	bl	8007a10 <__sinit>
 8008612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0f3      	beq.n	8008602 <_fflush_r+0xa>
 800861a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800861c:	07d0      	lsls	r0, r2, #31
 800861e:	d404      	bmi.n	800862a <_fflush_r+0x32>
 8008620:	0599      	lsls	r1, r3, #22
 8008622:	d402      	bmi.n	800862a <_fflush_r+0x32>
 8008624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008626:	f7ff fb7e 	bl	8007d26 <__retarget_lock_acquire_recursive>
 800862a:	4628      	mov	r0, r5
 800862c:	4621      	mov	r1, r4
 800862e:	f7ff ff5f 	bl	80084f0 <__sflush_r>
 8008632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008634:	07da      	lsls	r2, r3, #31
 8008636:	4605      	mov	r5, r0
 8008638:	d4e4      	bmi.n	8008604 <_fflush_r+0xc>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	059b      	lsls	r3, r3, #22
 800863e:	d4e1      	bmi.n	8008604 <_fflush_r+0xc>
 8008640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008642:	f7ff fb71 	bl	8007d28 <__retarget_lock_release_recursive>
 8008646:	e7dd      	b.n	8008604 <_fflush_r+0xc>

08008648 <__malloc_lock>:
 8008648:	4801      	ldr	r0, [pc, #4]	@ (8008650 <__malloc_lock+0x8>)
 800864a:	f7ff bb6c 	b.w	8007d26 <__retarget_lock_acquire_recursive>
 800864e:	bf00      	nop
 8008650:	20005720 	.word	0x20005720

08008654 <__malloc_unlock>:
 8008654:	4801      	ldr	r0, [pc, #4]	@ (800865c <__malloc_unlock+0x8>)
 8008656:	f7ff bb67 	b.w	8007d28 <__retarget_lock_release_recursive>
 800865a:	bf00      	nop
 800865c:	20005720 	.word	0x20005720

08008660 <__sread>:
 8008660:	b510      	push	{r4, lr}
 8008662:	460c      	mov	r4, r1
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	f000 f98a 	bl	8008980 <_read_r>
 800866c:	2800      	cmp	r0, #0
 800866e:	bfab      	itete	ge
 8008670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008672:	89a3      	ldrhlt	r3, [r4, #12]
 8008674:	181b      	addge	r3, r3, r0
 8008676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800867a:	bfac      	ite	ge
 800867c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800867e:	81a3      	strhlt	r3, [r4, #12]
 8008680:	bd10      	pop	{r4, pc}

08008682 <__swrite>:
 8008682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	461f      	mov	r7, r3
 8008688:	898b      	ldrh	r3, [r1, #12]
 800868a:	05db      	lsls	r3, r3, #23
 800868c:	4605      	mov	r5, r0
 800868e:	460c      	mov	r4, r1
 8008690:	4616      	mov	r6, r2
 8008692:	d505      	bpl.n	80086a0 <__swrite+0x1e>
 8008694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008698:	2302      	movs	r3, #2
 800869a:	2200      	movs	r2, #0
 800869c:	f000 f95e 	bl	800895c <_lseek_r>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	4632      	mov	r2, r6
 80086ae:	463b      	mov	r3, r7
 80086b0:	4628      	mov	r0, r5
 80086b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086b6:	f000 b985 	b.w	80089c4 <_write_r>

080086ba <__sseek>:
 80086ba:	b510      	push	{r4, lr}
 80086bc:	460c      	mov	r4, r1
 80086be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c2:	f000 f94b 	bl	800895c <_lseek_r>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	bf15      	itete	ne
 80086cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086d6:	81a3      	strheq	r3, [r4, #12]
 80086d8:	bf18      	it	ne
 80086da:	81a3      	strhne	r3, [r4, #12]
 80086dc:	bd10      	pop	{r4, pc}

080086de <__sclose>:
 80086de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e2:	f000 b909 	b.w	80088f8 <_close_r>
	...

080086e8 <fiprintf>:
 80086e8:	b40e      	push	{r1, r2, r3}
 80086ea:	b503      	push	{r0, r1, lr}
 80086ec:	4601      	mov	r1, r0
 80086ee:	ab03      	add	r3, sp, #12
 80086f0:	4805      	ldr	r0, [pc, #20]	@ (8008708 <fiprintf+0x20>)
 80086f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f6:	6800      	ldr	r0, [r0, #0]
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	f7ff fba9 	bl	8007e50 <_vfiprintf_r>
 80086fe:	b002      	add	sp, #8
 8008700:	f85d eb04 	ldr.w	lr, [sp], #4
 8008704:	b003      	add	sp, #12
 8008706:	4770      	bx	lr
 8008708:	200000ec 	.word	0x200000ec

0800870c <__swbuf_r>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	460e      	mov	r6, r1
 8008710:	4614      	mov	r4, r2
 8008712:	4605      	mov	r5, r0
 8008714:	b118      	cbz	r0, 800871e <__swbuf_r+0x12>
 8008716:	6a03      	ldr	r3, [r0, #32]
 8008718:	b90b      	cbnz	r3, 800871e <__swbuf_r+0x12>
 800871a:	f7ff f979 	bl	8007a10 <__sinit>
 800871e:	69a3      	ldr	r3, [r4, #24]
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	071a      	lsls	r2, r3, #28
 8008726:	d501      	bpl.n	800872c <__swbuf_r+0x20>
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	b943      	cbnz	r3, 800873e <__swbuf_r+0x32>
 800872c:	4621      	mov	r1, r4
 800872e:	4628      	mov	r0, r5
 8008730:	f000 f82a 	bl	8008788 <__swsetup_r>
 8008734:	b118      	cbz	r0, 800873e <__swbuf_r+0x32>
 8008736:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800873a:	4638      	mov	r0, r7
 800873c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	6922      	ldr	r2, [r4, #16]
 8008742:	1a98      	subs	r0, r3, r2
 8008744:	6963      	ldr	r3, [r4, #20]
 8008746:	b2f6      	uxtb	r6, r6
 8008748:	4283      	cmp	r3, r0
 800874a:	4637      	mov	r7, r6
 800874c:	dc05      	bgt.n	800875a <__swbuf_r+0x4e>
 800874e:	4621      	mov	r1, r4
 8008750:	4628      	mov	r0, r5
 8008752:	f7ff ff51 	bl	80085f8 <_fflush_r>
 8008756:	2800      	cmp	r0, #0
 8008758:	d1ed      	bne.n	8008736 <__swbuf_r+0x2a>
 800875a:	68a3      	ldr	r3, [r4, #8]
 800875c:	3b01      	subs	r3, #1
 800875e:	60a3      	str	r3, [r4, #8]
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	6022      	str	r2, [r4, #0]
 8008766:	701e      	strb	r6, [r3, #0]
 8008768:	6962      	ldr	r2, [r4, #20]
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	429a      	cmp	r2, r3
 800876e:	d004      	beq.n	800877a <__swbuf_r+0x6e>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	07db      	lsls	r3, r3, #31
 8008774:	d5e1      	bpl.n	800873a <__swbuf_r+0x2e>
 8008776:	2e0a      	cmp	r6, #10
 8008778:	d1df      	bne.n	800873a <__swbuf_r+0x2e>
 800877a:	4621      	mov	r1, r4
 800877c:	4628      	mov	r0, r5
 800877e:	f7ff ff3b 	bl	80085f8 <_fflush_r>
 8008782:	2800      	cmp	r0, #0
 8008784:	d0d9      	beq.n	800873a <__swbuf_r+0x2e>
 8008786:	e7d6      	b.n	8008736 <__swbuf_r+0x2a>

08008788 <__swsetup_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4b29      	ldr	r3, [pc, #164]	@ (8008830 <__swsetup_r+0xa8>)
 800878c:	4605      	mov	r5, r0
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	460c      	mov	r4, r1
 8008792:	b118      	cbz	r0, 800879c <__swsetup_r+0x14>
 8008794:	6a03      	ldr	r3, [r0, #32]
 8008796:	b90b      	cbnz	r3, 800879c <__swsetup_r+0x14>
 8008798:	f7ff f93a 	bl	8007a10 <__sinit>
 800879c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a0:	0719      	lsls	r1, r3, #28
 80087a2:	d422      	bmi.n	80087ea <__swsetup_r+0x62>
 80087a4:	06da      	lsls	r2, r3, #27
 80087a6:	d407      	bmi.n	80087b8 <__swsetup_r+0x30>
 80087a8:	2209      	movs	r2, #9
 80087aa:	602a      	str	r2, [r5, #0]
 80087ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087b6:	e033      	b.n	8008820 <__swsetup_r+0x98>
 80087b8:	0758      	lsls	r0, r3, #29
 80087ba:	d512      	bpl.n	80087e2 <__swsetup_r+0x5a>
 80087bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087be:	b141      	cbz	r1, 80087d2 <__swsetup_r+0x4a>
 80087c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087c4:	4299      	cmp	r1, r3
 80087c6:	d002      	beq.n	80087ce <__swsetup_r+0x46>
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff facd 	bl	8007d68 <_free_r>
 80087ce:	2300      	movs	r3, #0
 80087d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	2300      	movs	r3, #0
 80087dc:	6063      	str	r3, [r4, #4]
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	f043 0308 	orr.w	r3, r3, #8
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	b94b      	cbnz	r3, 8008802 <__swsetup_r+0x7a>
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087f8:	d003      	beq.n	8008802 <__swsetup_r+0x7a>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4628      	mov	r0, r5
 80087fe:	f000 f83f 	bl	8008880 <__smakebuf_r>
 8008802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008806:	f013 0201 	ands.w	r2, r3, #1
 800880a:	d00a      	beq.n	8008822 <__swsetup_r+0x9a>
 800880c:	2200      	movs	r2, #0
 800880e:	60a2      	str	r2, [r4, #8]
 8008810:	6962      	ldr	r2, [r4, #20]
 8008812:	4252      	negs	r2, r2
 8008814:	61a2      	str	r2, [r4, #24]
 8008816:	6922      	ldr	r2, [r4, #16]
 8008818:	b942      	cbnz	r2, 800882c <__swsetup_r+0xa4>
 800881a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800881e:	d1c5      	bne.n	80087ac <__swsetup_r+0x24>
 8008820:	bd38      	pop	{r3, r4, r5, pc}
 8008822:	0799      	lsls	r1, r3, #30
 8008824:	bf58      	it	pl
 8008826:	6962      	ldrpl	r2, [r4, #20]
 8008828:	60a2      	str	r2, [r4, #8]
 800882a:	e7f4      	b.n	8008816 <__swsetup_r+0x8e>
 800882c:	2000      	movs	r0, #0
 800882e:	e7f7      	b.n	8008820 <__swsetup_r+0x98>
 8008830:	200000ec 	.word	0x200000ec

08008834 <__swhatbuf_r>:
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	460c      	mov	r4, r1
 8008838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883c:	2900      	cmp	r1, #0
 800883e:	b096      	sub	sp, #88	@ 0x58
 8008840:	4615      	mov	r5, r2
 8008842:	461e      	mov	r6, r3
 8008844:	da0d      	bge.n	8008862 <__swhatbuf_r+0x2e>
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800884c:	f04f 0100 	mov.w	r1, #0
 8008850:	bf14      	ite	ne
 8008852:	2340      	movne	r3, #64	@ 0x40
 8008854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008858:	2000      	movs	r0, #0
 800885a:	6031      	str	r1, [r6, #0]
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	b016      	add	sp, #88	@ 0x58
 8008860:	bd70      	pop	{r4, r5, r6, pc}
 8008862:	466a      	mov	r2, sp
 8008864:	f000 f858 	bl	8008918 <_fstat_r>
 8008868:	2800      	cmp	r0, #0
 800886a:	dbec      	blt.n	8008846 <__swhatbuf_r+0x12>
 800886c:	9901      	ldr	r1, [sp, #4]
 800886e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008876:	4259      	negs	r1, r3
 8008878:	4159      	adcs	r1, r3
 800887a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800887e:	e7eb      	b.n	8008858 <__swhatbuf_r+0x24>

08008880 <__smakebuf_r>:
 8008880:	898b      	ldrh	r3, [r1, #12]
 8008882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008884:	079d      	lsls	r5, r3, #30
 8008886:	4606      	mov	r6, r0
 8008888:	460c      	mov	r4, r1
 800888a:	d507      	bpl.n	800889c <__smakebuf_r+0x1c>
 800888c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	6123      	str	r3, [r4, #16]
 8008894:	2301      	movs	r3, #1
 8008896:	6163      	str	r3, [r4, #20]
 8008898:	b003      	add	sp, #12
 800889a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889c:	ab01      	add	r3, sp, #4
 800889e:	466a      	mov	r2, sp
 80088a0:	f7ff ffc8 	bl	8008834 <__swhatbuf_r>
 80088a4:	9f00      	ldr	r7, [sp, #0]
 80088a6:	4605      	mov	r5, r0
 80088a8:	4639      	mov	r1, r7
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff fc12 	bl	80080d4 <_malloc_r>
 80088b0:	b948      	cbnz	r0, 80088c6 <__smakebuf_r+0x46>
 80088b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b6:	059a      	lsls	r2, r3, #22
 80088b8:	d4ee      	bmi.n	8008898 <__smakebuf_r+0x18>
 80088ba:	f023 0303 	bic.w	r3, r3, #3
 80088be:	f043 0302 	orr.w	r3, r3, #2
 80088c2:	81a3      	strh	r3, [r4, #12]
 80088c4:	e7e2      	b.n	800888c <__smakebuf_r+0xc>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	6020      	str	r0, [r4, #0]
 80088ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	9b01      	ldr	r3, [sp, #4]
 80088d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80088d6:	b15b      	cbz	r3, 80088f0 <__smakebuf_r+0x70>
 80088d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088dc:	4630      	mov	r0, r6
 80088de:	f000 f82d 	bl	800893c <_isatty_r>
 80088e2:	b128      	cbz	r0, 80088f0 <__smakebuf_r+0x70>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	f023 0303 	bic.w	r3, r3, #3
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	431d      	orrs	r5, r3
 80088f4:	81a5      	strh	r5, [r4, #12]
 80088f6:	e7cf      	b.n	8008898 <__smakebuf_r+0x18>

080088f8 <_close_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d06      	ldr	r5, [pc, #24]	@ (8008914 <_close_r+0x1c>)
 80088fc:	2300      	movs	r3, #0
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7f8 f9fc 	bl	8000d00 <_close>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_close_r+0x1a>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_close_r+0x1a>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	2000571c 	.word	0x2000571c

08008918 <_fstat_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d07      	ldr	r5, [pc, #28]	@ (8008938 <_fstat_r+0x20>)
 800891c:	2300      	movs	r3, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	4611      	mov	r1, r2
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	f7f8 f9f7 	bl	8000d18 <_fstat>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	d102      	bne.n	8008934 <_fstat_r+0x1c>
 800892e:	682b      	ldr	r3, [r5, #0]
 8008930:	b103      	cbz	r3, 8008934 <_fstat_r+0x1c>
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	bd38      	pop	{r3, r4, r5, pc}
 8008936:	bf00      	nop
 8008938:	2000571c 	.word	0x2000571c

0800893c <_isatty_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4d06      	ldr	r5, [pc, #24]	@ (8008958 <_isatty_r+0x1c>)
 8008940:	2300      	movs	r3, #0
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	f7f8 f9f6 	bl	8000d38 <_isatty>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_isatty_r+0x1a>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_isatty_r+0x1a>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	2000571c 	.word	0x2000571c

0800895c <_lseek_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	@ (800897c <_lseek_r+0x20>)
 8008960:	4604      	mov	r4, r0
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	2200      	movs	r2, #0
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f8 f9ef 	bl	8000d4e <_lseek>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_lseek_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_lseek_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	2000571c 	.word	0x2000571c

08008980 <_read_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	@ (80089a0 <_read_r+0x20>)
 8008984:	4604      	mov	r4, r0
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	2200      	movs	r2, #0
 800898c:	602a      	str	r2, [r5, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f7f8 f97d 	bl	8000c8e <_read>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_read_r+0x1e>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_read_r+0x1e>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	2000571c 	.word	0x2000571c

080089a4 <_sbrk_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d06      	ldr	r5, [pc, #24]	@ (80089c0 <_sbrk_r+0x1c>)
 80089a8:	2300      	movs	r3, #0
 80089aa:	4604      	mov	r4, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	f7f8 f9da 	bl	8000d68 <_sbrk>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_sbrk_r+0x1a>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_sbrk_r+0x1a>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	2000571c 	.word	0x2000571c

080089c4 <_write_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	@ (80089e4 <_write_r+0x20>)
 80089c8:	4604      	mov	r4, r0
 80089ca:	4608      	mov	r0, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	2200      	movs	r2, #0
 80089d0:	602a      	str	r2, [r5, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	f7f8 f978 	bl	8000cc8 <_write>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d102      	bne.n	80089e2 <_write_r+0x1e>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	b103      	cbz	r3, 80089e2 <_write_r+0x1e>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	2000571c 	.word	0x2000571c

080089e8 <abort>:
 80089e8:	b508      	push	{r3, lr}
 80089ea:	2006      	movs	r0, #6
 80089ec:	f000 f82c 	bl	8008a48 <raise>
 80089f0:	2001      	movs	r0, #1
 80089f2:	f7f8 f941 	bl	8000c78 <_exit>

080089f6 <_raise_r>:
 80089f6:	291f      	cmp	r1, #31
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4605      	mov	r5, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	d904      	bls.n	8008a0a <_raise_r+0x14>
 8008a00:	2316      	movs	r3, #22
 8008a02:	6003      	str	r3, [r0, #0]
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a08:	bd38      	pop	{r3, r4, r5, pc}
 8008a0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a0c:	b112      	cbz	r2, 8008a14 <_raise_r+0x1e>
 8008a0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a12:	b94b      	cbnz	r3, 8008a28 <_raise_r+0x32>
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 f831 	bl	8008a7c <_getpid_r>
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	4628      	mov	r0, r5
 8008a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a24:	f000 b818 	b.w	8008a58 <_kill_r>
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d00a      	beq.n	8008a42 <_raise_r+0x4c>
 8008a2c:	1c59      	adds	r1, r3, #1
 8008a2e:	d103      	bne.n	8008a38 <_raise_r+0x42>
 8008a30:	2316      	movs	r3, #22
 8008a32:	6003      	str	r3, [r0, #0]
 8008a34:	2001      	movs	r0, #1
 8008a36:	e7e7      	b.n	8008a08 <_raise_r+0x12>
 8008a38:	2100      	movs	r1, #0
 8008a3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	4798      	blx	r3
 8008a42:	2000      	movs	r0, #0
 8008a44:	e7e0      	b.n	8008a08 <_raise_r+0x12>
	...

08008a48 <raise>:
 8008a48:	4b02      	ldr	r3, [pc, #8]	@ (8008a54 <raise+0xc>)
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f7ff bfd2 	b.w	80089f6 <_raise_r>
 8008a52:	bf00      	nop
 8008a54:	200000ec 	.word	0x200000ec

08008a58 <_kill_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d07      	ldr	r5, [pc, #28]	@ (8008a78 <_kill_r+0x20>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	4611      	mov	r1, r2
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	f7f8 f8f7 	bl	8000c58 <_kill>
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	d102      	bne.n	8008a74 <_kill_r+0x1c>
 8008a6e:	682b      	ldr	r3, [r5, #0]
 8008a70:	b103      	cbz	r3, 8008a74 <_kill_r+0x1c>
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	bd38      	pop	{r3, r4, r5, pc}
 8008a76:	bf00      	nop
 8008a78:	2000571c 	.word	0x2000571c

08008a7c <_getpid_r>:
 8008a7c:	f7f8 b8e4 	b.w	8000c48 <_getpid>

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
